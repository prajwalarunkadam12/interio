{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport bcrypt from \"bcryptjs\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport {\n  insertUserSchema,\n  insertProductSchema,\n  insertCategorySchema,\n  insertOrderSchema,\n  insertOrderItemSchema,\n  insertReviewSchema,\n  insertCartItemSchema,\n  insertWishlistItemSchema,\n  insertTransactionSchema,\n  insertTransactionEventSchema,\n} from \"@shared/schema\";\n\n// Initialize Stripe with dummy key for development\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY || \"sk_test_dummy_key_for_development\", {\n  apiVersion: \"2023-10-16\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists\" });\n      }\n      \n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 10);\n      \n      // Create user\n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n      \n      // Remove password from response\n      const { password, ...userWithoutPassword } = user;\n      res.status(201).json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid data\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || !await bcrypt.compare(password, user.password)) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n      \n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Login failed\" });\n    }\n  });\n\n  app.get(\"/api/auth/user/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      const { password, ...userWithoutPassword } = user;\n      res.json({ user: userWithoutPassword });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get user\" });\n    }\n  });\n\n  // Products routes\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      const filters = {\n        category: req.query.category as string | undefined,\n        featured: req.query.featured ? req.query.featured === 'true' : undefined,\n        search: req.query.search as string | undefined,\n        limit: req.query.limit ? parseInt(req.query.limit as string) : undefined,\n        offset: req.query.offset ? parseInt(req.query.offset as string) : undefined,\n      };\n      \n      const products = await storage.getProducts(filters);\n      res.json({ products });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json({ product });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get product\" });\n    }\n  });\n\n  app.post(\"/api/products\", async (req, res) => {\n    try {\n      const productData = insertProductSchema.parse(req.body);\n      const product = await storage.createProduct(productData);\n      res.status(201).json({ product });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid product data\" });\n    }\n  });\n\n  // Categories routes\n  app.get(\"/api/categories\", async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json({ categories });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get categories\" });\n    }\n  });\n\n  app.post(\"/api/categories\", async (req, res) => {\n    try {\n      const categoryData = insertCategorySchema.parse(req.body);\n      const category = await storage.createCategory(categoryData);\n      res.status(201).json({ category });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid category data\" });\n    }\n  });\n\n  // Orders routes\n  app.get(\"/api/orders/:userId\", async (req, res) => {\n    try {\n      const orders = await storage.getOrders(req.params.userId);\n      res.json({ orders });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get orders\" });\n    }\n  });\n\n  app.post(\"/api/orders\", async (req, res) => {\n    try {\n      const orderData = insertOrderSchema.parse(req.body);\n      const order = await storage.createOrder(orderData);\n      res.status(201).json({ order });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid order data\" });\n    }\n  });\n\n  // Cart routes\n  app.get(\"/api/cart/:userId\", async (req, res) => {\n    try {\n      const items = await storage.getCartItems(req.params.userId);\n      res.json({ items });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get cart items\" });\n    }\n  });\n\n  app.post(\"/api/cart\", async (req, res) => {\n    try {\n      const itemData = insertCartItemSchema.parse(req.body);\n      const item = await storage.addToCart(itemData);\n      res.status(201).json({ item });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid cart item data\" });\n    }\n  });\n\n  app.put(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const { quantity } = req.body;\n      const item = await storage.updateCartItem(req.params.id, quantity);\n      if (!item) {\n        return res.status(404).json({ error: \"Cart item not found\" });\n      }\n      res.json({ item });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to update cart item\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:id\", async (req, res) => {\n    try {\n      const success = await storage.removeFromCart(req.params.id);\n      if (!success) {\n        return res.status(404).json({ error: \"Cart item not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to remove cart item\" });\n    }\n  });\n\n  // Wishlist routes\n  app.get(\"/api/wishlist/:userId\", async (req, res) => {\n    try {\n      const items = await storage.getWishlistItems(req.params.userId);\n      res.json({ items });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get wishlist items\" });\n    }\n  });\n\n  app.post(\"/api/wishlist\", async (req, res) => {\n    try {\n      const itemData = insertWishlistItemSchema.parse(req.body);\n      const item = await storage.addToWishlist(itemData);\n      res.status(201).json({ item });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid wishlist item data\" });\n    }\n  });\n\n  app.delete(\"/api/wishlist/:userId/:productId\", async (req, res) => {\n    try {\n      const success = await storage.removeFromWishlist(req.params.userId, req.params.productId);\n      if (!success) {\n        return res.status(404).json({ error: \"Wishlist item not found\" });\n      }\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to remove wishlist item\" });\n    }\n  });\n\n  // Reviews routes\n  app.get(\"/api/reviews/:productId\", async (req, res) => {\n    try {\n      const reviews = await storage.getReviews(req.params.productId);\n      res.json({ reviews });\n    } catch (error) {\n      res.status(500).json({ error: error instanceof Error ? error.message : \"Failed to get reviews\" });\n    }\n  });\n\n  app.post(\"/api/reviews\", async (req, res) => {\n    try {\n      const reviewData = insertReviewSchema.parse(req.body);\n      const review = await storage.createReview(reviewData);\n      res.status(201).json({ review });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid review data\" });\n    }\n  });\n\n  // Transaction routes for payment tracking\n  app.post(\"/api/transactions\", async (req, res) => {\n    try {\n      const transactionData = insertTransactionSchema.parse(req.body);\n      const transaction = await storage.createTransaction(transactionData);\n      res.status(201).json({ transaction });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid transaction data\" });\n    }\n  });\n\n  app.put(\"/api/transactions/:orderId\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const transaction = await storage.updateTransaction(req.params.orderId, updates);\n      if (!transaction) {\n        return res.status(404).json({ error: \"Transaction not found\" });\n      }\n      res.json({ transaction });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Failed to update transaction\" });\n    }\n  });\n\n  app.post(\"/api/transaction-events\", async (req, res) => {\n    try {\n      const eventData = insertTransactionEventSchema.parse(req.body);\n      const event = await storage.createTransactionEvent(eventData);\n      res.status(201).json({ event });\n    } catch (error) {\n      res.status(400).json({ error: error instanceof Error ? error.message : \"Invalid event data\" });\n    }\n  });\n\n  // Stripe payment route for one-time payments\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const { amount, currency = \"usd\", metadata = {} } = req.body;\n      \n      // For development with dummy keys, return mock response\n      if (!process.env.STRIPE_SECRET_KEY || process.env.STRIPE_SECRET_KEY === \"sk_test_dummy_key_for_development\") {\n        res.json({ \n          clientSecret: `pi_test_${Date.now()}_secret_${Math.random().toString(36).substr(2, 9)}`,\n          paymentIntentId: `pi_test_${Date.now()}`\n        });\n        return;\n      }\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency,\n        metadata,\n        automatic_payment_methods: {\n          enabled: true,\n        },\n      });\n      \n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id\n      });\n    } catch (error: any) {\n      res\n        .status(500)\n        .json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  // Webhook endpoint for Stripe events\n  app.post(\"/api/stripe-webhook\", async (req, res) => {\n    try {\n      // For development with dummy keys, just acknowledge\n      if (!process.env.STRIPE_SECRET_KEY || process.env.STRIPE_SECRET_KEY === \"sk_test_dummy_key_for_development\") {\n        res.json({ received: true });\n        return;\n      }\n\n      const sig = req.headers['stripe-signature'];\n      const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n      if (!sig || !endpointSecret) {\n        return res.status(400).send('Missing signature or webhook secret');\n      }\n\n      let event;\n      try {\n        event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);\n      } catch (err: any) {\n        return res.status(400).send(`Webhook signature verification failed: ${err.message}`);\n      }\n\n      // Handle the event\n      switch (event.type) {\n        case 'payment_intent.succeeded':\n          const paymentIntent = event.data.object;\n          console.log(`PaymentIntent for ${paymentIntent.amount} was successful!`);\n          // Update order status, send confirmation email, etc.\n          break;\n        case 'payment_intent.payment_failed':\n          const failedPayment = event.data.object;\n          console.log(`Payment failed for PaymentIntent ${failedPayment.id}`);\n          break;\n        default:\n          console.log(`Unhandled event type ${event.type}`);\n      }\n\n      res.json({ received: true });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Razorpay payment routes\n  app.post('/api/payments/razorpay/create-order', async (req, res) => {\n    try {\n      const { amount, currency, receipt, notes } = req.body;\n      \n      // Mock Razorpay order creation for development\n      const mockOrder = {\n        id: `order_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`,\n        entity: 'order',\n        amount: amount * 100, // Convert to paise\n        amount_paid: 0,\n        amount_due: amount * 100,\n        currency: currency || 'INR',\n        receipt: receipt,\n        status: 'created',\n        attempts: 0,\n        notes: notes || {},\n        created_at: Math.floor(Date.now() / 1000)\n      };\n      \n      console.log('Created Razorpay order:', mockOrder);\n      res.json({ success: true, order: mockOrder });\n    } catch (error) {\n      console.error('Error creating Razorpay order:', error);\n      res.status(500).json({ error: 'Failed to create order' });\n    }\n  });\n\n  app.post('/api/payments/razorpay/verify', async (req, res) => {\n    try {\n      const { razorpayOrderId, razorpayPaymentId, razorpaySignature } = req.body;\n      \n      // Mock payment verification for development\n      console.log('Verifying Razorpay payment:', {\n        orderId: razorpayOrderId,\n        paymentId: razorpayPaymentId,\n        signature: razorpaySignature\n      });\n      \n      // Mock successful verification\n      const verificationResult = {\n        verified: true,\n        paymentId: razorpayPaymentId,\n        orderId: razorpayOrderId,\n        status: 'captured',\n        amount: 0,\n        timestamp: Date.now()\n      };\n      \n      res.json({ success: true, verification: verificationResult });\n    } catch (error) {\n      console.error('Error verifying Razorpay payment:', error);\n      res.status(500).json({ error: 'Payment verification failed' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14756},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { eq, and, desc } from \"drizzle-orm\";\nimport {\n  users,\n  products,\n  categories,\n  orders,\n  orderItems,\n  reviews,\n  cartItems,\n  wishlistItems,\n  transactions,\n  transactionEvents,\n  type User,\n  type InsertUser,\n  type Product,\n  type InsertProduct,\n  type Category,\n  type InsertCategory,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem,\n  type Review,\n  type InsertReview,\n  type CartItem,\n  type InsertCartItem,\n  type WishlistItem,\n  type InsertWishlistItem,\n  type Transaction,\n  type InsertTransaction,\n  type TransactionEvent,\n  type InsertTransactionEvent,\n} from \"@shared/schema\";\n\n// Database connection\nconst connectionString = process.env.DATABASE_URL!;\nconst client = postgres(connectionString);\nconst db = drizzle(client);\n\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  \n  // Product management\n  getProducts(filters?: {\n    category?: string;\n    featured?: boolean;\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined>;\n  \n  // Category management\n  getCategories(): Promise<Category[]>;\n  getCategory(id: string): Promise<Category | undefined>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Order management\n  getOrders(userId: string): Promise<Order[]>;\n  getOrder(id: string): Promise<Order | undefined>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrder(id: string, updates: Partial<InsertOrder>): Promise<Order | undefined>;\n  \n  // Order items\n  getOrderItems(orderId: string): Promise<OrderItem[]>;\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  \n  // Reviews\n  getReviews(productId: string): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n  updateReview(id: string, updates: Partial<InsertReview>): Promise<Review | undefined>;\n  deleteReview(id: string, userId: string): Promise<boolean>;\n  \n  // Cart management\n  getCartItems(userId: string): Promise<CartItem[]>;\n  addToCart(item: InsertCartItem): Promise<CartItem>;\n  updateCartItem(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: string): Promise<boolean>;\n  clearCart(userId: string): Promise<boolean>;\n  \n  // Wishlist management\n  getWishlistItems(userId: string): Promise<WishlistItem[]>;\n  addToWishlist(item: InsertWishlistItem): Promise<WishlistItem>;\n  removeFromWishlist(userId: string, productId: string): Promise<boolean>;\n  \n  // Transaction management\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  updateTransaction(orderId: string, updates: Partial<InsertTransaction>): Promise<Transaction | undefined>;\n  createTransactionEvent(event: InsertTransactionEvent): Promise<TransactionEvent>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User management\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return result[0];\n  }\n\n  // Product management\n  async getProducts(filters?: {\n    category?: string;\n    featured?: boolean;\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<Product[]> {\n    // Build the query with proper typing\n    const conditions = [];\n    if (filters?.category) {\n      conditions.push(eq(products.category, filters.category));\n    }\n    if (filters?.featured !== undefined) {\n      conditions.push(eq(products.featured, filters.featured));\n    }\n    \n    let query = db.select().from(products);\n    \n    if (conditions.length > 0) {\n      query = query.where(conditions.length === 1 ? conditions[0] : and(...conditions)) as any;\n    }\n    \n    query = query.orderBy(desc(products.createdAt)) as any;\n    \n    if (filters?.limit) {\n      query = query.limit(filters.limit) as any;\n    }\n    \n    if (filters?.offset) {\n      query = query.offset(filters.offset) as any;\n    }\n    \n    return await query;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const result = await db.select().from(products).where(eq(products.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createProduct(product: InsertProduct): Promise<Product> {\n    const result = await db.insert(products).values(product).returning();\n    return result[0];\n  }\n\n  async updateProduct(id: string, updates: Partial<InsertProduct>): Promise<Product | undefined> {\n    const result = await db.update(products).set(updates).where(eq(products.id, id)).returning();\n    return result[0];\n  }\n\n  // Category management\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).orderBy(categories.name);\n  }\n\n  async getCategory(id: string): Promise<Category | undefined> {\n    const result = await db.select().from(categories).where(eq(categories.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const result = await db.insert(categories).values(category).returning();\n    return result[0];\n  }\n\n  // Order management\n  async getOrders(userId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.userId, userId)).orderBy(desc(orders.createdAt));\n  }\n\n  async getOrder(id: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const result = await db.insert(orders).values(order).returning();\n    return result[0];\n  }\n\n  async updateOrder(id: string, updates: Partial<InsertOrder>): Promise<Order | undefined> {\n    const result = await db.update(orders).set(updates).where(eq(orders.id, id)).returning();\n    return result[0];\n  }\n\n  // Order items\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return await db.select().from(orderItems).where(eq(orderItems.orderId, orderId));\n  }\n\n  async createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const result = await db.insert(orderItems).values(orderItem).returning();\n    return result[0];\n  }\n\n  // Reviews\n  async getReviews(productId: string): Promise<Review[]> {\n    return await db.select().from(reviews).where(eq(reviews.productId, productId)).orderBy(desc(reviews.createdAt));\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const result = await db.insert(reviews).values(review).returning();\n    return result[0];\n  }\n\n  async updateReview(id: string, updates: Partial<InsertReview>): Promise<Review | undefined> {\n    const result = await db.update(reviews).set(updates).where(eq(reviews.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteReview(id: string, userId: string): Promise<boolean> {\n    const result = await db.delete(reviews).where(and(eq(reviews.id, id), eq(reviews.userId, userId))).returning();\n    return result.length > 0;\n  }\n\n  // Cart management\n  async getCartItems(userId: string): Promise<CartItem[]> {\n    return await db.select().from(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  async addToCart(item: InsertCartItem): Promise<CartItem> {\n    // Try to update existing item first\n    const existing = await db.select().from(cartItems)\n      .where(and(eq(cartItems.userId, item.userId!), eq(cartItems.productId, item.productId!)))\n      .limit(1);\n    \n    if (existing.length > 0) {\n      const result = await db.update(cartItems)\n        .set({ quantity: existing[0].quantity + (item.quantity || 1) })\n        .where(eq(cartItems.id, existing[0].id))\n        .returning();\n      return result[0];\n    }\n    \n    const result = await db.insert(cartItems).values(item).returning();\n    return result[0];\n  }\n\n  async updateCartItem(id: string, quantity: number): Promise<CartItem | undefined> {\n    const result = await db.update(cartItems).set({ quantity }).where(eq(cartItems.id, id)).returning();\n    return result[0];\n  }\n\n  async removeFromCart(id: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.id, id)).returning();\n    return result.length > 0;\n  }\n\n  async clearCart(userId: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.userId, userId)).returning();\n    return result.length > 0;\n  }\n\n  // Wishlist management\n  async getWishlistItems(userId: string): Promise<WishlistItem[]> {\n    return await db.select().from(wishlistItems).where(eq(wishlistItems.userId, userId));\n  }\n\n  async addToWishlist(item: InsertWishlistItem): Promise<WishlistItem> {\n    const result = await db.insert(wishlistItems).values(item).returning();\n    return result[0];\n  }\n\n  async removeFromWishlist(userId: string, productId: string): Promise<boolean> {\n    const result = await db.delete(wishlistItems)\n      .where(and(eq(wishlistItems.userId, userId), eq(wishlistItems.productId, productId)))\n      .returning();\n    return result.length > 0;\n  }\n\n  // Transaction management\n  async createTransaction(transaction: InsertTransaction): Promise<Transaction> {\n    const result = await db.insert(transactions).values(transaction).returning();\n    return result[0];\n  }\n\n  async updateTransaction(orderId: string, updates: Partial<InsertTransaction>): Promise<Transaction | undefined> {\n    const result = await db.update(transactions).set(updates).where(eq(transactions.orderId, orderId)).returning();\n    return result[0];\n  }\n\n  async createTransactionEvent(event: InsertTransactionEvent): Promise<TransactionEvent> {\n    const result = await db.insert(transactionEvents).values(event).returning();\n    return result[0];\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10661},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, decimal, timestamp, uuid, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table for authentication\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  fullName: text(\"full_name\"),\n  avatarUrl: text(\"avatar_url\"),\n  phone: text(\"phone\"),\n  address: jsonb(\"address\"),\n  emailVerified: boolean(\"email_verified\").default(false),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Products table\nexport const products = pgTable(\"products\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  category: text(\"category\").notNull(),\n  images: text(\"images\").array().default([]),\n  stock: integer(\"stock\").default(0),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  reviewCount: integer(\"review_count\").default(0),\n  featured: boolean(\"featured\").default(false),\n  tags: text(\"tags\").array().default([]),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories table\nexport const categories = pgTable(\"categories\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: text(\"name\").notNull().unique(),\n  description: text(\"description\"),\n  image: text(\"image\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").default(\"pending\"),\n  shippingAddress: jsonb(\"shipping_address\"),\n  paymentMethod: text(\"payment_method\"),\n  paymentStatus: text(\"payment_status\").default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  orderId: uuid(\"order_id\").references(() => orders.id),\n  productId: uuid(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Reviews table\nexport const reviews = pgTable(\"reviews\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  productId: uuid(\"product_id\").references(() => products.id),\n  userId: uuid(\"user_id\").references(() => users.id),\n  rating: integer(\"rating\").notNull(),\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Cart items table\nexport const cartItems = pgTable(\"cart_items\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id),\n  productId: uuid(\"product_id\").references(() => products.id),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Wishlist items table\nexport const wishlistItems = pgTable(\"wishlist_items\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id),\n  productId: uuid(\"product_id\").references(() => products.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Transactions table for payment tracking\nexport const transactions = pgTable(\"transactions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  orderId: text(\"order_id\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  upiId: text(\"upi_id\"),\n  transactionId: text(\"transaction_id\").notNull(),\n  status: text(\"status\").default(\"pending\"),\n  qrGeneratedAt: timestamp(\"qr_generated_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Transaction events table for tracking payment events\nexport const transactionEvents = pgTable(\"transaction_events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  orderId: text(\"order_id\").notNull(),\n  eventType: text(\"event_type\").notNull(),\n  appName: text(\"app_name\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastLogin: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWishlistItemSchema = createInsertSchema(wishlistItems).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTransactionEventSchema = createInsertSchema(transactionEvents).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type Product = typeof products.$inferSelect;\n\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type Category = typeof categories.$inferSelect;\n\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\n\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Review = typeof reviews.$inferSelect;\n\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\n\nexport type InsertWishlistItem = z.infer<typeof insertWishlistItemSchema>;\nexport type WishlistItem = typeof wishlistItems.$inferSelect;\n\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\nexport type Transaction = typeof transactions.$inferSelect;\n\nexport type InsertTransactionEvent = z.infer<typeof insertTransactionEventSchema>;\nexport type TransactionEvent = typeof transactionEvents.$inferSelect;\n","size_bytes":6828},"client/src/App.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { store } from './store';\nimport Navbar from './components/Layout/Navbar';\nimport Footer from './components/Layout/Footer';\nimport Hero from './components/HomePage/Hero';\nimport FeaturedProducts from './components/HomePage/FeaturedProducts';\nimport SpecialDeals from './components/HomePage/SpecialDeals';\nimport ProductGrid from './components/Products/ProductGrid';\nimport ProductsPage from './components/Products/ProductsPage';\nimport WishlistPage from './components/User/WishlistPage';\nimport AccountPage from './components/User/AccountPage';\nimport OrdersPage from './components/User/OrdersPage';\nimport HistoryPage from './components/User/HistoryPage';\nimport CheckoutForm from './components/Checkout/CheckoutForm';\nimport OneRupeeDeals from './components/Deals/OneRupeeDeals';\nimport MyOrders from './components/Orders/MyOrders';\nimport Testimonials from './components/HomePage/Testimonials';\nimport Newsletter from './components/HomePage/Newsletter';\nimport CartSidebar from './components/Cart/CartSidebar';\nimport WhatsAppChat from './components/UI/WhatsAppChat';\nimport PaymentDiagnosticsPanel from './components/UI/PaymentDiagnosticsPanel';\nimport StreamlinedCheckout from './components/Checkout/StreamlinedCheckout';\n\nfunction App() {\n  const [currentPage, setCurrentPage] = useState('home');\n  const [showCheckout, setShowCheckout] = useState(false);\n  const [showStreamlinedCheckout, setShowStreamlinedCheckout] = useState(false);\n  const [checkoutProduct, setCheckoutProduct] = useState<any>(null);\n\n  useEffect(() => {\n    // Smooth scroll behavior\n    document.documentElement.style.scrollBehavior = 'smooth';\n  }, []);\n\n  const handleNavigate = (page: string) => {\n    setCurrentPage(page);\n    window.scrollTo(0, 0);\n  };\n\n  // Listen for checkout navigation\n  useEffect(() => {\n    const handleCheckoutNavigation = () => {\n      setShowCheckout(true);\n    };\n\n    const handleOrdersNavigation = () => {\n      setCurrentPage('orders');\n    };\n\n    const handleStreamlinedCheckoutNavigation = (event: any) => {\n      setCheckoutProduct(event.detail.product);\n      setShowStreamlinedCheckout(true);\n    };\n    window.addEventListener('navigate-to-checkout', handleCheckoutNavigation);\n    window.addEventListener('navigate-to-orders', handleOrdersNavigation);\n    window.addEventListener('navigate-to-streamlined-checkout', handleStreamlinedCheckoutNavigation);\n\n    return () => {\n      window.removeEventListener('navigate-to-checkout', handleCheckoutNavigation);\n      window.removeEventListener('navigate-to-orders', handleOrdersNavigation);\n      window.removeEventListener('navigate-to-streamlined-checkout', handleStreamlinedCheckoutNavigation);\n    };\n  }, []);\n\n  if (showCheckout) {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"min-h-screen bg-white font-inter\">\n            <CheckoutForm onBack={() => setShowCheckout(false)} />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n\n  if (showStreamlinedCheckout) {\n    return (\n      <Provider store={store}>\n        <Router>\n          <div className=\"min-h-screen bg-white font-inter\">\n            <StreamlinedCheckout \n              product={checkoutProduct}\n              onBack={() => {\n                setShowStreamlinedCheckout(false);\n                setCheckoutProduct(null);\n              }}\n              onComplete={() => {\n                setShowStreamlinedCheckout(false);\n                setCheckoutProduct(null);\n                setCurrentPage('orders');\n              }}\n            />\n          </div>\n        </Router>\n      </Provider>\n    );\n  }\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'products':\n        return <ProductsPage />;\n      case 'wishlist':\n        return <WishlistPage />;\n      case 'account':\n        return <AccountPage />;\n      case 'history':\n        return <HistoryPage />;\n      case 'orders':\n        return <OrdersPage />;\n      case 'my-orders':\n        return <MyOrders />;\n      default:\n        return (\n          <main>\n            <Hero onNavigate={handleNavigate} />\n            <SpecialDeals />\n            <FeaturedProducts onNavigate={handleNavigate} />\n            <ProductGrid />\n            <OneRupeeDeals />\n            <Testimonials />\n            <Newsletter />\n          </main>\n        );\n    }\n  };\n\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"min-h-screen bg-white font-inter\">\n          <Navbar onNavigate={handleNavigate} />\n          {renderPage()}\n          {currentPage === 'home' && <Footer />}\n          <CartSidebar />\n          <WhatsAppChat />\n          <PaymentDiagnosticsPanel />\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;","size_bytes":4882},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    font-family: 'Inter', sans-serif;\n    font-feature-settings: 'cv11', 'ss01';\n    font-variation-settings: 'opsz' 32;\n  }\n}\n\n@layer components {\n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n  \n  .line-clamp-3 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n  }\n\n  /* Responsive utilities */\n  .container-responsive {\n    @apply w-full max-w-7xl mx-auto px-4 sm:px-6 lg:px-8;\n  }\n\n  .grid-responsive {\n    @apply grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6;\n  }\n\n  .text-responsive {\n    @apply text-sm sm:text-base lg:text-lg;\n  }\n\n  .button-responsive {\n    @apply px-4 py-2 sm:px-6 sm:py-3 text-sm sm:text-base;\n  }\n}\n\n/* Smooth scrolling for Safari */\n@supports (-webkit-touch-callout: none) {\n  html {\n    scroll-behavior: smooth;\n  }\n}","size_bytes":1117},"client/src/main.tsx":{"content":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { queryClient } from './lib/queryClient';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </StrictMode>\n);\n","size_bytes":420},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/config/razorpay.ts":{"content":"// Razorpay Configuration\nexport const RAZORPAY_CONFIG = {\n  // Test API Keys - Replace with your actual test keys\n  keyId: 'rzp_test_1DP5mmOlF5G5ag', // Dummy Test Key ID for testing\n  keySecret: 'thisissecretkey', // Dummy Test Key Secret (server-side only)\n  \n  // Test webhook secret\n  webhookSecret: 'whsec_test_webhook_secret_dummy',\n  \n  // API endpoints\n  baseUrl: 'https://api.razorpay.com/v1',\n  \n  // Test mode settings\n  testMode: true,\n  \n  // Currency\n  currency: 'INR',\n  \n  // Company details\n  company: {\n    name: 'Interoo Services',\n    description: 'Premium Furniture & Home Decor - Test Environment',\n    logo: 'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg?auto=compress&cs=tinysrgb&w=100',\n    theme: {\n      color: '#F59E0B'\n    },\n    // Test environment settings\n    testCredentials: {\n      upiId: 'test@razorpay',\n      merchantCode: 'TEST_MERCHANT_001',\n      terminalId: 'TEST_TERMINAL_001'\n    }\n  }\n};\n\n// Razorpay payment methods configuration\nexport const PAYMENT_METHODS = {\n  UPI: {\n    id: 'upi',\n    name: 'UPI Payment',\n    description: 'Pay using UPI apps like PhonePe, GPay, Paytm',\n    icon: 'smartphone',\n    enabled: true,\n    flow: ['upi']\n  },\n  COD: {\n    id: 'cod',\n    name: 'Cash on Delivery',\n    description: 'Pay when you receive your order',\n    icon: 'truck',\n    enabled: true,\n    flow: [] // No Razorpay processing needed\n  }\n};\n\n// Helper function to validate Razorpay configuration\nexport const validateRazorpayConfig = (): boolean => {\n  return !!(RAZORPAY_CONFIG.keyId && RAZORPAY_CONFIG.keySecret);\n};\n\n// Generate Razorpay order options\nexport const generateRazorpayOptions = (\n  amount: number,\n  orderId: string,\n  customerInfo: {\n    name: string;\n    email: string;\n    contact: string;\n  },\n  paymentMethod: 'upi'\n) => {\n  return {\n    key: RAZORPAY_CONFIG.keyId,\n    amount: amount * 100, // Razorpay expects amount in paise\n    currency: RAZORPAY_CONFIG.currency,\n    name: RAZORPAY_CONFIG.company.name,\n    description: RAZORPAY_CONFIG.company.description,\n    image: RAZORPAY_CONFIG.company.logo,\n    order_id: orderId,\n    method: {\n      upi: true\n    },\n    prefill: {\n      name: customerInfo.name,\n      email: customerInfo.email,\n      contact: customerInfo.contact\n    },\n    theme: {\n      color: RAZORPAY_CONFIG.company.theme.color\n    },\n    modal: {\n      ondismiss: () => {\n        console.log('Razorpay payment modal dismissed');\n      }\n    }\n  };\n};","size_bytes":2458},"client/src/data/mockData.ts":{"content":"import { Product } from '../types';\n\nexport const mockProducts: Product[] = [\n  {\n    id: '1',\n    name: 'Modern Minimalist Sofa',\n    description: 'Elegant 3-seater sofa with premium fabric upholstery and solid wood frame.',\n    price: 2000,\n    originalPrice: 2500,\n    category: 'Furniture',\n    images: [\n      'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg?auto=compress&cs=tinysrgb&w=800',\n      'https://images.pexels.com/photos/2029698/pexels-photo-2029698.jpeg?auto=compress&cs=tinysrgb&w=800'\n    ],\n    rating: 4.8,\n    reviewCount: 124,\n    inStock: true,\n    tags: ['modern', 'minimalist', 'sofa'],\n    featured: true,\n  },\n  {\n    id: '2',\n    name: 'Scandinavian Coffee Table',\n    description: 'Handcrafted oak coffee table with clean lines and natural finish.',\n    price: 21999,\n    originalPrice: 25000,\n    category: 'Furniture',\n    images: [\n      'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg?auto=compress&cs=tinysrgb&w=800',\n      'https://images.pexels.com/photos/1571467/pexels-photo-1571467.jpeg?auto=compress&cs=tinysrgb&w=800'\n    ],\n    rating: 4.6,\n    reviewCount: 89,\n    inStock: true,\n    tags: ['scandinavian', 'coffee table', 'oak'],\n    featured: true,\n  },\n  {\n    id: '3',\n    name: 'Industrial Floor Lamp',\n    description: 'Vintage-inspired floor lamp with adjustable head and brass accents.',\n    price: 600,\n    category: 'Lighting',\n    images: [\n      'https://images.pexels.com/photos/1125130/pexels-photo-1125130.jpeg?auto=compress&cs=tinysrgb&w=800',\n      'https://images.pexels.com/photos/1125131/pexels-photo-1125131.jpeg?auto=compress&cs=tinysrgb&w=800'\n    ],\n    rating: 4.4,\n    reviewCount: 67,\n    inStock: true,\n    tags: ['industrial', 'floor lamp', 'vintage'],\n  },\n  {\n    id: '4',\n    name: 'Luxury Velvet Armchair',\n    description: 'Plush velvet armchair with gold-finished legs and deep cushioning.',\n    price: 1000,\n    originalPrice: 1200,\n    category: 'Furniture',\n    images: [\n      'https://images.pexels.com/photos/1099816/pexels-photo-1099816.jpeg?auto=compress&cs=tinysrgb&w=800',\n      'https://images.pexels.com/photos/1099817/pexels-photo-1099817.jpeg?auto=compress&cs=tinysrgb&w=800'\n    ],\n    rating: 4.9,\n    reviewCount: 156,\n    inStock: true,\n    tags: ['luxury', 'velvet', 'armchair'],\n    featured: true,\n  },\n  {\n    id: '5',\n    name: 'Abstract Wall Art Set',\n    description: 'Set of 3 contemporary abstract prints on premium canvas.',\n    price: 650,\n    category: 'Decor',\n    images: [\n      'https://images.pexels.com/photos/1668860/pexels-photo-1668860.jpeg?auto=compress&cs=tinysrgb&w=800',\n      'https://images.pexels.com/photos/1668861/pexels-photo-1668861.jpeg?auto=compress&cs=tinysrgb&w=800'\n    ],\n    rating: 4.3,\n    reviewCount: 43,\n    inStock: true,\n    tags: ['abstract', 'wall art', 'contemporary'],\n  },\n  {\n    id: '6',\n    name: 'Ceramic Table Lamp',\n    description: 'Handmade ceramic table lamp with linen shade and warm LED bulb.',\n    price: 700,\n    category: 'Lighting',\n    images: [\n      'https://images.pexels.com/photos/1571463/pexels-photo-1571463.jpeg?auto=compress&cs=tinysrgb&w=800',\n      'https://images.pexels.com/photos/1571464/pexels-photo-1571464.jpeg?auto=compress&cs=tinysrgb&w=800'\n    ],\n    rating: 4.5,\n    reviewCount: 78,\n    inStock: true,\n    tags: ['ceramic', 'table lamp', 'handmade'],\n  },\n];\n\nexport const testimonials = [\n  {\n    id: '1',\n    name: 'Sarah Johnson',\n    role: 'Interior Designer',\n    content: 'Interoo Services has been my go-to for premium furniture. The quality is exceptional and the delivery is always on time.',\n    rating: 5,\n    avatar: 'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=100',\n  },\n  {\n    id: '2',\n    name: 'Michael Chen',\n    role: 'Homeowner',\n    content: 'Amazing selection and incredible customer service. Our living room transformation exceeded all expectations.',\n    rating: 5,\n    avatar: 'https://images.pexels.com/photos/1043471/pexels-photo-1043471.jpeg?auto=compress&cs=tinysrgb&w=100',\n  },\n  {\n    id: '3',\n    name: 'Emma Rodriguez',\n    role: 'Architect',\n    content: 'Professional quality pieces that perfectly complement modern design aesthetics. Highly recommended!',\n    rating: 5,\n    avatar: 'https://images.pexels.com/photos/1181686/pexels-photo-1181686.jpeg?auto=compress&cs=tinysrgb&w=100',\n  },\n];","size_bytes":4408},"client/src/hooks/useEnhancedAuth.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\nimport { AuthService, AuthUser, SessionManager } from '../lib/auth';\nimport { isSupabaseConfigured } from '../lib/supabase';\nimport { isSupabaseConfigured } from '../lib/supabase';\n\ninterface UseEnhancedAuthReturn {\n  user: AuthUser | null;\n  loading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n  sessionExpiry: Date | null;\n  signIn: (email: string, password: string, rememberMe?: boolean) => Promise<void>;\n  signUp: (email: string, password: string, fullName?: string, phone?: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  updateProfile: (updates: Partial<AuthUser>) => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  refreshSession: () => Promise<void>;\n  clearError: () => void;\n}\n\n/**\n * Enhanced authentication hook with comprehensive session management\n */\nexport const useEnhancedAuth = (): UseEnhancedAuthReturn => {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [sessionExpiry, setSessionExpiry] = useState<Date | null>(null);\n\n  // Initialize authentication state\n  useEffect(() => {\n    let mounted = true;\n\n    const initializeAuth = async () => {\n      if (!isSupabaseConfigured()) {\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Check if session is valid\n        const isValid = await AuthService.isSessionValid();\n        if (!isValid) {\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get current user\n        const currentUser = await AuthService.getCurrentUser();\n        if (mounted) {\n          setUser(currentUser);\n          \n          // Get session expiry\n          const expiry = await SessionManager.getSessionExpiry();\n          setSessionExpiry(expiry);\n        }\n      } catch (err) {\n        console.error('Auth initialization error:', err);\n        if (mounted) {\n          setError('Failed to initialize authentication');\n        }\n      } finally {\n        if (mounted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    initializeAuth();\n\n    // Set up auth state listener\n    const { data: { subscription } } = AuthService.onAuthStateChange(async (authUser) => {\n      if (mounted) {\n        setUser(authUser);\n        setLoading(false);\n        \n        if (authUser) {\n          const expiry = await SessionManager.getSessionExpiry();\n          setSessionExpiry(expiry);\n        } else {\n          setSessionExpiry(null);\n        }\n      }\n    });\n\n    return () => {\n      mounted = false;\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Session expiry monitoring\n  useEffect(() => {\n    if (!sessionExpiry || !user) return;\n\n    const checkExpiry = async () => {\n      const isExpiringSoon = await SessionManager.isSessionExpiringSoon();\n      if (isExpiringSoon) {\n        console.log('Session expiring soon, attempting refresh...');\n        await refreshSession();\n      }\n    };\n\n    // Check every minute\n    const interval = setInterval(checkExpiry, 60000);\n    return () => clearInterval(interval);\n  }, [sessionExpiry, user]);\n\n  /**\n   * Sign in user\n   */\n  const signIn = useCallback(async (email: string, password: string, rememberMe = false) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await AuthService.signIn({ email, password, rememberMe });\n      \n      if (result.error) {\n        setError(result.error.message);\n        return;\n      }\n\n      if (result.user) {\n        setUser(result.user);\n        const expiry = await SessionManager.getSessionExpiry();\n        setSessionExpiry(expiry);\n      }\n    } catch (err) {\n      setError('An unexpected error occurred during sign in');\n      console.error('Sign in error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Sign up user\n   */\n  const signUp = useCallback(async (email: string, password: string, fullName?: string, phone?: string) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await AuthService.signUp({ email, password, fullName, phone });\n      \n      if (result.error) {\n        setError(result.error.message);\n        return;\n      }\n\n      if (result.user) {\n        setUser(result.user);\n        const expiry = await SessionManager.getSessionExpiry();\n        setSessionExpiry(expiry);\n      }\n    } catch (err) {\n      setError('An unexpected error occurred during registration');\n      console.error('Sign up error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Sign out user\n   */\n  const signOut = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await AuthService.signOut();\n      \n      if (result.error) {\n        setError(result.error.message);\n        return;\n      }\n\n      setUser(null);\n      setSessionExpiry(null);\n      SessionManager.clearSession();\n    } catch (err) {\n      setError('An unexpected error occurred during sign out');\n      console.error('Sign out error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Update user profile\n   */\n  const updateProfile = useCallback(async (updates: Partial<AuthUser>) => {\n    if (!user) {\n      setError('No user logged in');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await AuthService.updateProfile(user.id, updates);\n      \n      if (result.error) {\n        setError(result.error.message);\n        return;\n      }\n\n      if (result.user) {\n        setUser(result.user);\n      }\n    } catch (err) {\n      setError('Failed to update profile');\n      console.error('Update profile error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, [user]);\n\n  /**\n   * Reset password\n   */\n  const resetPassword = useCallback(async (email: string) => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const result = await AuthService.resetPassword(email);\n      \n      if (result.error) {\n        setError(result.error.message);\n        return;\n      }\n\n      // Success message will be handled by the calling component\n    } catch (err) {\n      setError('Failed to send reset email');\n      console.error('Reset password error:', err);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  /**\n   * Refresh session\n   */\n  const refreshSession = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      const result = await AuthService.refreshSession();\n      \n      if (result.error) {\n        console.error('Session refresh failed:', result.error);\n        // Don't set error state for silent refresh failures\n        return;\n      }\n\n      // Update session expiry\n      const expiry = await SessionManager.getSessionExpiry();\n      setSessionExpiry(expiry);\n    } catch (err) {\n      console.error('Session refresh error:', err);\n    }\n  }, [user]);\n\n  /**\n   * Clear error state\n   */\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    user,\n    loading,\n    error,\n    isAuthenticated: !!user,\n    sessionExpiry,\n    signIn,\n    signUp,\n    signOut,\n    updateProfile,\n    resetPassword,\n    refreshSession,\n    clearError,\n  };\n};","size_bytes":7279},"client/src/hooks/useSupabase.ts":{"content":"import { useState, useEffect } from 'react';\nimport { User } from '@supabase/supabase-js';\nimport { authService, productService, categoryService, userService, reviewService, cartService, wishlistService } from '../services/supabaseService';\nimport { Product, Category, UserProfile, isSupabaseConfigured } from '../lib/supabase';\nimport { mockProducts } from '../data/mockData';\n\n// Authentication hook\nexport const useAuth = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n\n  useEffect(() => {\n    // If Supabase is not configured, use mock data\n    if (!isSupabaseConfigured()) {\n      setLoading(false);\n      return;\n    }\n\n    // Get initial user\n    authService.getCurrentUser().then(setUser).finally(() => setLoading(false));\n\n    // Listen for auth changes\n    const { data: { subscription } } = authService.onAuthStateChange(async (event, session) => {\n      setUser(session?.user ?? null);\n      \n      if (session?.user) {\n        try {\n          const userProfile = await userService.getProfile(session.user.id);\n          setProfile(userProfile);\n        } catch (error) {\n          console.error('Error fetching user profile:', error);\n        }\n      } else {\n        setProfile(null);\n      }\n      \n      setLoading(false);\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  const signUp = async (email: string, password: string, fullName?: string) => {\n    if (!isSupabaseConfigured()) {\n      throw new Error('Supabase is not configured. Using mock authentication instead.');\n    }\n    \n    setLoading(true);\n    try {\n      const result = await authService.signUp(email, password, fullName);\n      return result;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signIn = async (email: string, password: string) => {\n    if (!isSupabaseConfigured()) {\n      throw new Error('Supabase is not configured. Using mock authentication instead.');\n    }\n    \n    setLoading(true);\n    try {\n      const result = await authService.signIn(email, password);\n      return result;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    if (!isSupabaseConfigured()) {\n      setUser(null);\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      await authService.signOut();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateProfile = async (updates: Partial<UserProfile>) => {\n    if (!user) throw new Error('No user logged in');\n    \n    try {\n      const updatedProfile = await userService.updateProfile(user.id, updates);\n      setProfile(updatedProfile);\n      return updatedProfile;\n    } catch (error) {\n      console.error('Error updating profile:', error);\n      throw error;\n    }\n  };\n\n  return {\n    user,\n    profile,\n    loading,\n    signUp,\n    signIn,\n    signOut,\n    updateProfile,\n    isAuthenticated: !!user\n  };\n};\n\n// Products hook\nexport const useProducts = (filters?: {\n  category?: string;\n  featured?: boolean;\n  search?: string;\n}) => {\n  const [products, setProducts] = useState<Product[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchProducts = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // If Supabase is not configured, use mock data\n      if (!isSupabaseConfigured()) {\n        // Simulate API delay\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        let filteredData = [...mockProducts];\n        \n        // Apply filters to mock data\n        if (filters?.category) {\n          filteredData = filteredData.filter(p => p.category === filters.category);\n        }\n        if (filters?.featured !== undefined) {\n          filteredData = filteredData.filter(p => p.featured === filters.featured);\n        }\n        if (filters?.search) {\n          const searchLower = filters.search.toLowerCase();\n          filteredData = filteredData.filter(p => \n            p.name.toLowerCase().includes(searchLower) ||\n            p.description.toLowerCase().includes(searchLower)\n          );\n        }\n        \n        setProducts(filteredData);\n        return;\n      }\n      \n      const data = await productService.getProducts(filters);\n      setProducts(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch products');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchProducts();\n  }, [filters?.category, filters?.featured, filters?.search]);\n\n  const refetch = () => fetchProducts();\n\n  return { products, loading, error, refetch };\n};\n\n// Single product hook\nexport const useProduct = (id: string) => {\n  const [product, setProduct] = useState<Product | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchProduct = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // If Supabase is not configured, use mock data\n        if (!isSupabaseConfigured()) {\n          const mockProduct = mockProducts.find(p => p.id === id);\n          if (mockProduct) {\n            setProduct(mockProduct);\n          } else {\n            setError('Product not found');\n          }\n          setLoading(false);\n          return;\n        }\n        \n        const data = await productService.getProduct(id);\n        setProduct(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch product');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (id) {\n      fetchProduct();\n    }\n  }, [id]);\n\n  return { product, loading, error };\n};\n\n// Categories hook\nexport const useCategories = () => {\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // If Supabase is not configured, use mock data\n        if (!isSupabaseConfigured()) {\n          const mockCategories = [\n            { id: '1', name: 'Furniture', created_at: new Date().toISOString() },\n            { id: '2', name: 'Lighting', created_at: new Date().toISOString() },\n            { id: '3', name: 'Decor', created_at: new Date().toISOString() },\n          ];\n          setCategories(mockCategories);\n          setLoading(false);\n          return;\n        }\n        \n        const data = await categoryService.getCategories();\n        setCategories(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch categories');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCategories();\n  }, []);\n\n  return { categories, loading, error };\n};\n\n// Reviews hook\nexport const useReviews = (productId: string) => {\n  const [reviews, setReviews] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        if (!isSupabaseConfigured()) {\n          // Mock reviews data\n          const mockReviews = [\n            {\n              id: '1',\n              rating: 5,\n              comment: 'Excellent product! Highly recommended.',\n              created_at: new Date().toISOString(),\n              user_profiles: { full_name: 'John Doe', avatar_url: null }\n            },\n            {\n              id: '2',\n              rating: 4,\n              comment: 'Good quality, fast delivery.',\n              created_at: new Date().toISOString(),\n              user_profiles: { full_name: 'Jane Smith', avatar_url: null }\n            }\n          ];\n          setReviews(mockReviews);\n          setLoading(false);\n          return;\n        }\n        \n        const data = await reviewService.getProductReviews(productId);\n        setReviews(data);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch reviews');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (productId) {\n      fetchReviews();\n    }\n  }, [productId]);\n\n  const addReview = async (rating: number, comment: string) => {\n    if (!isSupabaseConfigured()) {\n      throw new Error('Supabase is not configured');\n    }\n    \n    const user = await authService.getCurrentUser();\n    if (!user) throw new Error('User not authenticated');\n    \n    const review = await reviewService.createReview({\n      product_id: productId,\n      user_id: user.id,\n      rating,\n      comment\n    });\n    \n    // Refresh reviews\n    const updatedReviews = await reviewService.getProductReviews(productId);\n    setReviews(updatedReviews);\n    \n    return review;\n  };\n\n  return { reviews, loading, error, addReview };\n};\n\n// Cart hook\nexport const useCart = () => {\n  const [cartItems, setCartItems] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  const fetchCartItems = async () => {\n    if (!user) {\n      setCartItems([]);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!isSupabaseConfigured()) {\n        setCartItems([]);\n        setLoading(false);\n        return;\n      }\n      \n      const data = await cartService.getCartItems(user.id);\n      setCartItems(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch cart items');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchCartItems();\n  }, [user]);\n\n  const addToCart = async (productId: string, quantity: number = 1) => {\n    if (!user) throw new Error('User not authenticated');\n    if (!isSupabaseConfigured()) throw new Error('Supabase not configured');\n    \n    await cartService.addToCart(user.id, productId, quantity);\n    await fetchCartItems();\n  };\n\n  const updateQuantity = async (cartItemId: string, quantity: number) => {\n    if (!isSupabaseConfigured()) throw new Error('Supabase not configured');\n    \n    await cartService.updateCartItem(cartItemId, quantity);\n    await fetchCartItems();\n  };\n\n  const removeFromCart = async (cartItemId: string) => {\n    if (!isSupabaseConfigured()) throw new Error('Supabase not configured');\n    \n    await cartService.removeFromCart(cartItemId);\n    await fetchCartItems();\n  };\n\n  const clearCart = async () => {\n    if (!user || !isSupabaseConfigured()) return;\n    \n    await cartService.clearCart(user.id);\n    await fetchCartItems();\n  };\n\n  return {\n    cartItems,\n    loading,\n    error,\n    addToCart,\n    updateQuantity,\n    removeFromCart,\n    clearCart,\n    refetch: fetchCartItems\n  };\n};\n\n// Wishlist hook\nexport const useWishlist = () => {\n  const [wishlistItems, setWishlistItems] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { user } = useAuth();\n\n  const fetchWishlistItems = async () => {\n    if (!user) {\n      setWishlistItems([]);\n      setLoading(false);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!isSupabaseConfigured()) {\n        setWishlistItems([]);\n        setLoading(false);\n        return;\n      }\n      \n      const data = await wishlistService.getWishlistItems(user.id);\n      setWishlistItems(data);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch wishlist items');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchWishlistItems();\n  }, [user]);\n\n  const addToWishlist = async (productId: string) => {\n    if (!user) throw new Error('User not authenticated');\n    if (!isSupabaseConfigured()) throw new Error('Supabase not configured');\n    \n    await wishlistService.addToWishlist(user.id, productId);\n    await fetchWishlistItems();\n  };\n\n  const removeFromWishlist = async (productId: string) => {\n    if (!user || !isSupabaseConfigured()) return;\n    \n    await wishlistService.removeFromWishlist(user.id, productId);\n    await fetchWishlistItems();\n  };\n\n  return {\n    wishlistItems,\n    loading,\n    error,\n    addToWishlist,\n    removeFromWishlist,\n    refetch: fetchWishlistItems\n  };\n};","size_bytes":12551},"client/src/lib/auth.ts":{"content":"import { supabase, isSupabaseConfigured } from './supabase';\nimport { User } from '@supabase/supabase-js';\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  full_name?: string;\n  avatar_url?: string;\n  phone?: string;\n  email_verified?: boolean;\n  last_login?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface AuthError {\n  message: string;\n  status?: number;\n  code?: string;\n}\n\nexport interface AuthResponse {\n  user: AuthUser | null;\n  error: AuthError | null;\n}\n\nexport interface SignUpData {\n  email: string;\n  password: string;\n  fullName?: string;\n  phone?: string;\n}\n\nexport interface SignInData {\n  email: string;\n  password: string;\n  rememberMe?: boolean;\n}\n\n/**\n * Enhanced Authentication Service with comprehensive error handling\n */\nexport class AuthService {\n  /**\n   * Sign up a new user\n   */\n  static async signUp(data: SignUpData): Promise<AuthResponse> {\n    if (!isSupabaseConfigured()) {\n      return {\n        user: null,\n        error: { message: 'Supabase is not configured. Please set up your environment variables.' }\n      };\n    }\n\n    try {\n      const { data: authData, error: authError } = await supabase!.auth.signUp({\n        email: data.email,\n        password: data.password,\n        options: {\n          data: {\n            full_name: data.fullName,\n            phone: data.phone,\n          }\n        }\n      });\n\n      if (authError) {\n        return {\n          user: null,\n          error: {\n            message: this.getReadableErrorMessage(authError.message),\n            code: authError.message\n          }\n        };\n      }\n\n      if (!authData.user) {\n        return {\n          user: null,\n          error: { message: 'Registration failed. Please try again.' }\n        };\n      }\n\n      // Get the created profile\n      const profile = await this.getUserProfile(authData.user.id);\n      \n      return {\n        user: profile,\n        error: null\n      };\n    } catch (error) {\n      return {\n        user: null,\n        error: {\n          message: error instanceof Error ? error.message : 'An unexpected error occurred during registration.'\n        }\n      };\n    }\n  }\n\n  /**\n   * Sign in an existing user\n   */\n  static async signIn(data: {\n    email: string;\n    password: string;\n    rememberMe?: boolean;\n  }): Promise<AuthResponse> {\n    if (!isSupabaseConfigured()) {\n      return {\n        user: null,\n        error: { message: 'Supabase is not configured. Please set up your environment variables.' }\n      };\n    }\n\n    try {\n      const { data: authData, error: authError } = await supabase!.auth.signInWithPassword({\n        email: data.email,\n        password: data.password,\n      });\n\n      if (authError) {\n        return {\n          user: null,\n          error: {\n            message: this.getReadableErrorMessage(authError.message),\n            code: authError.message\n          }\n        };\n      }\n\n      if (!authData.user) {\n        return {\n          user: null,\n          error: { message: 'Login failed. Please check your credentials.' }\n        };\n      }\n\n      // Get user profile\n      const profile = await this.getUserProfile(authData.user.id);\n      \n      // Handle \"Remember Me\" functionality\n      if (data.rememberMe) {\n        localStorage.setItem('supabase_remember_me', 'true');\n      } else {\n        localStorage.removeItem('supabase_remember_me');\n      }\n\n      return {\n        user: profile,\n        error: null\n      };\n    } catch (error) {\n      return {\n        user: null,\n        error: {\n          message: error instanceof Error ? error.message : 'An unexpected error occurred during login.'\n        }\n      };\n    }\n  }\n\n  /**\n   * Sign out the current user\n   */\n  static async signOut(): Promise<{ error: AuthError | null }> {\n    if (!isSupabaseConfigured()) {\n      return { error: null };\n    }\n\n    try {\n      const { error } = await supabase!.auth.signOut();\n      \n      // Clear remember me preference\n      localStorage.removeItem('supabase_remember_me');\n      \n      if (error) {\n        return {\n          error: {\n            message: this.getReadableErrorMessage(error.message),\n            code: error.message\n          }\n        };\n      }\n\n      return { error: null };\n    } catch (error) {\n      return {\n        error: {\n          message: error instanceof Error ? error.message : 'An unexpected error occurred during logout.'\n        }\n      };\n    }\n  }\n\n  /**\n   * Get current authenticated user\n   */\n  static async getCurrentUser(): Promise<AuthUser | null> {\n    if (!isSupabaseConfigured()) {\n      return null;\n    }\n\n    try {\n      const { data: { user }, error } = await supabase!.auth.getUser();\n      \n      if (error || !user) {\n        return null;\n      }\n\n      return await this.getUserProfile(user.id);\n    } catch (error) {\n      console.error('Error getting current user:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get user profile from database\n   */\n  static async getUserProfile(userId: string): Promise<AuthUser | null> {\n    if (!isSupabaseConfigured()) {\n      return null;\n    }\n\n    try {\n      const { data, error } = await supabase!\n        .from('profiles')\n        .select('*')\n        .eq('id', userId)\n        .single();\n\n      if (error || !data) {\n        return null;\n      }\n\n      return {\n        id: data.id,\n        email: data.email,\n        full_name: data.full_name,\n        avatar_url: data.avatar_url,\n        phone: data.phone,\n        email_verified: data.email_verified,\n        last_login: data.last_login,\n        created_at: data.created_at,\n        updated_at: data.updated_at,\n      };\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Update user profile\n   */\n  static async updateProfile(userId: string, updates: Partial<AuthUser>): Promise<AuthResponse> {\n    if (!isSupabaseConfigured()) {\n      return {\n        user: null,\n        error: { message: 'Supabase is not configured.' }\n      };\n    }\n\n    try {\n      const { data, error } = await supabase!\n        .from('profiles')\n        .update(updates)\n        .eq('id', userId)\n        .select()\n        .single();\n\n      if (error) {\n        return {\n          user: null,\n          error: {\n            message: this.getReadableErrorMessage(error.message),\n            code: error.code\n          }\n        };\n      }\n\n      return {\n        user: data as AuthUser,\n        error: null\n      };\n    } catch (error) {\n      return {\n        user: null,\n        error: {\n          message: error instanceof Error ? error.message : 'Failed to update profile.'\n        }\n      };\n    }\n  }\n\n  /**\n   * Reset password\n   */\n  static async resetPassword(email: string): Promise<{ error: AuthError | null }> {\n    if (!isSupabaseConfigured()) {\n      return {\n        error: { message: 'Supabase is not configured.' }\n      };\n    }\n\n    try {\n      const { error } = await supabase!.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      });\n\n      if (error) {\n        return {\n          error: {\n            message: this.getReadableErrorMessage(error.message),\n            code: error.message\n          }\n        };\n      }\n\n      return { error: null };\n    } catch (error) {\n      return {\n        error: {\n          message: error instanceof Error ? error.message : 'Failed to send reset email.'\n        }\n      };\n    }\n  }\n\n  /**\n   * Update password\n   */\n  static async updatePassword(newPassword: string): Promise<{ error: AuthError | null }> {\n    if (!isSupabaseConfigured()) {\n      return {\n        error: { message: 'Supabase is not configured.' }\n      };\n    }\n\n    try {\n      const { error } = await supabase!.auth.updateUser({\n        password: newPassword\n      });\n\n      if (error) {\n        return {\n          error: {\n            message: this.getReadableErrorMessage(error.message),\n            code: error.message\n          }\n        };\n      }\n\n      return { error: null };\n    } catch (error) {\n      return {\n        error: {\n          message: error instanceof Error ? error.message : 'Failed to update password.'\n        }\n      };\n    }\n  }\n\n  /**\n   * Listen to authentication state changes\n   */\n  static onAuthStateChange(callback: (user: AuthUser | null) => void) {\n    if (!isSupabaseConfigured()) {\n      return { data: { subscription: { unsubscribe: () => {} } } };\n    }\n\n    return supabase!.auth.onAuthStateChange(async (event, session) => {\n      if (session?.user) {\n        const profile = await this.getUserProfile(session.user.id);\n        callback(profile);\n      } else {\n        callback(null);\n      }\n    });\n  }\n\n  /**\n   * Check if user session is valid\n   */\n  static async isSessionValid(): Promise<boolean> {\n    if (!isSupabaseConfigured()) {\n      return false;\n    }\n\n    try {\n      const { data: { session }, error } = await supabase!.auth.getSession();\n      return !error && !!session;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Refresh the current session\n   */\n  static async refreshSession(): Promise<{ error: AuthError | null }> {\n    if (!isSupabaseConfigured()) {\n      return { error: { message: 'Supabase is not configured.' } };\n    }\n\n    try {\n      const { error } = await supabase!.auth.refreshSession();\n      \n      if (error) {\n        return {\n          error: {\n            message: this.getReadableErrorMessage(error.message),\n            code: error.message\n          }\n        };\n      }\n\n      return { error: null };\n    } catch (error) {\n      return {\n        error: {\n          message: error instanceof Error ? error.message : 'Failed to refresh session.'\n        }\n      };\n    }\n  }\n\n  /**\n   * Convert technical error messages to user-friendly ones\n   */\n  private static getReadableErrorMessage(errorMessage: string): string {\n    const errorMap: Record<string, string> = {\n      'Invalid login credentials': 'Invalid email or password. Please check your credentials and try again.',\n      'Email not confirmed': 'Please check your email and click the confirmation link before signing in.',\n      'User already registered': 'An account with this email already exists. Please sign in instead.',\n      'Password should be at least 6 characters': 'Password must be at least 6 characters long.',\n      'Unable to validate email address: invalid format': 'Please enter a valid email address.',\n      'signup_disabled': 'New registrations are currently disabled. Please contact support.',\n      'email_address_invalid': 'Please enter a valid email address.',\n      'password_too_short': 'Password must be at least 6 characters long.',\n      'weak_password': 'Please choose a stronger password with a mix of letters, numbers, and symbols.',\n      'email_address_not_authorized': 'This email address is not authorized to create an account.',\n      'too_many_requests': 'Too many requests. Please wait a moment before trying again.',\n    };\n\n    // Check for exact matches first\n    if (errorMap[errorMessage]) {\n      return errorMap[errorMessage];\n    }\n\n    // Check for partial matches\n    for (const [key, value] of Object.entries(errorMap)) {\n      if (errorMessage.toLowerCase().includes(key.toLowerCase())) {\n        return value;\n      }\n    }\n\n    // Return original message if no match found\n    return errorMessage;\n  }\n}\n\n/**\n * Authentication validation utilities\n */\nexport class AuthValidation {\n  /**\n   * Validate email format\n   */\n  static isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  /**\n   * Validate password strength\n   */\n  static validatePassword(password: string): {\n    isValid: boolean;\n    errors: string[];\n    strength: 'weak' | 'medium' | 'strong';\n  } {\n    const errors: string[] = [];\n    let strength: 'weak' | 'medium' | 'strong' = 'weak';\n\n    if (password.length < 6) {\n      errors.push('Password must be at least 6 characters long');\n    }\n\n    if (password.length < 8) {\n      errors.push('For better security, use at least 8 characters');\n    }\n\n    if (!/[a-z]/.test(password)) {\n      errors.push('Include at least one lowercase letter');\n    }\n\n    if (!/[A-Z]/.test(password)) {\n      errors.push('Include at least one uppercase letter');\n    }\n\n    if (!/\\d/.test(password)) {\n      errors.push('Include at least one number');\n    }\n\n    if (!/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n      errors.push('Include at least one special character');\n    }\n\n    // Determine strength\n    if (errors.length === 0) {\n      strength = 'strong';\n    } else if (errors.length <= 2) {\n      strength = 'medium';\n    }\n\n    return {\n      isValid: password.length >= 6,\n      errors,\n      strength\n    };\n  }\n\n  /**\n   * Check if password meets minimum requirements\n   */\n  static meetsMinimumRequirements(password: string): boolean {\n    return password.length >= 6;\n  }\n}\n\n/**\n * Session management utilities\n */\nexport class SessionManager {\n  private static readonly SESSION_KEY = 'supabase_session';\n  private static readonly REMEMBER_KEY = 'supabase_remember_me';\n\n  /**\n   * Check if user wants to be remembered\n   */\n  static shouldRememberUser(): boolean {\n    return localStorage.getItem(this.REMEMBER_KEY) === 'true';\n  }\n\n  /**\n   * Set remember me preference\n   */\n  static setRememberMe(remember: boolean): void {\n    if (remember) {\n      localStorage.setItem(this.REMEMBER_KEY, 'true');\n    } else {\n      localStorage.removeItem(this.REMEMBER_KEY);\n    }\n  }\n\n  /**\n   * Clear all session data\n   */\n  static clearSession(): void {\n    localStorage.removeItem(this.SESSION_KEY);\n    localStorage.removeItem(this.REMEMBER_KEY);\n  }\n\n  /**\n   * Get session expiry time\n   */\n  static async getSessionExpiry(): Promise<Date | null> {\n    if (!isSupabaseConfigured()) return null;\n\n    try {\n      const { data: { session } } = await supabase!.auth.getSession();\n      return session?.expires_at ? new Date(session.expires_at * 1000) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Check if session is about to expire (within 5 minutes)\n   */\n  static async isSessionExpiringSoon(): Promise<boolean> {\n    const expiry = await this.getSessionExpiry();\n    if (!expiry) return false;\n\n    const fiveMinutesFromNow = new Date(Date.now() + 5 * 60 * 1000);\n    return expiry < fiveMinutesFromNow;\n  }\n}","size_bytes":14356},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\n// Supabase configuration\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL;\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;\n\n// Check if we have valid Supabase credentials (not placeholders)\nconst hasValidCredentials = supabaseUrl && \n  supabaseAnonKey && \n  supabaseUrl !== 'https://your-project-id.supabase.co' &&\n  supabaseAnonKey !== 'your-anon-key-here';\n\n// Create Supabase client with fallback for development\nexport const supabase = hasValidCredentials \n  ? createClient(supabaseUrl, supabaseAnonKey, {\n      auth: {\n        autoRefreshToken: true,\n        persistSession: true,\n        detectSessionInUrl: true,\n        flowType: 'pkce'\n      }\n    })\n  : null; // Fallback when credentials are not configured\n\n// Helper to check if Supabase is configured\nexport const isSupabaseConfigured = () => hasValidCredentials;\n\n// Generate database types\nexport type Database = {\n  public: {\n    Tables: {\n      products: {\n        Row: Product;\n        Insert: Omit<Product, 'id' | 'created_at' | 'updated_at'>;\n        Update: Partial<Omit<Product, 'id' | 'created_at' | 'updated_at'>>;\n      };\n      categories: {\n        Row: Category;\n        Insert: Omit<Category, 'id' | 'created_at'>;\n        Update: Partial<Omit<Category, 'id' | 'created_at'>>;\n      };\n      user_profiles: {\n        Row: UserProfile;\n        Insert: Omit<UserProfile, 'created_at' | 'updated_at'>;\n        Update: Partial<Omit<UserProfile, 'created_at' | 'updated_at'>>;\n      };\n      orders: {\n        Row: Order;\n        Insert: Omit<Order, 'id' | 'created_at'>;\n        Update: Partial<Omit<Order, 'id' | 'created_at'>>;\n      };\n      order_items: {\n        Row: OrderItem;\n        Insert: Omit<OrderItem, 'id'>;\n        Update: Partial<Omit<OrderItem, 'id'>>;\n      };\n      reviews: {\n        Row: Review;\n        Insert: Omit<Review, 'id' | 'created_at'>;\n        Update: Partial<Omit<Review, 'id' | 'created_at'>>;\n      };\n      cart_items: {\n        Row: CartItem;\n        Insert: Omit<CartItem, 'id' | 'created_at'>;\n        Update: Partial<Omit<CartItem, 'id' | 'created_at'>>;\n      };\n      wishlist_items: {\n        Row: WishlistItem;\n        Insert: Omit<WishlistItem, 'id' | 'created_at'>;\n        Update: Partial<Omit<WishlistItem, 'id' | 'created_at'>>;\n      };\n    };\n  };\n};\n\n// Database types\nexport interface Product {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  original_price?: number;\n  category: string;\n  images: string[];\n  stock: number;\n  rating: number;\n  review_count: number;\n  featured: boolean;\n  tags: string[];\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Category {\n  id: string;\n  name: string;\n  description?: string;\n  image?: string;\n  created_at: string;\n}\n\nexport interface UserProfile {\n  id: string;\n  full_name?: string;\n  avatar_url?: string;\n  phone?: string;\n  address?: any;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Order {\n  id: string;\n  user_id: string;\n  total: number;\n  status: string;\n  shipping_address?: any;\n  payment_method?: string;\n  payment_status: string;\n  created_at: string;\n}\n\nexport interface OrderItem {\n  id: string;\n  order_id: string;\n  product_id: string;\n  quantity: number;\n  price: number;\n  product?: Product;\n}\n\nexport interface Review {\n  id: string;\n  product_id: string;\n  user_id: string;\n  rating: number;\n  comment?: string;\n  created_at: string;\n}\n\nexport interface CartItem {\n  id: string;\n  user_id: string;\n  product_id: string;\n  quantity: number;\n  created_at: string;\n}\n\nexport interface WishlistItem {\n  id: string;\n  user_id: string;\n  product_id: string;\n  created_at: string;\n}","size_bytes":3705},"client/src/services/paymentService.ts":{"content":"import { v4 as uuidv4 } from 'uuid';\n\nexport interface PaymentMethod {\n  id: string;\n  name: string;\n  type: 'upi' | 'card' | 'cod' | 'test';\n  description: string;\n  icon: string;\n  enabled: boolean;\n}\n\nexport interface PaymentRequest {\n  amount: number;\n  currency: string;\n  orderId: string;\n  customerInfo: {\n    name: string;\n    email: string;\n    phone: string;\n  };\n  paymentMethod: PaymentMethod['type'];\n  metadata?: Record<string, any>;\n}\n\nexport interface PaymentResult {\n  success: boolean;\n  transactionId: string;\n  paymentMethod: string;\n  amount: number;\n  timestamp: number;\n  authCode?: string;\n  errorMessage?: string;\n  processingTime: number;\n}\n\n/**\n * Unified Payment Service\n * Handles all payment processing across the application\n */\nexport class PaymentService {\n  private static readonly DUMMY_UPI_ID = 'test@paytm';\n  private static readonly DUMMY_MERCHANT_NAME = 'Interoo Services';\n  private static readonly SUCCESS_RATE = 0.85; // 85% success rate for testing\n\n  /**\n   * Get available payment methods\n   */\n  static getPaymentMethods(): PaymentMethod[] {\n    return [\n      {\n        id: 'upi',\n        name: 'UPI Payment',\n        type: 'upi',\n        description: 'Pay using UPI apps or scan QR code',\n        icon: 'smartphone',\n        enabled: true,\n      },\n      {\n        id: 'card',\n        name: 'Credit/Debit Card',\n        type: 'card',\n        description: 'Pay securely with your card',\n        icon: 'credit-card',\n        enabled: true,\n      },\n      {\n        id: 'cod',\n        name: 'Cash on Delivery',\n        type: 'cod',\n        description: 'Pay when you receive your order',\n        icon: 'truck',\n        enabled: true,\n      },\n      {\n        id: 'test',\n        name: 'Test Payment (Demo)',\n        type: 'test',\n        description: 'Dummy payment for testing purposes',\n        icon: 'test-tube',\n        enabled: process.env.NODE_ENV === 'development',\n      },\n    ];\n  }\n\n  /**\n   * Generate UPI payment link\n   */\n  static generateUPILink(request: PaymentRequest): string {\n    const { amount, orderId, customerInfo } = request;\n    return `upi://pay?pa=${this.DUMMY_UPI_ID}&pn=${encodeURIComponent(this.DUMMY_MERCHANT_NAME)}&tid=${orderId}&tr=${orderId}&tn=Payment%20for%20Order&am=${amount}&cu=INR`;\n  }\n\n  /**\n   * Process UPI payment\n   */\n  static async processUPIPayment(request: PaymentRequest): Promise<PaymentResult> {\n    const startTime = Date.now();\n    \n    // Simulate processing delay\n    await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 2000));\n    \n    const success = Math.random() < this.SUCCESS_RATE;\n    const processingTime = Date.now() - startTime;\n    \n    if (success) {\n      return {\n        success: true,\n        transactionId: `UPI_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`,\n        paymentMethod: 'UPI',\n        amount: request.amount,\n        timestamp: Date.now(),\n        authCode: Math.random().toString(36).substring(2, 8).toUpperCase(),\n        processingTime,\n      };\n    } else {\n      return {\n        success: false,\n        transactionId: `UPI_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`,\n        paymentMethod: 'UPI',\n        amount: request.amount,\n        timestamp: Date.now(),\n        errorMessage: 'Payment failed. Please try again.',\n        processingTime,\n      };\n    }\n  }\n\n  /**\n   * Process card payment\n   */\n  static async processCardPayment(\n    request: PaymentRequest,\n    cardData: {\n      cardNumber: string;\n      expiryDate: string;\n      cvv: string;\n      cardName: string;\n    }\n  ): Promise<PaymentResult> {\n    const startTime = Date.now();\n    \n    // Validate card data\n    if (!this.validateCardNumber(cardData.cardNumber)) {\n      return {\n        success: false,\n        transactionId: `CARD_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`,\n        paymentMethod: 'Credit/Debit Card',\n        amount: request.amount,\n        timestamp: Date.now(),\n        errorMessage: 'Payment failed. Please try again.',\n        processingTime: Date.now() - startTime,\n      };\n    }\n\n    // Simulate processing delay\n    await new Promise(resolve => setTimeout(resolve, 3000 + Math.random() * 2000));\n    \n    const success = Math.random() < this.SUCCESS_RATE;\n    const processingTime = Date.now() - startTime;\n    \n    if (success) {\n      return {\n        success: true,\n        transactionId: `CARD_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`,\n        paymentMethod: 'Credit/Debit Card',\n        amount: request.amount,\n        timestamp: Date.now(),\n        authCode: Math.random().toString(36).substring(2, 8).toUpperCase(),\n        processingTime,\n      };\n    } else {\n      return {\n        success: false,\n        transactionId: `CARD_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`,\n        paymentMethod: 'Credit/Debit Card',\n        amount: request.amount,\n        timestamp: Date.now(),\n        errorMessage: 'Payment failed. Please try again.',\n        processingTime,\n      };\n    }\n  }\n\n  /**\n   * Process cash on delivery\n   */\n  static async processCODPayment(request: PaymentRequest): Promise<PaymentResult> {\n    const startTime = Date.now();\n    \n    // COD always succeeds (no actual payment processing)\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    return {\n      success: true,\n      transactionId: `COD_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`,\n      paymentMethod: 'Cash on Delivery',\n      amount: request.amount,\n      timestamp: Date.now(),\n      processingTime: Date.now() - startTime,\n    };\n  }\n\n  /**\n   * Process test payment\n   */\n  static async processTestPayment(\n    request: PaymentRequest,\n    outcome: 'success' | 'failure' | 'random' = 'random'\n  ): Promise<PaymentResult> {\n    const startTime = Date.now();\n    \n    // Simulate processing delay\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    let success = false;\n    if (outcome === 'success') {\n      success = true;\n    } else if (outcome === 'failure') {\n      success = false;\n    } else {\n      success = Math.random() < this.SUCCESS_RATE;\n    }\n    \n    const processingTime = Date.now() - startTime;\n    \n    if (success) {\n      return {\n        success: true,\n        transactionId: `TEST_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`,\n        paymentMethod: 'Test Payment',\n        amount: request.amount,\n        timestamp: Date.now(),\n        authCode: Math.random().toString(36).substring(2, 8).toUpperCase(),\n        processingTime,\n      };\n    } else {\n      return {\n        success: false,\n        transactionId: `TEST_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`,\n        paymentMethod: 'Test Payment',\n        amount: request.amount,\n        timestamp: Date.now(),\n        errorMessage: 'Payment failed. Please try again.',\n        processingTime,\n      };\n    }\n  }\n\n  /**\n   * Main payment processing method\n   */\n  static async processPayment(\n    request: PaymentRequest,\n    additionalData?: any\n  ): Promise<PaymentResult> {\n    try {\n      switch (request.paymentMethod) {\n        case 'upi':\n          return await this.processUPIPayment(request);\n        case 'card':\n          return await this.processCardPayment(request, additionalData);\n        case 'cod':\n          return await this.processCODPayment(request);\n        case 'test':\n          return await this.processTestPayment(request, additionalData?.outcome);\n        default:\n          throw new Error(`Unsupported payment method: ${request.paymentMethod}`);\n      }\n    } catch (error) {\n      return {\n        success: false,\n        transactionId: `ERR_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`,\n        paymentMethod: request.paymentMethod,\n        amount: request.amount,\n        timestamp: Date.now(),\n        errorMessage: 'Payment failed. Please try again.',\n        processingTime: 0,\n      };\n    }\n  }\n\n  /**\n   * Validate card number using Luhn algorithm\n   */\n  private static validateCardNumber(cardNumber: string): boolean {\n    const cleanNumber = cardNumber.replace(/\\s/g, '');\n    \n    if (!/^\\d+$/.test(cleanNumber)) return false;\n    if (cleanNumber.length < 13 || cleanNumber.length > 19) return false;\n    \n    let sum = 0;\n    let isEven = false;\n    \n    for (let i = cleanNumber.length - 1; i >= 0; i--) {\n      let digit = parseInt(cleanNumber[i]);\n      \n      if (isEven) {\n        digit *= 2;\n        if (digit > 9) {\n          digit -= 9;\n        }\n      }\n      \n      sum += digit;\n      isEven = !isEven;\n    }\n    \n    return sum % 10 === 0;\n  }\n\n  /**\n   * Format currency\n   */\n  static formatCurrency(amount: number, currency: string = 'INR'): string {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: currency,\n    }).format(amount);\n  }\n\n  /**\n   * Generate transaction reference\n   */\n  static generateTransactionReference(): string {\n    return `TXN_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`;\n  }\n}","size_bytes":8988},"client/src/services/razorpayService.ts":{"content":"import { RAZORPAY_CONFIG, generateRazorpayOptions, validateRazorpayConfig } from '../config/razorpay';\n\nexport interface RazorpayOrderRequest {\n  amount: number;\n  currency: string;\n  receipt: string;\n  notes?: Record<string, string>;\n}\n\nexport interface RazorpayOrderResponse {\n  id: string;\n  entity: string;\n  amount: number;\n  amount_paid: number;\n  amount_due: number;\n  currency: string;\n  receipt: string;\n  status: string;\n  attempts: number;\n  notes: Record<string, string>;\n  created_at: number;\n}\n\nexport interface PaymentResult {\n  success: boolean;\n  transactionId: string;\n  razorpayPaymentId?: string;\n  razorpayOrderId?: string;\n  razorpaySignature?: string;\n  paymentMethod: string;\n  amount: number;\n  timestamp: number;\n  errorMessage?: string;\n}\n\nexport interface CustomerInfo {\n  name: string;\n  email: string;\n  contact: string;\n}\n\n/**\n * Razorpay Payment Service\n * Handles all Razorpay payment operations\n */\nexport class RazorpayService {\n  private static isRazorpayLoaded = false;\n\n  /**\n   * Load Razorpay script dynamically\n   */\n  static async loadRazorpayScript(): Promise<boolean> {\n    if (this.isRazorpayLoaded) return true;\n    \n    console.log('Loading Razorpay script...');\n\n    return new Promise((resolve) => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.onload = () => {\n        this.isRazorpayLoaded = true;\n        console.log('Razorpay script loaded successfully');\n        resolve(true);\n      };\n      script.onerror = () => {\n        console.error('Failed to load Razorpay script');\n        resolve(false);\n      };\n      document.body.appendChild(script);\n    });\n  }\n\n  /**\n   * Create Razorpay order (server-side simulation)\n   */\n  static async createOrder(orderRequest: RazorpayOrderRequest): Promise<RazorpayOrderResponse> {\n    // In a real implementation, this would be a server-side API call\n    // For demo purposes, we'll simulate the order creation\n    \n    if (!validateRazorpayConfig()) {\n      throw new Error('Razorpay configuration is invalid');\n    }\n\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock Razorpay order response\n    const mockOrder: RazorpayOrderResponse = {\n      id: `order_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`,\n      entity: 'order',\n      amount: orderRequest.amount * 100, // Convert to paise\n      amount_paid: 0,\n      amount_due: orderRequest.amount * 100,\n      currency: orderRequest.currency,\n      receipt: orderRequest.receipt,\n      status: 'created',\n      attempts: 0,\n      notes: orderRequest.notes || {},\n      created_at: Math.floor(Date.now() / 1000)\n    };\n\n    return mockOrder;\n  }\n\n  /**\n   * Process UPI payment through Razorpay (Streamlined)\n   */\n  static async processUPIPayment(\n    amount: number,\n    customerInfo: CustomerInfo,\n    orderId: string\n  ): Promise<PaymentResult> {\n    console.log('Processing UPI payment:', { amount, customerInfo, orderId });\n    \n    try {\n      // Load Razorpay script\n      const scriptLoaded = await this.loadRazorpayScript();\n      if (!scriptLoaded) {\n        console.error('Razorpay script failed to load');\n        throw new Error('Failed to load Razorpay payment gateway');\n      }\n      \n      console.log('Razorpay script loaded, creating order...');\n\n      // Create Razorpay order\n      const orderRequest: RazorpayOrderRequest = {\n        amount,\n        currency: RAZORPAY_CONFIG.currency,\n        receipt: orderId,\n        notes: {\n          payment_method: 'upi',\n          customer_name: customerInfo.name\n        }\n      };\n\n      const razorpayOrder = await this.createOrder(orderRequest);\n      console.log('Razorpay order created:', razorpayOrder);\n\n      // Generate Razorpay options for UPI only\n      const options = generateRazorpayOptions(amount, razorpayOrder.id, customerInfo, 'upi');\n      console.log('Razorpay options generated:', options);\n\n      return new Promise((resolve, reject) => {\n        console.log('Opening Razorpay payment modal...');\n        \n        const razorpay = new (window as any).Razorpay({\n          ...options,\n          handler: (response: any) => {\n            // Payment successful\n            console.log('Payment successful:', response);\n            resolve({\n              success: true,\n              transactionId: `UPI_${Date.now()}_${Math.random().toString(36).substring(2, 8).toUpperCase()}`,\n              razorpayPaymentId: response.razorpay_payment_id,\n              razorpayOrderId: response.razorpay_order_id,\n              razorpaySignature: response.razorpay_signature,\n              paymentMethod: 'UPI',\n              amount,\n              timestamp: Date.now()\n            });\n          },\n          modal: {\n            ondismiss: () => {\n              // Payment cancelled\n              console.log('Payment modal dismissed by user');\n              resolve({\n                success: false,\n                transactionId: `UPI_CANCELLED_${Date.now()}`,\n                paymentMethod: 'UPI',\n                amount,\n                timestamp: Date.now(),\n                errorMessage: 'Payment cancelled by user'\n              });\n            }\n          }\n        });\n\n        razorpay.open();\n        console.log('Razorpay modal opened');\n      });\n\n    } catch (error) {\n      console.error('UPI payment processing error:', error);\n      return {\n        success: false,\n        transactionId: `UPI_FAILED_${Date.now()}`,\n        paymentMethod: 'UPI',\n        amount,\n        timestamp: Date.now(),\n        errorMessage: error instanceof Error ? error.message : 'UPI payment failed'\n      };\n    }\n  }\n\n  /**\n   * Process Cash on Delivery (no Razorpay processing needed)\n   */\n  static async processCODPayment(\n    amount: number,\n    customerInfo: CustomerInfo,\n    orderId: string\n  ): Promise<PaymentResult> {\n    // Simulate processing delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    return {\n      success: true,\n      transactionId: `COD_${Date.now()}_${Math.random().toString(36).substring(2, 8).toUpperCase()}`,\n      paymentMethod: 'Cash on Delivery',\n      amount,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Get payment status from Razorpay\n   */\n  static async getPaymentStatus(paymentId: string): Promise<any> {\n    // In a real implementation, this would make an API call to Razorpay\n    // For demo purposes, we'll return a mock response\n    \n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    return {\n      id: paymentId,\n      status: 'captured',\n      amount: 100000, // Amount in paise\n      currency: 'INR',\n      method: 'upi',\n      captured: true,\n      created_at: Math.floor(Date.now() / 1000)\n    };\n  }\n}","size_bytes":6768},"client/src/services/supabaseService.ts":{"content":"import { supabase, Product, Category, UserProfile, Order, OrderItem, Review, CartItem, WishlistItem } from '../lib/supabase';\n\n// Helper function to check if operation should proceed\nconst checkSupabaseConnection = () => {\n  if (!supabase) {\n    throw new Error('Supabase is not configured. Please set up your environment variables.');\n  }\n};\n\n// Authentication Services\nexport const authService = {\n  // Sign up with email and password\n  async signUp(email: string, password: string, fullName?: string) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          full_name: fullName,\n        }\n      }\n    });\n    \n    if (error) throw error;\n    return data;\n  },\n\n  // Sign in with email and password\n  async signIn(email: string, password: string) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n    \n    if (error) throw error;\n    return data;\n  },\n\n  // Sign out\n  async signOut() {\n    checkSupabaseConnection();\n    const { error } = await supabase.auth.signOut();\n    if (error) throw error;\n  },\n\n  // Get current user\n  async getCurrentUser() {\n    checkSupabaseConnection();\n    const { data: { user }, error } = await supabase.auth.getUser();\n    if (error) throw error;\n    return user;\n  },\n\n  // Reset password\n  async resetPassword(email: string) {\n    checkSupabaseConnection();\n    const { error } = await supabase.auth.resetPasswordForEmail(email);\n    if (error) throw error;\n  },\n\n  // Listen to auth changes\n  onAuthStateChange(callback: (event: string, session: any) => void) {\n    checkSupabaseConnection();\n    return supabase.auth.onAuthStateChange(callback);\n  }\n};\n\n// Product Services\nexport const productService = {\n  // Get all products\n  async getProducts(filters?: {\n    category?: string;\n    featured?: boolean;\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }) {\n    checkSupabaseConnection();\n    let query = supabase\n      .from('products')\n      .select('*')\n      .order('created_at', { ascending: false });\n\n    if (filters?.category) {\n      query = query.eq('category', filters.category);\n    }\n\n    if (filters?.featured !== undefined) {\n      query = query.eq('featured', filters.featured);\n    }\n\n    if (filters?.search) {\n      query = query.or(`name.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);\n    }\n\n    if (filters?.limit) {\n      query = query.limit(filters.limit);\n    }\n\n    if (filters?.offset) {\n      query = query.range(filters.offset, filters.offset + (filters.limit || 10) - 1);\n    }\n\n    const { data, error } = await query;\n    if (error) throw error;\n    return data as Product[];\n  },\n\n  // Get single product\n  async getProduct(id: string) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('products')\n      .select('*')\n      .eq('id', id)\n      .single();\n\n    if (error) throw error;\n    return data as Product;\n  },\n\n  // Create product (admin only)\n  async createProduct(product: Omit<Product, 'id' | 'created_at' | 'updated_at'>) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('products')\n      .insert([product])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as Product;\n  },\n\n  // Update product (admin only)\n  async updateProduct(id: string, updates: Partial<Product>) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('products')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as Product;\n  },\n\n  // Delete product (admin only)\n  async deleteProduct(id: string) {\n    checkSupabaseConnection();\n    const { error } = await supabase\n      .from('products')\n      .delete()\n      .eq('id', id);\n\n    if (error) throw error;\n  },\n\n  // Update stock\n  async updateStock(id: string, quantity: number) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('products')\n      .update({ stock: quantity })\n      .eq('id', id)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as Product;\n  }\n};\n\n// Category Services\nexport const categoryService = {\n  // Get all categories\n  async getCategories() {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('categories')\n      .select('*')\n      .order('name');\n\n    if (error) throw error;\n    return data as Category[];\n  },\n\n  // Create category\n  async createCategory(category: Omit<Category, 'id' | 'created_at'>) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('categories')\n      .insert([category])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as Category;\n  }\n};\n\n// User Profile Services\nexport const userService = {\n  // Get user profile\n  async getProfile(userId: string) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('user_profiles')\n      .select('*')\n      .eq('id', userId)\n      .single();\n\n    if (error) throw error;\n    return data as UserProfile;\n  },\n\n  // Update user profile\n  async updateProfile(userId: string, updates: Partial<UserProfile>) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('user_profiles')\n      .update(updates)\n      .eq('id', userId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as UserProfile;\n  },\n\n  // Create user profile\n  async createProfile(profile: Omit<UserProfile, 'created_at' | 'updated_at'>) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('user_profiles')\n      .insert([profile])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as UserProfile;\n  }\n};\n\n// Order Services\nexport const orderService = {\n  // Create order\n  async createOrder(order: Omit<Order, 'id' | 'created_at'>, items: Omit<OrderItem, 'id' | 'order_id'>[]) {\n    // Start transaction\n    const { data: orderData, error: orderError } = await supabase\n      .from('orders')\n      .insert([order])\n      .select()\n      .single();\n\n    if (orderError) throw orderError;\n\n    // Add order items\n    const orderItems = items.map(item => ({\n      ...item,\n      order_id: orderData.id\n    }));\n\n    const { data: itemsData, error: itemsError } = await supabase\n      .from('order_items')\n      .insert(orderItems)\n      .select();\n\n    if (itemsError) throw itemsError;\n\n    return { order: orderData as Order, items: itemsData as OrderItem[] };\n  },\n\n  // Get user orders\n  async getUserOrders(userId: string) {\n    const { data, error } = await supabase\n      .from('orders')\n      .select(`\n        *,\n        order_items (\n          *,\n          product:products (*)\n        )\n      `)\n      .eq('user_id', userId)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Get single order\n  async getOrder(orderId: string) {\n    const { data, error } = await supabase\n      .from('orders')\n      .select(`\n        *,\n        order_items (\n          *,\n          product:products (*)\n        )\n      `)\n      .eq('id', orderId)\n      .single();\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Update order status\n  async updateOrderStatus(orderId: string, status: string) {\n    const { data, error } = await supabase\n      .from('orders')\n      .update({ status })\n      .eq('id', orderId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as Order;\n  }\n};\n\n// Review Services\nexport const reviewService = {\n  // Get reviews for a product\n  async getProductReviews(productId: string) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('reviews')\n      .select(`\n        *,\n        user_profiles (\n          full_name,\n          avatar_url\n        )\n      `)\n      .eq('product_id', productId)\n      .order('created_at', { ascending: false });\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Create review\n  async createReview(review: Omit<Review, 'id' | 'created_at'>) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('reviews')\n      .insert([review])\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as Review;\n  },\n\n  // Update review\n  async updateReview(reviewId: string, updates: Partial<Review>) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('reviews')\n      .update(updates)\n      .eq('id', reviewId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as Review;\n  },\n\n  // Delete review\n  async deleteReview(reviewId: string) {\n    checkSupabaseConnection();\n    const { error } = await supabase\n      .from('reviews')\n      .delete()\n      .eq('id', reviewId);\n\n    if (error) throw error;\n  }\n};\n\n// Cart Services\nexport const cartService = {\n  // Get user's cart items\n  async getCartItems(userId: string) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('cart_items')\n      .select(`\n        *,\n        products (*)\n      `)\n      .eq('user_id', userId);\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Add item to cart\n  async addToCart(userId: string, productId: string, quantity: number = 1) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('cart_items')\n      .upsert({\n        user_id: userId,\n        product_id: productId,\n        quantity\n      })\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as CartItem;\n  },\n\n  // Update cart item quantity\n  async updateCartItem(cartItemId: string, quantity: number) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('cart_items')\n      .update({ quantity })\n      .eq('id', cartItemId)\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as CartItem;\n  },\n\n  // Remove item from cart\n  async removeFromCart(cartItemId: string) {\n    checkSupabaseConnection();\n    const { error } = await supabase\n      .from('cart_items')\n      .delete()\n      .eq('id', cartItemId);\n\n    if (error) throw error;\n  },\n\n  // Clear user's cart\n  async clearCart(userId: string) {\n    checkSupabaseConnection();\n    const { error } = await supabase\n      .from('cart_items')\n      .delete()\n      .eq('user_id', userId);\n\n    if (error) throw error;\n  }\n};\n\n// Wishlist Services\nexport const wishlistService = {\n  // Get user's wishlist items\n  async getWishlistItems(userId: string) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('wishlist_items')\n      .select(`\n        *,\n        products (*)\n      `)\n      .eq('user_id', userId);\n\n    if (error) throw error;\n    return data;\n  },\n\n  // Add item to wishlist\n  async addToWishlist(userId: string, productId: string) {\n    checkSupabaseConnection();\n    const { data, error } = await supabase\n      .from('wishlist_items')\n      .insert({\n        user_id: userId,\n        product_id: productId\n      })\n      .select()\n      .single();\n\n    if (error) throw error;\n    return data as WishlistItem;\n  },\n\n  // Remove item from wishlist\n  async removeFromWishlist(userId: string, productId: string) {\n    checkSupabaseConnection();\n    const { error } = await supabase\n      .from('wishlist_items')\n      .delete()\n      .eq('user_id', userId)\n      .eq('product_id', productId);\n\n    if (error) throw error;\n  }\n};","size_bytes":11651},"client/src/store/index.ts":{"content":"import { configureStore } from '@reduxjs/toolkit';\nimport authSlice from './slices/authSlice';\nimport cartSlice from './slices/cartSlice';\nimport productSlice from './slices/productSlice';\nimport wishlistSlice from './slices/wishlistSlice';\nimport historySlice from './slices/historySlice';\nimport orderSlice from './slices/orderSlice';\n\nexport const store = configureStore({\n  reducer: {\n    auth: authSlice,\n    cart: cartSlice,\n    products: productSlice,\n    wishlist: wishlistSlice,\n    history: historySlice,\n    orders: orderSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;","size_bytes":656},"client/src/types/index.ts":{"content":"// Re-export types from shared schema for frontend use\nexport type {\n  User,\n  Product,\n  Category,\n  Order,\n  CartItem,\n  WishlistItem,\n  Review,\n  Transaction,\n  TransactionEvent,\n  InsertUser,\n  InsertProduct,\n  InsertCategory,\n  InsertOrder,\n  InsertCartItem,\n  InsertWishlistItem,\n  InsertReview,\n  InsertTransaction,\n  InsertTransactionEvent,\n} from '@shared/schema';\n\n// Additional frontend-specific types\nexport interface AuthState {\n  user: User | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport interface CartState {\n  items: CartItem[];\n  total: number;\n  isOpen: boolean;\n}\n\nexport interface ProductState {\n  searchQuery: string;\n  selectedCategory: string | null;\n  sortBy: string;\n}","size_bytes":710},"client/src/utils/authHelpers.ts":{"content":"import { AuthUser } from '../lib/auth';\n\n/**\n * Authentication utility functions\n */\n\n/**\n * Check if user has specific role or permission\n */\nexport const hasRole = (user: AuthUser | null, role: string): boolean => {\n  if (!user) return false;\n  // This would typically check user.roles or user.permissions\n  // For now, we'll use a simple check\n  return user.email?.includes('admin') || false;\n};\n\n/**\n * Check if user can access admin features\n */\nexport const isAdmin = (user: AuthUser | null): boolean => {\n  return hasRole(user, 'admin');\n};\n\n/**\n * Get user display name\n */\nexport const getUserDisplayName = (user: AuthUser | null): string => {\n  if (!user) return 'Guest';\n  return user.full_name || user.email?.split('@')[0] || 'User';\n};\n\n/**\n * Get user initials for avatar\n */\nexport const getUserInitials = (user: AuthUser | null): string => {\n  if (!user) return 'G';\n  \n  if (user.full_name) {\n    return user.full_name\n      .split(' ')\n      .map(name => name[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  }\n  \n  return user.email?.[0]?.toUpperCase() || 'U';\n};\n\n/**\n * Format last login time\n */\nexport const formatLastLogin = (lastLogin: string | null): string => {\n  if (!lastLogin) return 'Never';\n  \n  const date = new Date(lastLogin);\n  const now = new Date();\n  const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n  \n  if (diffInHours < 1) {\n    return 'Just now';\n  } else if (diffInHours < 24) {\n    return `${Math.floor(diffInHours)} hours ago`;\n  } else if (diffInHours < 168) { // 7 days\n    return `${Math.floor(diffInHours / 24)} days ago`;\n  } else {\n    return date.toLocaleDateString();\n  }\n};\n\n/**\n * Check if account is recently created (within last 7 days)\n */\nexport const isNewAccount = (user: AuthUser | null): boolean => {\n  if (!user) return false;\n  \n  const createdAt = new Date(user.created_at);\n  const sevenDaysAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n  \n  return createdAt > sevenDaysAgo;\n};\n\n/**\n * Generate secure avatar URL\n */\nexport const getSecureAvatarUrl = (user: AuthUser | null): string => {\n  if (!user) return '';\n  \n  if (user.avatar_url) {\n    return user.avatar_url;\n  }\n  \n  // Generate Gravatar URL as fallback\n  const email = user.email?.toLowerCase().trim() || '';\n  const hash = btoa(email); // Simple hash for demo - use proper hash in production\n  return `https://www.gravatar.com/avatar/${hash}?d=identicon&s=200`;\n};\n\n/**\n * Validate session expiry\n */\nexport const isSessionExpired = (expiry: Date | null): boolean => {\n  if (!expiry) return true;\n  return new Date() > expiry;\n};\n\n/**\n * Calculate session time remaining\n */\nexport const getSessionTimeRemaining = (expiry: Date | null): number => {\n  if (!expiry) return 0;\n  const remaining = expiry.getTime() - Date.now();\n  return Math.max(0, remaining);\n};\n\n/**\n * Format session time remaining\n */\nexport const formatSessionTimeRemaining = (expiry: Date | null): string => {\n  const remaining = getSessionTimeRemaining(expiry);\n  \n  if (remaining === 0) return 'Expired';\n  \n  const hours = Math.floor(remaining / (1000 * 60 * 60));\n  const minutes = Math.floor((remaining % (1000 * 60 * 60)) / (1000 * 60));\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  } else {\n    return `${minutes}m`;\n  }\n};\n\n/**\n * Authentication route guards\n */\nexport const authGuards = {\n  /**\n   * Require authentication\n   */\n  requireAuth: (user: AuthUser | null): boolean => {\n    return !!user;\n  },\n\n  /**\n   * Require email verification\n   */\n  requireEmailVerification: (user: AuthUser | null): boolean => {\n    return !!user?.email_verified;\n  },\n\n  /**\n   * Require admin role\n   */\n  requireAdmin: (user: AuthUser | null): boolean => {\n    return isAdmin(user);\n  },\n\n  /**\n   * Require complete profile\n   */\n  requireCompleteProfile: (user: AuthUser | null): boolean => {\n    return !!(user?.full_name && user?.phone);\n  },\n};\n\n/**\n * Authentication error messages\n */\nexport const authErrorMessages = {\n  INVALID_CREDENTIALS: 'Invalid email or password. Please check your credentials.',\n  EMAIL_NOT_CONFIRMED: 'Please check your email and confirm your account.',\n  USER_NOT_FOUND: 'No account found with this email address.',\n  EMAIL_ALREADY_EXISTS: 'An account with this email already exists.',\n  WEAK_PASSWORD: 'Password is too weak. Please choose a stronger password.',\n  NETWORK_ERROR: 'Network error. Please check your connection and try again.',\n  SESSION_EXPIRED: 'Your session has expired. Please sign in again.',\n  UNAUTHORIZED: 'You are not authorized to access this resource.',\n  EMAIL_VERIFICATION_REQUIRED: 'Email verification is required to access this feature.',\n};\n\n/**\n * Local storage keys for auth data\n */\nexport const authStorageKeys = {\n  REMEMBER_ME: 'supabase_remember_me',\n  REMEMBERED_EMAIL: 'supabase_remembered_email',\n  SESSION_DATA: 'supabase_session',\n  USER_PREFERENCES: 'user_preferences',\n} as const;","size_bytes":4920},"client/src/utils/mockAuth.ts":{"content":"// Mock authentication storage and validation\ninterface StoredUser {\n  id: string;\n  email: string;\n  password: string; // In real app, this would be hashed\n  fullName: string;\n  mobileNumber?: string;\n  avatar?: string;\n  createdAt: string;\n}\n\nconst USERS_STORAGE_KEY = 'interoo_users';\nconst CURRENT_USER_KEY = 'interoo_current_user';\n\nexport class MockAuthService {\n  // Get all stored users\n  private static getStoredUsers(): StoredUser[] {\n    try {\n      const users = localStorage.getItem(USERS_STORAGE_KEY);\n      return users ? JSON.parse(users) : [];\n    } catch {\n      return [];\n    }\n  }\n\n  // Save users to storage\n  private static saveUsers(users: StoredUser[]): void {\n    try {\n      localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(users));\n    } catch (error) {\n      console.error('Failed to save users:', error);\n    }\n  }\n\n  // Register a new user\n  static async register(email: string, password: string, fullName: string, mobileNumber?: string): Promise<StoredUser> {\n    const users = this.getStoredUsers();\n    \n    // Check if user already exists\n    const existingUser = users.find(user => user.email.toLowerCase() === email.toLowerCase());\n    if (existingUser) {\n      throw new Error('User with this email already exists');\n    }\n\n    // Create new user\n    const newUser: StoredUser = {\n      id: `user_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`,\n      email: email.toLowerCase(),\n      password, // In real app, this would be hashed\n      fullName,\n      mobileNumber,\n      avatar: 'https://images.pexels.com/photos/1043471/pexels-photo-1043471.jpeg?auto=compress&cs=tinysrgb&w=100',\n      createdAt: new Date().toISOString(),\n    };\n\n    // Save user\n    users.push(newUser);\n    this.saveUsers(users);\n\n    // Auto-login after registration\n    this.setCurrentUser(newUser);\n\n    return newUser;\n  }\n\n  // Login user\n  static async login(email: string, password: string): Promise<StoredUser> {\n    const users = this.getStoredUsers();\n    \n    // Find user by email\n    const user = users.find(user => \n      user.email.toLowerCase() === email.toLowerCase() && \n      user.password === password\n    );\n\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n\n    // Set as current user\n    this.setCurrentUser(user);\n\n    return user;\n  }\n\n  // Sign in (alias for login)\n  static async signIn(email: string, password: string): Promise<any> {\n    const user = await this.login(email, password);\n    return {\n      id: user.id,\n      email: user.email,\n      fullName: user.fullName,\n      phone: user.mobileNumber,\n      avatarUrl: user.avatar,\n      emailVerified: true,\n      lastLogin: new Date().toISOString(),\n      createdAt: new Date(user.createdAt).toISOString(),\n      updatedAt: new Date().toISOString(),\n      password: user.password,\n      address: null\n    };\n  }\n\n  // Sign up\n  static async signUp(userData: { email: string; password: string; fullName: string; phone?: string }): Promise<any> {\n    const user = await this.register(userData.email, userData.password, userData.fullName, userData.phone);\n    return {\n      id: user.id,\n      email: user.email,\n      fullName: user.fullName,\n      phone: userData.phone,\n      avatarUrl: user.avatar,\n      emailVerified: true,\n      lastLogin: new Date().toISOString(),\n      createdAt: new Date(user.createdAt).toISOString(),\n      updatedAt: new Date().toISOString(),\n      password: user.password,\n      address: null\n    };\n  }\n\n  // Update user profile\n  static async updateProfile(userId: string, updateData: Partial<{\n    fullName: string;\n    phone: string;\n    address: any;\n  }>): Promise<any> {\n    const users = this.getStoredUsers();\n    const userIndex = users.findIndex(user => user.id === userId);\n    \n    if (userIndex === -1) {\n      throw new Error('User not found');\n    }\n\n    // Update the stored user\n    if (updateData.fullName) users[userIndex].fullName = updateData.fullName;\n    if (updateData.phone) users[userIndex].mobileNumber = updateData.phone;\n    \n    this.saveUsers(users);\n\n    // Update current user session\n    const currentUser = this.getCurrentUser();\n    if (currentUser && currentUser.id === userId) {\n      const updatedUser = {\n        ...currentUser,\n        name: updateData.fullName || currentUser.name,\n        mobileNumber: updateData.phone || currentUser.mobileNumber,\n      };\n      localStorage.setItem(CURRENT_USER_KEY, JSON.stringify(updatedUser));\n    }\n\n    // Return updated user in the expected format\n    const updatedUser = users[userIndex];\n    return {\n      id: updatedUser.id,\n      email: updatedUser.email,\n      fullName: updatedUser.fullName,\n      phone: updatedUser.mobileNumber,\n      avatarUrl: updatedUser.avatar,\n      emailVerified: true,\n      lastLogin: new Date().toISOString(),\n      createdAt: new Date(updatedUser.createdAt).toISOString(),\n      updatedAt: new Date().toISOString(),\n      password: updatedUser.password,\n      address: updateData.address || null\n    };\n  }\n\n  // Set current user\n  private static setCurrentUser(user: StoredUser): void {\n    try {\n      const userForStorage = {\n        id: user.id,\n        email: user.email,\n        name: user.fullName,\n        avatar: user.avatar,\n        mobileNumber: user.mobileNumber,\n      };\n      localStorage.setItem(CURRENT_USER_KEY, JSON.stringify(userForStorage));\n    } catch (error) {\n      console.error('Failed to save current user:', error);\n    }\n  }\n\n  // Get current user\n  static getCurrentUser(): any | null {\n    try {\n      const user = localStorage.getItem(CURRENT_USER_KEY);\n      return user ? JSON.parse(user) : null;\n    } catch {\n      return null;\n    }\n  }\n\n  // Logout user\n  static logout(): void {\n    try {\n      localStorage.removeItem(CURRENT_USER_KEY);\n    } catch (error) {\n      console.error('Failed to logout:', error);\n    }\n  }\n\n  // Check if user exists\n  static userExists(email: string): boolean {\n    const users = this.getStoredUsers();\n    return users.some(user => user.email.toLowerCase() === email.toLowerCase());\n  }\n}","size_bytes":6052},"client/src/utils/paymentDiagnostics.ts":{"content":"/**\n * Payment System Diagnostics Utility\n * Provides comprehensive debugging and monitoring for payment issues\n */\n\nexport interface PaymentDiagnostic {\n  timestamp: number;\n  type: 'error' | 'warning' | 'info';\n  category: 'validation' | 'network' | 'ui' | 'security' | 'processing';\n  message: string;\n  details?: any;\n  userAgent?: string;\n  url?: string;\n}\n\nexport class PaymentDiagnostics {\n  private static logs: PaymentDiagnostic[] = [];\n  private static maxLogs = 100;\n\n  /**\n   * Log diagnostic information\n   */\n  static log(diagnostic: Omit<PaymentDiagnostic, 'timestamp' | 'userAgent' | 'url'>) {\n    const entry: PaymentDiagnostic = {\n      ...diagnostic,\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    };\n\n    this.logs.unshift(entry);\n    if (this.logs.length > this.maxLogs) {\n      this.logs = this.logs.slice(0, this.maxLogs);\n    }\n\n    // Console logging for development\n    if (process.env.NODE_ENV === 'development') {\n      console.group(`🔍 Payment Diagnostic - ${diagnostic.category}`);\n      console.log('Type:', diagnostic.type);\n      console.log('Message:', diagnostic.message);\n      if (diagnostic.details) {\n        console.log('Details:', diagnostic.details);\n      }\n      console.groupEnd();\n    }\n  }\n\n  /**\n   * Get diagnostic logs\n   */\n  static getLogs(category?: string): PaymentDiagnostic[] {\n    if (category) {\n      return this.logs.filter(log => log.category === category);\n    }\n    return [...this.logs];\n  }\n\n  /**\n   * Clear diagnostic logs\n   */\n  static clearLogs() {\n    this.logs = [];\n  }\n\n  /**\n   * Check system health\n   */\n  static async checkSystemHealth(): Promise<{\n    network: boolean;\n    localStorage: boolean;\n    javascript: boolean;\n    cookies: boolean;\n    ssl: boolean;\n  }> {\n    const health = {\n      network: false,\n      localStorage: false,\n      javascript: true, // If this runs, JS is working\n      cookies: false,\n      ssl: window.location.protocol === 'https:',\n    };\n\n    // Test network connectivity\n    try {\n      await fetch('/api/health', { method: 'HEAD' });\n      health.network = true;\n    } catch (error) {\n      this.log({\n        type: 'error',\n        category: 'network',\n        message: 'Network connectivity test failed',\n        details: error,\n      });\n    }\n\n    // Test localStorage\n    try {\n      localStorage.setItem('test', 'test');\n      localStorage.removeItem('test');\n      health.localStorage = true;\n    } catch (error) {\n      this.log({\n        type: 'error',\n        category: 'ui',\n        message: 'localStorage not available',\n        details: error,\n      });\n    }\n\n    // Test cookies\n    try {\n      document.cookie = 'test=test; path=/';\n      health.cookies = document.cookie.includes('test=test');\n      // Clean up\n      document.cookie = 'test=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/';\n    } catch (error) {\n      this.log({\n        type: 'error',\n        category: 'security',\n        message: 'Cookies not available',\n        details: error,\n      });\n    }\n\n    return health;\n  }\n\n  /**\n   * Validate payment form data\n   */\n  static validatePaymentData(data: any): { isValid: boolean; errors: string[] } {\n    const errors: string[] = [];\n\n    // Card number validation\n    if (!data.cardNumber || !this.validateCardNumber(data.cardNumber)) {\n      errors.push('Invalid card number');\n    }\n\n    // Expiry date validation\n    if (!data.expiryDate || !this.validateExpiryDate(data.expiryDate)) {\n      errors.push('Invalid or expired card');\n    }\n\n    // CVV validation\n    if (!data.cvv || !this.validateCVV(data.cvv)) {\n      errors.push('Invalid CVV');\n    }\n\n    // Name validation\n    if (!data.cardName || data.cardName.trim().length < 2) {\n      errors.push('Cardholder name required');\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  }\n\n  /**\n   * Luhn algorithm for card validation\n   */\n  private static validateCardNumber(cardNumber: string): boolean {\n    const cleanNumber = cardNumber.replace(/\\s/g, '');\n    \n    if (!/^\\d+$/.test(cleanNumber) || cleanNumber.length < 13 || cleanNumber.length > 19) {\n      return false;\n    }\n\n    let sum = 0;\n    let isEven = false;\n\n    for (let i = cleanNumber.length - 1; i >= 0; i--) {\n      let digit = parseInt(cleanNumber[i]);\n\n      if (isEven) {\n        digit *= 2;\n        if (digit > 9) {\n          digit -= 9;\n        }\n      }\n\n      sum += digit;\n      isEven = !isEven;\n    }\n\n    return sum % 10 === 0;\n  }\n\n  /**\n   * Validate expiry date\n   */\n  private static validateExpiryDate(expiryDate: string): boolean {\n    const match = expiryDate.match(/^(0[1-9]|1[0-2])\\/\\d{2}$/);\n    if (!match) return false;\n\n    const [month, year] = expiryDate.split('/');\n    const expiry = new Date(2000 + parseInt(year), parseInt(month) - 1);\n    return expiry > new Date();\n  }\n\n  /**\n   * Validate CVV\n   */\n  private static validateCVV(cvv: string): boolean {\n    return /^\\d{3,4}$/.test(cvv);\n  }\n\n  /**\n   * Monitor payment processing performance\n   */\n  static startPerformanceMonitoring(transactionId: string) {\n    const startTime = performance.now();\n    \n    return {\n      end: (success: boolean, error?: any) => {\n        const endTime = performance.now();\n        const duration = endTime - startTime;\n\n        this.log({\n          type: success ? 'info' : 'error',\n          category: 'processing',\n          message: `Payment processing ${success ? 'completed' : 'failed'} in ${duration.toFixed(2)}ms`,\n          details: {\n            transactionId,\n            duration,\n            success,\n            error,\n          },\n        });\n      },\n    };\n  }\n}\n\n/**\n * Payment Error Handler\n */\nexport class PaymentErrorHandler {\n  static handleError(error: any, context: string): string {\n    let userMessage = 'An unexpected error occurred. Please try again.';\n\n    // Network errors\n    if (error.name === 'NetworkError' || error.code === 'NETWORK_ERROR') {\n      userMessage = 'Network connection error. Please check your internet connection and try again.';\n      PaymentDiagnostics.log({\n        type: 'error',\n        category: 'network',\n        message: 'Network error during payment processing',\n        details: { context, error: error.message },\n      });\n    }\n\n    // Timeout errors\n    else if (error.name === 'TimeoutError' || error.code === 'TIMEOUT') {\n      userMessage = 'Request timed out. Please try again.';\n      PaymentDiagnostics.log({\n        type: 'error',\n        category: 'network',\n        message: 'Timeout error during payment processing',\n        details: { context, error: error.message },\n      });\n    }\n\n    // Validation errors\n    else if (error.name === 'ValidationError') {\n      userMessage = error.message || 'Please check your payment information and try again.';\n      PaymentDiagnostics.log({\n        type: 'error',\n        category: 'validation',\n        message: 'Validation error',\n        details: { context, error: error.message },\n      });\n    }\n\n    // Security errors\n    else if (error.name === 'SecurityError') {\n      userMessage = 'Security error. Please refresh the page and try again.';\n      PaymentDiagnostics.log({\n        type: 'error',\n        category: 'security',\n        message: 'Security error during payment processing',\n        details: { context, error: error.message },\n      });\n    }\n\n    // API errors\n    else if (error.response) {\n      const status = error.response.status;\n      if (status === 400) {\n        userMessage = 'Invalid payment information. Please check your details.';\n      } else if (status === 401) {\n        userMessage = 'Authentication failed. Please refresh and try again.';\n      } else if (status === 429) {\n        userMessage = 'Too many requests. Please wait a moment and try again.';\n      } else if (status >= 500) {\n        userMessage = 'Server error. Please try again later.';\n      }\n\n      PaymentDiagnostics.log({\n        type: 'error',\n        category: 'network',\n        message: `API error: ${status}`,\n        details: { context, status, error: error.response.data },\n      });\n    }\n\n    return userMessage;\n  }\n}\n\n/**\n * Payment Retry Logic\n */\nexport class PaymentRetryHandler {\n  private static readonly MAX_RETRIES = 3;\n  private static readonly RETRY_DELAYS = [1000, 2000, 4000]; // Exponential backoff\n\n  static async withRetry<T>(\n    operation: () => Promise<T>,\n    context: string,\n    maxRetries: number = this.MAX_RETRIES\n  ): Promise<T> {\n    let lastError: any;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        if (attempt > 0) {\n          PaymentDiagnostics.log({\n            type: 'info',\n            category: 'processing',\n            message: `Retrying payment operation (attempt ${attempt + 1}/${maxRetries + 1})`,\n            details: { context },\n          });\n\n          // Wait before retry\n          await new Promise(resolve => setTimeout(resolve, this.RETRY_DELAYS[attempt - 1] || 4000));\n        }\n\n        return await operation();\n      } catch (error) {\n        lastError = error;\n\n        PaymentDiagnostics.log({\n          type: 'warning',\n          category: 'processing',\n          message: `Payment operation failed (attempt ${attempt + 1}/${maxRetries + 1})`,\n          details: { context, error: error.message },\n        });\n\n        // Don't retry on validation errors\n        if (error.name === 'ValidationError') {\n          break;\n        }\n      }\n    }\n\n    throw lastError;\n  }\n}","size_bytes":9484},"client/src/utils/paymentUtils.ts":{"content":"import { v4 as uuidv4 } from 'uuid';\n\nexport interface PaymentData {\n  transactionId: string;\n  amount: number;\n  currency: string;\n  timestamp: number;\n  merchantId: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n}\n\nexport interface CardProcessingResult {\n  success: boolean;\n  transactionId: string;\n  authCode?: string;\n  errorMessage?: string;\n  processingTime: number;\n}\n\n// Generate random transaction ID\nexport const generateTransactionId = (): string => {\n  return `TXN_${Date.now()}_${uuidv4().substring(0, 8).toUpperCase()}`;\n};\n\n// Generate random auth code for successful transactions\nexport const generateAuthCode = (): string => {\n  return Math.random().toString(36).substring(2, 8).toUpperCase();\n};\n\n// Simulate card processing with random backend data\nexport const processCardPayment = async (\n  cardData: any,\n  amount: number\n): Promise<CardProcessingResult> => {\n  const processingTime = Math.random() * 3000 + 1000; // 1-4 seconds\n  \n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // Simulate 95% success rate\n      const success = Math.random() > 0.05;\n      \n      if (success) {\n        resolve({\n          success: true,\n          transactionId: generateTransactionId(),\n          authCode: generateAuthCode(),\n          processingTime: Math.round(processingTime),\n        });\n      } else {\n        // Random error messages\n        const errors = [\n          'Insufficient funds',\n          'Card declined by issuer',\n          'Invalid card details',\n          'Transaction limit exceeded',\n          'Card expired',\n        ];\n        \n        resolve({\n          success: false,\n          transactionId: generateTransactionId(),\n          errorMessage: errors[Math.floor(Math.random() * errors.length)],\n          processingTime: Math.round(processingTime),\n        });\n      }\n    }, processingTime);\n  });\n};\n\n// Generate payment summary data\nexport const generatePaymentSummary = (amount: number) => {\n  const tax = amount * 0.18; // 18% GST in India\n  const shipping = amount > 5000 ? 0 : 499; // Free shipping over ₹5000\n  const processingFee = amount * 0.029 + 0.30; // Typical payment processing fee\n  \n  return {\n    subtotal: amount,\n    tax: Math.round(tax * 100) / 100,\n    shipping: shipping,\n    processingFee: Math.round(processingFee * 100) / 100,\n    total: Math.round((amount + tax + shipping + processingFee) * 100) / 100,\n  };\n};\n\n// Validate card number using Luhn algorithm\nexport const validateCardNumber = (cardNumber: string): boolean => {\n  const cleanNumber = cardNumber.replace(/\\s/g, '');\n  \n  if (!/^\\d+$/.test(cleanNumber)) return false;\n  if (cleanNumber.length < 13 || cleanNumber.length > 19) return false;\n  \n  let sum = 0;\n  let isEven = false;\n  \n  for (let i = cleanNumber.length - 1; i >= 0; i--) {\n    let digit = parseInt(cleanNumber[i]);\n    \n    if (isEven) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n    \n    sum += digit;\n    isEven = !isEven;\n  }\n  \n  return sum % 10 === 0;\n};\n\n// Format currency\nexport const formatCurrency = (amount: number, currency: string = 'INR'): string => {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: currency,\n  }).format(amount);\n};\n\n// Generate mock bank response\nexport const generateBankResponse = () => {\n  const banks = ['Chase', 'Bank of America', 'Wells Fargo', 'Citibank', 'Capital One'];\n  const responseCode = Math.random() > 0.05 ? '00' : ['51', '54', '61', '65'][Math.floor(Math.random() * 4)];\n  \n  return {\n    bankName: banks[Math.floor(Math.random() * banks.length)],\n    responseCode,\n    responseMessage: responseCode === '00' ? 'Approved' : 'Declined',\n    rrn: Math.random().toString().substring(2, 14), // Reference number\n    timestamp: new Date().toISOString(),\n  };\n};","size_bytes":3806},"client/src/utils/supabaseClient.ts":{"content":"// utils/supabaseClient.ts\nimport { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://carphcktossvastsurbx.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNhcnBoY2t0b3NzdmFzdHN1cmJ4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQwMjIwNjgsImV4cCI6MjA2OTU5ODA2OH0.ZB-EktBkLyXtzaabZq21MAB67fxe_PMCXXHrTb1aZNE';\n\nexport const supabase = createClient(supabaseUrl, supabaseKey);\n","size_bytes":443},"client/src/components/Auth/AuthDemo.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { User, Settings, Shield, LogOut, AlertTriangle, X } from 'lucide-react';\nimport { useAuthContext } from './AuthProvider';\nimport EnhancedLoginForm from './EnhancedLoginForm';\nimport EnhancedRegisterForm from './EnhancedRegisterForm';\nimport ProtectedRoute from './ProtectedRoute';\n\ntype AuthMode = 'login' | 'register';\n\n/**\n * Authentication Demo Component\n * Demonstrates the complete authentication system\n */\nconst AuthDemo: React.FC = () => {\n  const [authMode, setAuthMode] = useState<AuthMode>('login');\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const { user, isAuthenticated, signOut, updateProfile, loading, error } = useAuthContext();\n\n  const handleAuthSuccess = (user: any) => {\n    setShowAuthModal(false);\n    console.log('Authentication successful:', user);\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n    } catch (error) {\n      console.error('Sign out failed:', error);\n    }\n  };\n\n  const handleUpdateProfile = async () => {\n    if (!user) return;\n\n    try {\n      await updateProfile({\n        full_name: 'Updated Name',\n        phone: '+1234567890',\n      });\n      alert('Profile updated successfully!');\n    } catch (error) {\n      console.error('Profile update failed:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-12\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">\n            Supabase Authentication Demo\n          </h1>\n          <p className=\"text-xl text-gray-600\">\n            Complete authentication system with enhanced security features\n          </p>\n        </div>\n\n        {/* Authentication Status */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 mb-8\">\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Authentication Status</h2>\n          \n          {loading ? (\n            <div className=\"flex items-center space-x-2 text-gray-600\">\n              <div className=\"w-4 h-4 border-2 border-gray-300 border-t-yellow-600 rounded-full animate-spin\"></div>\n              <span>Checking authentication...</span>\n            </div>\n          ) : isAuthenticated && user ? (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n                  <User className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Signed in as {user.full_name || user.email}</p>\n                  <p className=\"text-sm text-gray-600\">\n                    Last login: {user.last_login ? new Date(user.last_login).toLocaleString() : 'N/A'}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-gray-900\">Email</h4>\n                  <p className=\"text-sm text-gray-600\">{user.email}</p>\n                  <div className=\"flex items-center space-x-1 mt-1\">\n                    {user.email_verified ? (\n                      <>\n                        <Shield className=\"w-3 h-3 text-green-500\" />\n                        <span className=\"text-xs text-green-600\">Verified</span>\n                      </>\n                    ) : (\n                      <>\n                        <AlertTriangle className=\"w-3 h-3 text-amber-500\" />\n                        <span className=\"text-xs text-amber-600\">Unverified</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-gray-900\">Phone</h4>\n                  <p className=\"text-sm text-gray-600\">{user.phone || 'Not provided'}</p>\n                </div>\n\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-gray-900\">Member Since</h4>\n                  <p className=\"text-sm text-gray-600\">\n                    {new Date(user.created_at).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-4\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={handleUpdateProfile}\n                  className=\"flex items-center space-x-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors\"\n                >\n                  <Settings className=\"w-4 h-4\" />\n                  <span>Update Profile</span>\n                </motion.button>\n\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={handleSignOut}\n                  className=\"flex items-center space-x-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors\"\n                >\n                  <LogOut className=\"w-4 h-4\" />\n                  <span>Sign Out</span>\n                </motion.button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <User className=\"w-8 h-8 text-gray-400\" />\n              </div>\n              <p className=\"text-gray-600 mb-6\">Not authenticated</p>\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={() => setShowAuthModal(true)}\n                className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-3 rounded-xl font-semibold transition-colors\"\n              >\n                Sign In / Register\n              </motion.button>\n            </div>\n          )}\n        </div>\n\n        {/* Protected Content Demo */}\n        <div className=\"bg-white rounded-xl shadow-sm p-6 mb-8\">\n          <h2 className=\"text-2xl font-semibold text-gray-900 mb-4\">Protected Content Demo</h2>\n          \n          <ProtectedRoute\n            fallback={\n              <div className=\"text-center py-8\">\n                <Shield className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                <p className=\"text-gray-600 mb-4\">This content requires authentication</p>\n                <button\n                  onClick={() => setShowAuthModal(true)}\n                  className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-2 rounded-lg transition-colors\"\n                >\n                  Sign In to View\n                </button>\n              </div>\n            }\n          >\n            <div className=\"bg-green-50 rounded-lg p-6\">\n              <h3 className=\"text-lg font-semibold text-green-900 mb-2\">\n                🎉 Protected Content Unlocked!\n              </h3>\n              <p className=\"text-green-800\">\n                This content is only visible to authenticated users. You have successfully \n                accessed a protected route using our Supabase authentication system.\n              </p>\n            </div>\n          </ProtectedRoute>\n        </div>\n\n        {/* Error Display */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 rounded-xl p-4 mb-8\">\n            <div className=\"flex items-center space-x-2\">\n              <AlertTriangle className=\"w-5 h-5 text-red-600\" />\n              <p className=\"text-red-800 font-medium\">{error}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Authentication Modal */}\n        {showAuthModal && (\n          <div className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\">\n            <div className=\"relative\">\n              <button\n                onClick={() => setShowAuthModal(false)}\n                className=\"absolute -top-4 -right-4 bg-white rounded-full p-2 shadow-lg z-10\"\n              >\n                <X className=\"w-5 h-5 text-gray-600\" />\n              </button>\n\n              {authMode === 'login' ? (\n                <EnhancedLoginForm\n                  onSuccess={handleAuthSuccess}\n                  onSwitchToRegister={() => setAuthMode('register')}\n                  onSwitchToForgotPassword={() => {}}\n                />\n              ) : (\n                <EnhancedRegisterForm\n                  onSuccess={handleAuthSuccess}\n                  onSwitchToLogin={() => setAuthMode('login')}\n                />\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AuthDemo;","size_bytes":8931},"client/src/components/Auth/AuthModal.tsx":{"content":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X, User, Mail, Lock, Eye, EyeOff } from 'lucide-react';\nimport { useDispatch } from 'react-redux';\nimport { setUser } from '../../store/slices/authSlice';\nimport { MockAuthService } from '../../utils/mockAuth';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst AuthModal: React.FC<AuthModalProps> = ({ isOpen, onClose }) => {\n  const [isLogin, setIsLogin] = useState(true);\n  const [showPassword, setShowPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n    fullName: '',\n    phone: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const dispatch = useDispatch();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setError('');\n\n    try {\n      let user;\n      if (isLogin) {\n        user = await MockAuthService.signIn(formData.email, formData.password);\n      } else {\n        user = await MockAuthService.signUp({\n          email: formData.email,\n          password: formData.password,\n          fullName: formData.fullName,\n          phone: formData.phone\n        });\n      }\n      \n      dispatch(setUser(user));\n      onClose();\n      setFormData({ email: '', password: '', fullName: '', phone: '' });\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Authentication failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n    setError('');\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\"\n            onClick={onClose}\n          >\n            {/* Modal Content */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9, y: 20 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0.9, y: 20 }}\n              transition={{ duration: 0.3 }}\n              onClick={(e) => e.stopPropagation()}\n              className=\"relative w-full max-w-md bg-white rounded-xl shadow-2xl p-6\"\n            >\n              {/* Close Button */}\n              <motion.button\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                onClick={onClose}\n                className=\"absolute -top-4 -right-4 bg-white rounded-full p-2 shadow-lg z-10\"\n              >\n                <X className=\"w-5 h-5 text-gray-600\" />\n              </motion.button>\n\n              {/* Auth Form */}\n              <div className=\"text-center mb-6\">\n                <User className=\"w-12 h-12 text-yellow-600 mx-auto mb-4\" />\n                <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                  {isLogin ? 'Welcome Back' : 'Create Account'}\n                </h2>\n                <p className=\"text-gray-600\">\n                  {isLogin ? 'Sign in to your account' : 'Join us today'}\n                </p>\n              </div>\n\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                {!isLogin && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Full Name\n                    </label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                      <input\n                        type=\"text\"\n                        name=\"fullName\"\n                        value={formData.fullName}\n                        onChange={handleInputChange}\n                        className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n                        placeholder=\"Enter your full name\"\n                        required={!isLogin}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Email Address\n                  </label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                    <input\n                      type=\"email\"\n                      name=\"email\"\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n                      placeholder=\"Enter your email\"\n                      required\n                    />\n                  </div>\n                </div>\n\n                {!isLogin && (\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Phone Number\n                    </label>\n                    <input\n                      type=\"tel\"\n                      name=\"phone\"\n                      value={formData.phone}\n                      onChange={handleInputChange}\n                      className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n                      placeholder=\"Enter your phone number\"\n                    />\n                  </div>\n                )}\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Password\n                  </label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                    <input\n                      type={showPassword ? \"text\" : \"password\"}\n                      name=\"password\"\n                      value={formData.password}\n                      onChange={handleInputChange}\n                      className=\"w-full pl-12 pr-12 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n                      placeholder=\"Enter your password\"\n                      required\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                    >\n                      {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n                    </button>\n                  </div>\n                </div>\n\n                {error && (\n                  <div className=\"text-red-600 text-sm text-center p-2 bg-red-50 rounded-lg\">\n                    {error}\n                  </div>\n                )}\n\n                <motion.button\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                  type=\"submit\"\n                  disabled={isLoading}\n                  className=\"w-full bg-yellow-600 text-white py-3 rounded-lg font-medium hover:bg-yellow-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isLoading ? 'Please wait...' : (isLogin ? 'Sign In' : 'Create Account')}\n                </motion.button>\n              </form>\n\n              <div className=\"mt-6 text-center\">\n                <p className=\"text-gray-600\">\n                  {isLogin ? \"Don't have an account?\" : \"Already have an account?\"}\n                  {' '}\n                  <button\n                    onClick={() => {\n                      setIsLogin(!isLogin);\n                      setError('');\n                      setFormData({ email: '', password: '', fullName: '', phone: '' });\n                    }}\n                    className=\"text-yellow-600 hover:text-yellow-700 font-medium\"\n                  >\n                    {isLogin ? 'Sign Up' : 'Sign In'}\n                  </button>\n                </p>\n              </div>\n            </motion.div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default AuthModal;","size_bytes":8802},"client/src/components/Auth/AuthProvider.tsx":{"content":"import React, { createContext, useContext, ReactNode } from 'react';\nimport { useEnhancedAuth } from '../../hooks/useEnhancedAuth';\nimport { AuthUser } from '../../lib/auth';\nimport { Lock, Shield } from 'lucide-react';\nimport SessionMonitor from './SessionMonitor';\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  loading: boolean;\n  error: string | null;\n  isAuthenticated: boolean;\n  sessionExpiry: Date | null;\n  signIn: (email: string, password: string, rememberMe?: boolean) => Promise<void>;\n  signUp: (email: string, password: string, fullName?: string, phone?: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  updateProfile: (updates: Partial<AuthUser>) => Promise<void>;\n  resetPassword: (email: string) => Promise<void>;\n  refreshSession: () => Promise<void>;\n  clearError: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n  enableSessionMonitoring?: boolean;\n}\n\n/**\n * Authentication Provider Component\n * Provides authentication context to the entire app\n */\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ \n  children, \n  enableSessionMonitoring = true \n}) => {\n  const auth = useEnhancedAuth();\n\n  return (\n    <AuthContext.Provider value={auth}>\n      {children}\n      {enableSessionMonitoring && <SessionMonitor />}\n    </AuthContext.Provider>\n  );\n};\n\n/**\n * Hook to use authentication context\n */\nexport const useAuthContext = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuthContext must be used within an AuthProvider');\n  }\n  return context;\n};\n\n/**\n * Higher-order component for protected routes\n */\nexport const withAuth = <P extends object>(\n  Component: React.ComponentType<P>,\n  options?: {\n    requireEmailVerification?: boolean;\n    fallback?: React.ComponentType;\n    onUnauthorized?: () => void;\n  }\n) => {\n  return function AuthenticatedComponent(props: P) {\n    const { isAuthenticated, user, loading } = useAuthContext();\n\n    if (loading) {\n      return (\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"w-12 h-12 border-4 border-yellow-200 border-t-yellow-600 rounded-full animate-spin mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading...</p>\n          </div>\n        </div>\n      );\n    }\n\n    if (!isAuthenticated) {\n      if (options?.fallback) {\n        const FallbackComponent = options.fallback;\n        return <FallbackComponent />;\n      }\n\n      if (options?.onUnauthorized) {\n        options.onUnauthorized();\n        return null;\n      }\n\n      return (\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n          <div className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center\">\n            <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Lock className=\"w-10 h-10 text-red-600\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Authentication Required</h2>\n            <p className=\"text-gray-600 mb-8\">\n              You need to sign in to access this page.\n            </p>\n            <button className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors\">\n              Sign In\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    if (options?.requireEmailVerification && user && !user.email_verified) {\n      return (\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n          <div className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center\">\n            <div className=\"w-20 h-20 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Shield className=\"w-10 h-10 text-amber-600\" />\n            </div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Email Verification Required</h2>\n            <p className=\"text-gray-600 mb-8\">\n              Please verify your email address to access this feature.\n            </p>\n          </div>\n        </div>\n      );\n    }\n\n    return <Component {...props} />;\n  };\n};\n\nexport default AuthProvider;","size_bytes":4353},"client/src/components/Auth/EnhancedLoginForm.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Mail, Lock, Eye, EyeOff, ArrowRight, AlertCircle, CheckCircle, Loader, Shield } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { AuthService, AuthValidation, SessionManager } from '../../lib/auth';\n\ninterface SignInData {\n  email: string;\n  password: string;\n  rememberMe?: boolean;\n}\n\nconst loginSchema = z.object({\n  email: z.string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address'),\n  password: z.string()\n    .min(6, 'Password must be at least 6 characters'),\n  rememberMe: z.boolean().optional(),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\ninterface EnhancedLoginFormProps {\n  onSuccess: (user: any) => void;\n  onSwitchToRegister: () => void;\n  onSwitchToForgotPassword: () => void;\n}\n\nconst EnhancedLoginForm: React.FC<EnhancedLoginFormProps> = ({\n  onSuccess,\n  onSwitchToRegister,\n  onSwitchToForgotPassword,\n}) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [loginAttempts, setLoginAttempts] = useState(0);\n  const [isLocked, setIsLocked] = useState(false);\n  const [lockoutTime, setLockoutTime] = useState(0);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isValid },\n    watch,\n    setValue,\n  } = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    mode: 'onChange',\n    defaultValues: {\n      rememberMe: SessionManager.shouldRememberUser(),\n    }\n  });\n\n  const watchedEmail = watch('email');\n  const watchedPassword = watch('password');\n\n  // Handle account lockout\n  useEffect(() => {\n    if (loginAttempts >= 5) {\n      setIsLocked(true);\n      setLockoutTime(30); // 30 seconds lockout\n      \n      const timer = setInterval(() => {\n        setLockoutTime((prev) => {\n          if (prev <= 1) {\n            setIsLocked(false);\n            setLoginAttempts(0);\n            clearInterval(timer);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => clearInterval(timer);\n    }\n  }, [loginAttempts]);\n\n  // Auto-fill email if remembered\n  useEffect(() => {\n    const rememberedEmail = localStorage.getItem('supabase_remembered_email');\n    if (rememberedEmail && SessionManager.shouldRememberUser()) {\n      setValue('email', rememberedEmail);\n    }\n  }, [setValue]);\n\n  const onSubmit = async (data: LoginFormData) => {\n    if (isLocked) {\n      setError(`Account temporarily locked. Try again in ${lockoutTime} seconds.`);\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const signInData: SignInData = {\n        email: data.email,\n        password: data.password,\n        rememberMe: data.rememberMe,\n      };\n\n      const result = await AuthService.signIn(signInData);\n\n      if (result.error) {\n        setError(result.error.message);\n        setLoginAttempts(prev => prev + 1);\n        \n        // Track failed login attempts\n        console.warn('Login failed:', result.error);\n        return;\n      }\n\n      if (result.user) {\n        // Save email for remember me functionality\n        if (data.rememberMe) {\n          localStorage.setItem('supabase_remembered_email', data.email);\n          SessionManager.setRememberMe(true);\n        } else {\n          localStorage.removeItem('supabase_remembered_email');\n          SessionManager.setRememberMe(false);\n        }\n\n        // Reset login attempts on success\n        setLoginAttempts(0);\n        onSuccess(result.user);\n      }\n    } catch (error) {\n      setError('An unexpected error occurred. Please try again.');\n      console.error('Login error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getPasswordStrength = () => {\n    if (!watchedPassword) return null;\n    return AuthValidation.validatePassword(watchedPassword);\n  };\n\n  const passwordStrength = getPasswordStrength();\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"bg-white rounded-2xl p-8 w-full max-w-md shadow-2xl\"\n    >\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <div className=\"w-16 h-16 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Shield className=\"w-8 h-8 text-white\" />\n        </div>\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Welcome Back</h2>\n        <p className=\"text-gray-600\">Sign in to your account to continue</p>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-xl\"\n        >\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"w-5 h-5 text-red-600\" />\n            <p className=\"text-red-800 text-sm font-medium\">{error}</p>\n          </div>\n        </motion.div>\n      )}\n\n      {/* Lockout Warning */}\n      {loginAttempts >= 3 && !isLocked && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-6 p-4 bg-amber-50 border border-amber-200 rounded-xl\"\n        >\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"w-5 h-5 text-amber-600\" />\n            <p className=\"text-amber-800 text-sm\">\n              {5 - loginAttempts} attempts remaining before temporary lockout\n            </p>\n          </div>\n        </motion.div>\n      )}\n\n      {/* Lockout Display */}\n      {isLocked && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-xl\"\n        >\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"w-5 h-5 text-red-600\" />\n            <p className=\"text-red-800 text-sm font-medium\">\n              Account temporarily locked. Try again in {lockoutTime} seconds.\n            </p>\n          </div>\n        </motion.div>\n      )}\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Email Field */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Email Address *\n          </label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('email')}\n              type=\"email\"\n              autoComplete=\"email\"\n              className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.email \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Enter your email address\"\n              disabled={isLoading || isLocked}\n            />\n            {watchedEmail && AuthValidation.isValidEmail(watchedEmail) && (\n              <CheckCircle className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-green-500\" />\n            )}\n          </div>\n          {errors.email && (\n            <div className=\"mt-1 flex items-center space-x-1 text-red-600\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <p className=\"text-sm\">{errors.email.message}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Password Field */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Password *\n          </label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('password')}\n              type={showPassword ? 'text' : 'password'}\n              autoComplete=\"current-password\"\n              className={`w-full pl-12 pr-12 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.password \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Enter your password\"\n              disabled={isLoading || isLocked}\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors\"\n              disabled={isLoading || isLocked}\n            >\n              {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            </button>\n          </div>\n          {errors.password && (\n            <div className=\"mt-1 flex items-center space-x-1 text-red-600\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <p className=\"text-sm\">{errors.password.message}</p>\n            </div>\n          )}\n          \n          {/* Password Strength Indicator */}\n          {passwordStrength && watchedPassword && (\n            <div className=\"mt-2\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <span className=\"text-xs text-gray-600\">Password strength:</span>\n                <span className={`text-xs font-medium ${\n                  passwordStrength.strength === 'strong' ? 'text-green-600' :\n                  passwordStrength.strength === 'medium' ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {passwordStrength.strength.toUpperCase()}\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-1\">\n                <div\n                  className={`h-1 rounded-full transition-all duration-300 ${\n                    passwordStrength.strength === 'strong' ? 'bg-green-500 w-full' :\n                    passwordStrength.strength === 'medium' ? 'bg-yellow-500 w-2/3' : 'bg-red-500 w-1/3'\n                  }`}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Remember Me and Forgot Password */}\n        <div className=\"flex items-center justify-between\">\n          <label className=\"flex items-center\">\n            <input\n              {...register('rememberMe')}\n              type=\"checkbox\"\n              className=\"w-4 h-4 text-yellow-600 bg-gray-100 border-gray-300 rounded focus:ring-yellow-500\"\n              disabled={isLoading || isLocked}\n            />\n            <span className=\"ml-2 text-sm text-gray-600\">Remember me</span>\n          </label>\n          <button\n            type=\"button\"\n            onClick={onSwitchToForgotPassword}\n            className=\"text-sm text-yellow-600 hover:text-yellow-700 font-medium transition-colors\"\n            disabled={isLoading || isLocked}\n          >\n            Forgot password?\n          </button>\n        </div>\n\n        {/* Submit Button */}\n        <motion.button\n          whileHover={{ scale: isLoading || isLocked ? 1 : 1.02 }}\n          whileTap={{ scale: isLoading || isLocked ? 1 : 0.98 }}\n          type=\"submit\"\n          disabled={!isValid || isLoading || isLocked}\n          className={`w-full py-4 rounded-xl font-semibold text-lg transition-colors flex items-center justify-center space-x-2 ${\n            isValid && !isLoading && !isLocked\n              ? 'bg-yellow-600 hover:bg-yellow-700 text-white shadow-lg hover:shadow-xl'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {isLoading ? (\n            <>\n              <Loader className=\"w-5 h-5 animate-spin\" />\n              <span>Signing In...</span>\n            </>\n          ) : isLocked ? (\n            <>\n              <AlertCircle className=\"w-5 h-5\" />\n              <span>Account Locked ({lockoutTime}s)</span>\n            </>\n          ) : (\n            <>\n              <span>Sign In</span>\n              <ArrowRight className=\"w-5 h-5\" />\n            </>\n          )}\n        </motion.button>\n      </form>\n\n      {/* Security Features */}\n      <div className=\"mt-6 bg-gray-50 rounded-xl p-4\">\n        <div className=\"flex items-center space-x-2 text-gray-700 mb-2\">\n          <Shield className=\"w-4 h-4\" />\n          <span className=\"text-sm font-medium\">Secure Login</span>\n        </div>\n        <ul className=\"text-xs text-gray-600 space-y-1\">\n          <li>• End-to-end encryption</li>\n          <li>• Automatic session management</li>\n          <li>• Brute force protection</li>\n          <li>• Secure password storage</li>\n        </ul>\n      </div>\n\n      {/* Switch to Register */}\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-gray-600\">\n          Don't have an account?{' '}\n          <button\n            onClick={onSwitchToRegister}\n            className=\"text-yellow-600 hover:text-yellow-700 font-medium transition-colors\"\n            disabled={isLoading}\n          >\n            Create account\n          </button>\n        </p>\n      </div>\n\n      {/* Login Attempts Warning */}\n      {loginAttempts > 0 && loginAttempts < 5 && (\n        <div className=\"mt-4 text-center\">\n          <p className=\"text-xs text-gray-500\">\n            {loginAttempts} failed attempt{loginAttempts > 1 ? 's' : ''}. \n            {5 - loginAttempts} remaining before temporary lockout.\n          </p>\n        </div>\n      )}\n    </motion.div>\n  );\n};\n\nexport default EnhancedLoginForm;","size_bytes":13784},"client/src/components/Auth/EnhancedRegisterForm.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { User, Mail, Lock, Eye, EyeOff, ArrowRight, AlertCircle, CheckCircle, Phone, Loader } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { AuthService, AuthValidation } from '../../lib/auth';\n\ninterface SignUpData {\n  email: string;\n  password: string;\n  fullName?: string;\n  phone?: string;\n}\n\nconst registerSchema = z.object({\n  fullName: z.string()\n    .min(2, 'Full name must be at least 2 characters')\n    .max(50, 'Full name must be less than 50 characters')\n    .regex(/^[a-zA-Z\\s]+$/, 'Full name must contain only letters and spaces'),\n  email: z.string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address'),\n  phone: z.string()\n    .min(10, 'Phone number must be at least 10 digits')\n    .regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number')\n    .optional(),\n  password: z.string()\n    .min(6, 'Password must be at least 6 characters'),\n  confirmPassword: z.string(),\n  agreeToTerms: z.boolean()\n    .refine(val => val === true, 'You must agree to the terms and conditions'),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\ninterface EnhancedRegisterFormProps {\n  onSuccess: (user: any) => void;\n  onSwitchToLogin: () => void;\n}\n\nconst EnhancedRegisterForm: React.FC<EnhancedRegisterFormProps> = ({\n  onSuccess,\n  onSwitchToLogin,\n}) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isValid },\n    watch,\n  } = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    mode: 'onChange',\n  });\n\n  const watchedPassword = watch('password');\n  const watchedEmail = watch('email');\n\n  const onSubmit = async (data: RegisterFormData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const signUpData: SignUpData = {\n        email: data.email,\n        password: data.password,\n        fullName: data.fullName,\n        phone: data.phone,\n      };\n\n      const result = await AuthService.signUp(signUpData);\n\n      if (result.error) {\n        setError(result.error.message);\n        return;\n      }\n\n      if (result.user) {\n        onSuccess(result.user);\n      }\n    } catch (error) {\n      setError('An unexpected error occurred during registration. Please try again.');\n      console.error('Registration error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getPasswordStrength = () => {\n    if (!watchedPassword) return null;\n    return AuthValidation.validatePassword(watchedPassword);\n  };\n\n  const passwordStrength = getPasswordStrength();\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"bg-white rounded-2xl p-8 w-full max-w-md shadow-2xl\"\n    >\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <div className=\"w-16 h-16 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <User className=\"w-8 h-8 text-white\" />\n        </div>\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Create Account</h2>\n        <p className=\"text-gray-600\">Join us and start your journey</p>\n      </div>\n\n      {/* Error Display */}\n      {error && (\n        <motion.div\n          initial={{ opacity: 0, y: -10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-xl\"\n        >\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"w-5 h-5 text-red-600\" />\n            <p className=\"text-red-800 text-sm font-medium\">{error}</p>\n          </div>\n        </motion.div>\n      )}\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Full Name Field */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Full Name *\n          </label>\n          <div className=\"relative\">\n            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('fullName')}\n              type=\"text\"\n              autoComplete=\"name\"\n              className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.fullName \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Enter your full name\"\n              disabled={isLoading}\n            />\n          </div>\n          {errors.fullName && (\n            <div className=\"mt-1 flex items-center space-x-1 text-red-600\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <p className=\"text-sm\">{errors.fullName.message}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Email Field */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Email Address *\n          </label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('email')}\n              type=\"email\"\n              autoComplete=\"email\"\n              className={`w-full pl-12 pr-12 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.email \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Enter your email address\"\n              disabled={isLoading}\n            />\n            {watchedEmail && AuthValidation.isValidEmail(watchedEmail) && (\n              <CheckCircle className=\"absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-green-500\" />\n            )}\n          </div>\n          {errors.email && (\n            <div className=\"mt-1 flex items-center space-x-1 text-red-600\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <p className=\"text-sm\">{errors.email.message}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Phone Field (Optional) */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Phone Number <span className=\"text-gray-400\">(Optional)</span>\n          </label>\n          <div className=\"relative\">\n            <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('phone')}\n              type=\"tel\"\n              autoComplete=\"tel\"\n              className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.phone \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Enter your phone number\"\n              disabled={isLoading}\n            />\n          </div>\n          {errors.phone && (\n            <div className=\"mt-1 flex items-center space-x-1 text-red-600\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <p className=\"text-sm\">{errors.phone.message}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Password Field */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Password *\n          </label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('password')}\n              type={showPassword ? 'text' : 'password'}\n              autoComplete=\"new-password\"\n              className={`w-full pl-12 pr-12 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.password \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Create a strong password\"\n              disabled={isLoading}\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors\"\n              disabled={isLoading}\n            >\n              {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            </button>\n          </div>\n          {errors.password && (\n            <div className=\"mt-1 flex items-center space-x-1 text-red-600\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <p className=\"text-sm\">{errors.password.message}</p>\n            </div>\n          )}\n          \n          {/* Password Strength Indicator */}\n          {passwordStrength && watchedPassword && (\n            <div className=\"mt-2\">\n              <div className=\"flex items-center space-x-2 mb-1\">\n                <span className=\"text-xs text-gray-600\">Password strength:</span>\n                <span className={`text-xs font-medium ${\n                  passwordStrength.strength === 'strong' ? 'text-green-600' :\n                  passwordStrength.strength === 'medium' ? 'text-yellow-600' : 'text-red-600'\n                }`}>\n                  {passwordStrength.strength.toUpperCase()}\n                </span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-1 mb-2\">\n                <div\n                  className={`h-1 rounded-full transition-all duration-300 ${\n                    passwordStrength.strength === 'strong' ? 'bg-green-500 w-full' :\n                    passwordStrength.strength === 'medium' ? 'bg-yellow-500 w-2/3' : 'bg-red-500 w-1/3'\n                  }`}\n                />\n              </div>\n              {passwordStrength.errors.length > 0 && (\n                <ul className=\"text-xs text-gray-600 space-y-1\">\n                  {passwordStrength.errors.map((error, index) => (\n                    <li key={index}>• {error}</li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Confirm Password Field */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Confirm Password *\n          </label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('confirmPassword')}\n              type={showConfirmPassword ? 'text' : 'password'}\n              autoComplete=\"new-password\"\n              className={`w-full pl-12 pr-12 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.confirmPassword \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Confirm your password\"\n              disabled={isLoading}\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors\"\n              disabled={isLoading}\n            >\n              {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            </button>\n          </div>\n          {errors.confirmPassword && (\n            <div className=\"mt-1 flex items-center space-x-1 text-red-600\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <p className=\"text-sm\">{errors.confirmPassword.message}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Terms and Conditions */}\n        <div>\n          <label className=\"flex items-start space-x-3\">\n            <input\n              {...register('agreeToTerms')}\n              type=\"checkbox\"\n              className=\"w-4 h-4 text-yellow-600 bg-gray-100 border-gray-300 rounded focus:ring-yellow-500 mt-1\"\n              disabled={isLoading}\n            />\n            <span className=\"text-sm text-gray-600 leading-relaxed\">\n              I agree to the{' '}\n              <a href=\"#\" className=\"text-yellow-600 hover:text-yellow-700 font-medium\">\n                Terms of Service\n              </a>\n              {' '}and{' '}\n              <a href=\"#\" className=\"text-yellow-600 hover:text-yellow-700 font-medium\">\n                Privacy Policy\n              </a>\n            </span>\n          </label>\n          {errors.agreeToTerms && (\n            <div className=\"mt-1 flex items-center space-x-1 text-red-600\">\n              <AlertCircle className=\"w-4 h-4\" />\n              <p className=\"text-sm\">{errors.agreeToTerms.message}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Submit Button */}\n        <motion.button\n          whileHover={{ scale: isLoading ? 1 : 1.02 }}\n          whileTap={{ scale: isLoading ? 1 : 0.98 }}\n          type=\"submit\"\n          disabled={!isValid || isLoading}\n          className={`w-full py-4 rounded-xl font-semibold text-lg transition-colors flex items-center justify-center space-x-2 ${\n            isValid && !isLoading\n              ? 'bg-yellow-600 hover:bg-yellow-700 text-white shadow-lg hover:shadow-xl'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {isLoading ? (\n            <>\n              <Loader className=\"w-5 h-5 animate-spin\" />\n              <span>Creating Account...</span>\n            </>\n          ) : (\n            <>\n              <span>Create Account</span>\n              <ArrowRight className=\"w-5 h-5\" />\n            </>\n          )}\n        </motion.button>\n      </form>\n\n      {/* Password Requirements */}\n      {watchedPassword && (\n        <div className=\"mt-6 bg-gray-50 rounded-xl p-4\">\n          <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Password Requirements</h4>\n          <div className=\"space-y-1\">\n            {[\n              { test: watchedPassword.length >= 6, text: 'At least 6 characters' },\n              { test: /[a-z]/.test(watchedPassword), text: 'One lowercase letter' },\n              { test: /[A-Z]/.test(watchedPassword), text: 'One uppercase letter' },\n              { test: /\\d/.test(watchedPassword), text: 'One number' },\n              { test: /[!@#$%^&*(),.?\":{}|<>]/.test(watchedPassword), text: 'One special character' },\n            ].map((requirement, index) => (\n              <div key={index} className=\"flex items-center space-x-2\">\n                {requirement.test ? (\n                  <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                ) : (\n                  <div className=\"w-3 h-3 border border-gray-300 rounded-full\" />\n                )}\n                <span className={`text-xs ${requirement.test ? 'text-green-600' : 'text-gray-500'}`}>\n                  {requirement.text}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Switch to Login */}\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-gray-600\">\n          Already have an account?{' '}\n          <button\n            onClick={onSwitchToLogin}\n            className=\"text-yellow-600 hover:text-yellow-700 font-medium transition-colors\"\n            disabled={isLoading}\n          >\n            Sign in\n          </button>\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default EnhancedRegisterForm;","size_bytes":16148},"client/src/components/Auth/ForgotPasswordForm.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Mail, ArrowLeft, CheckCircle } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst forgotPasswordSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n});\n\ntype ForgotPasswordData = z.infer<typeof forgotPasswordSchema>;\n\ninterface ForgotPasswordFormProps {\n  onClose: () => void;\n  onSwitchToLogin: () => void;\n}\n\nconst ForgotPasswordForm: React.FC<ForgotPasswordFormProps> = ({ onClose, onSwitchToLogin }) => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm<ForgotPasswordData>({\n    resolver: zodResolver(forgotPasswordSchema),\n  });\n\n  const onSubmit = async (data: ForgotPasswordData) => {\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setIsSubmitted(true);\n    } catch (error) {\n      console.error('Password reset failed:', error);\n    }\n  };\n\n  if (isSubmitted) {\n    return (\n      <motion.div\n        initial={{ opacity: 0, scale: 0.9 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.9 }}\n        className=\"bg-white rounded-2xl p-8 w-full max-w-md text-center\"\n      >\n        <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n          <CheckCircle className=\"w-8 h-8 text-green-600\" />\n        </div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Check Your Email</h2>\n        <p className=\"text-gray-600 mb-8\">\n          We've sent a password reset link to your email address. Please check your inbox and follow the instructions.\n        </p>\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          onClick={onSwitchToLogin}\n          className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors\"\n        >\n          Back to Sign In\n        </motion.button>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"bg-white rounded-2xl p-8 w-full max-w-md\"\n    >\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Reset Password</h2>\n        <p className=\"text-gray-600\">Enter your email to receive a reset link</p>\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Email Address\n          </label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('email')}\n              type=\"email\"\n              className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your email\"\n            />\n          </div>\n          {errors.email && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.email.message}</p>\n          )}\n        </div>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n        >\n          {isSubmitting ? (\n            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n          ) : (\n            <span>Send Reset Link</span>\n          )}\n        </motion.button>\n      </form>\n\n      <div className=\"mt-8 text-center\">\n        <button\n          onClick={onSwitchToLogin}\n          className=\"text-yellow-600 hover:text-yellow-700 font-medium flex items-center justify-center space-x-2\"\n        >\n          <ArrowLeft className=\"w-4 h-4\" />\n          <span>Back to Sign In</span>\n        </button>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default ForgotPasswordForm;","size_bytes":4455},"client/src/components/Auth/LoginForm.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Mail, Lock, Eye, EyeOff, ArrowRight, User } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useDispatch } from 'react-redux';\nimport { setUser } from '../../store/slices/authSlice';\nimport { supabase } from '../../utils/supabaseClient';\n\nconst loginSchema = z.object({\n  emailOrUsername: z.string().min(1, 'Email or username is required'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\n\ninterface LoginFormProps {\n  onClose: () => void;\n  onSwitchToRegister: () => void;\n  onSwitchToForgotPassword: () => void;\n}\n\nconst LoginForm: React.FC<LoginFormProps> = ({ onClose, onSwitchToRegister, onSwitchToForgotPassword }) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const onSubmit = async (data: LoginData) => {\n    try {\n      const email = data.emailOrUsername.includes('@')\n        ? data.emailOrUsername\n        : `${data.emailOrUsername}@example.com`; // fallback logic\n\n      const { data: authData, error } = await supabase.auth.signInWithPassword({\n        email,\n        password: data.password,\n      });\n\n      if (error || !authData.user) {\n        throw new Error(error?.message || 'Login failed');\n      }\n\n      const user = authData.user;\n\n      const { data: profileData } = await supabase\n        .from('profiles') // optional: if you store extra user data\n        .select('*')\n        .eq('id', user.id)\n        .single();\n\n      const userForRedux = {\n        id: user.id,\n        email: user.email,\n        name: profileData?.full_name || user.user_metadata.full_name || user.email,\n        avatar: profileData?.avatar_url || user.user_metadata.avatar_url || '',\n      };\n\n      dispatch(setUser(userForRedux));\n      onClose();\n    } catch (error) {\n      alert(error instanceof Error ? error.message : 'Login failed');\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"bg-white rounded-2xl p-8 w-full max-w-md\"\n    >\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Welcome Back</h2>\n        <p className=\"text-gray-600\">Sign in to your account</p>\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Email or Username\n          </label>\n          <div className=\"relative\">\n            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('emailOrUsername')}\n              type=\"text\"\n              className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your email or username\"\n            />\n          </div>\n          {errors.emailOrUsername && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.emailOrUsername.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Password\n          </label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('password')}\n              type={showPassword ? 'text' : 'password'}\n              className=\"w-full pl-12 pr-12 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your password\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n            >\n              {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            </button>\n          </div>\n          {errors.password && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.password.message}</p>\n          )}\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <label className=\"flex items-center\">\n            <input type=\"checkbox\" className=\"rounded border-gray-300 text-yellow-600 focus:ring-yellow-500\" />\n            <span className=\"ml-2 text-sm text-gray-600\">Remember me</span>\n          </label>\n          <button\n            type=\"button\"\n            onClick={onSwitchToForgotPassword}\n            className=\"text-sm text-yellow-600 hover:text-yellow-700 font-medium\"\n          >\n            Forgot password?\n          </button>\n        </div>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n        >\n          {isSubmitting ? (\n            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n          ) : (\n            <>\n              <span>Sign In</span>\n              <ArrowRight className=\"w-5 h-5\" />\n            </>\n          )}\n        </motion.button>\n      </form>\n\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-gray-600\">\n          Don't have an account?{' '}\n          <button\n            onClick={onSwitchToRegister}\n            className=\"text-yellow-600 hover:text-yellow-700 font-medium\"\n          >\n            Sign up\n          </button>\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default LoginForm;\n","size_bytes":6274},"client/src/components/Auth/ProtectedRoute.tsx":{"content":"import React, { useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Shield, Lock, ArrowRight, AlertTriangle } from 'lucide-react';\nimport { useEnhancedAuth } from '../../hooks/useEnhancedAuth';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  redirectTo?: string;\n  requireEmailVerification?: boolean;\n  onUnauthorized?: () => void;\n}\n\n/**\n * Protected Route Component\n * Wraps components that require authentication\n */\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({\n  children,\n  fallback,\n  redirectTo,\n  requireEmailVerification = false,\n  onUnauthorized,\n}) => {\n  const { user, loading, isAuthenticated } = useEnhancedAuth();\n\n  useEffect(() => {\n    if (!loading && !isAuthenticated && onUnauthorized) {\n      onUnauthorized();\n    }\n  }, [loading, isAuthenticated, onUnauthorized]);\n\n  // Show loading state\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-yellow-200 border-t-yellow-600 rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Checking authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show unauthorized state\n  if (!isAuthenticated) {\n    if (fallback) {\n      return <>{fallback}</>;\n    }\n\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center\"\n        >\n          <div className=\"w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Lock className=\"w-10 h-10 text-red-600\" />\n          </div>\n          \n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Authentication Required</h2>\n          <p className=\"text-gray-600 mb-8\">\n            You need to sign in to access this page. Please log in to continue.\n          </p>\n          \n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => {\n              if (redirectTo) {\n                window.location.href = redirectTo;\n              } else if (onUnauthorized) {\n                onUnauthorized();\n              }\n            }}\n            className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors flex items-center justify-center space-x-2\"\n          >\n            <span>Sign In</span>\n            <ArrowRight className=\"w-5 h-5\" />\n          </motion.button>\n        </motion.div>\n      </div>\n    );\n  }\n\n  // Check email verification if required\n  if (requireEmailVerification && user && !user.email_verified) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center px-4\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center\"\n        >\n          <div className=\"w-20 h-20 bg-amber-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <Shield className=\"w-10 h-10 text-amber-600\" />\n          </div>\n          \n          <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Email Verification Required</h2>\n          <p className=\"text-gray-600 mb-8\">\n            Please check your email and click the verification link to access this page.\n          </p>\n          \n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={() => window.location.reload()}\n            className=\"w-full bg-amber-600 hover:bg-amber-700 text-white py-3 rounded-xl font-semibold transition-colors\"\n          >\n            I've Verified My Email\n          </motion.button>\n        </motion.div>\n      </div>\n    );\n  }\n\n  // Render protected content\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;","size_bytes":4137},"client/src/components/Auth/RegisterForm.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { User, Mail, Lock, Eye, EyeOff, ArrowRight, Phone } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useDispatch } from 'react-redux';\nimport { setUser } from '../../store/slices/authSlice';\nimport { MockAuthService } from '../../utils/mockAuth';\nimport { supabase } from '../../utils/supabaseClient';\n\n\nconst registerSchema = z.object({\n  fullName: z.string().min(2, 'Full name must be at least 2 characters'),\n  mobileNumber: z.string().min(10, 'Mobile number must be at least 10 digits').regex(/^\\d+$/, 'Mobile number must contain only digits'),\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterData = z.infer<typeof registerSchema>;\n\ninterface RegisterFormProps {\n  onClose: () => void;\n  onSwitchToLogin: () => void;\n}\n\nconst RegisterForm: React.FC<RegisterFormProps> = ({ onClose, onSwitchToLogin }) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n  } = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n  });\n\nconst onSubmit = async (data: RegisterData) => {\n  try {\n    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({\n      email: data.email,\n      password: data.password,\n    });\n\n    if (signUpError) throw signUpError;\n\n    const user = signUpData.user;\n\n    // ✅ Insert into `profiles` table after signup\n    const { error: profileError } = await supabase.from('profiles').insert([\n      {\n        id: user?.id, // same as auth user ID\n        full_name: data.fullName,\n        mobile_number: data.mobileNumber,\n      },\n    ]);\n\n    if (profileError) throw profileError;\n\n    // ✅ Set user data in Redux\n    const userForRedux = {\n      id: user?.id,\n      email: data.email,\n      name: data.fullName,\n      mobileNumber: data.mobileNumber,\n      avatar: '', // Placeholder if needed\n    };\n\n    dispatch(setUser(userForRedux));\n    onClose();\n  } catch (error) {\n    alert(error instanceof Error ? error.message : 'Registration failed');\n  }\n};\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"bg-white rounded-2xl p-8 w-full max-w-md\"\n    >\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Create Account</h2>\n        <p className=\"text-gray-600\">Join us and start shopping</p>\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Full Name\n          </label>\n          <div className=\"relative\">\n            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('fullName')}\n              type=\"text\"\n              className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your full name\"\n            />\n          </div>\n          {errors.fullName && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.fullName.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Mobile Number\n          </label>\n          <div className=\"relative\">\n            <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('mobileNumber')}\n              type=\"tel\"\n              className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your mobile number\"\n            />\n          </div>\n          {errors.mobileNumber && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.mobileNumber.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Email Address\n          </label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('email')}\n              type=\"email\"\n              className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your email\"\n            />\n          </div>\n          {errors.email && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.email.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Password\n          </label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('password')}\n              type={showPassword ? 'text' : 'password'}\n              className=\"w-full pl-12 pr-12 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Create a password\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n            >\n              {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            </button>\n          </div>\n          {errors.password && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.password.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Confirm Password\n          </label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('confirmPassword')}\n              type={showConfirmPassword ? 'text' : 'password'}\n              className=\"w-full pl-12 pr-12 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Confirm your password\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n            >\n              {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            </button>\n          </div>\n          {errors.confirmPassword && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.confirmPassword.message}</p>\n          )}\n        </div>\n\n        <div className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            required\n            className=\"rounded border-gray-300 text-yellow-600 focus:ring-yellow-500\"\n          />\n          <span className=\"ml-2 text-sm text-gray-600\">\n            I agree to the{' '}\n            <a href=\"#\" className=\"text-yellow-600 hover:text-yellow-700\">Terms of Service</a>\n            {' '}and{' '}\n            <a href=\"#\" className=\"text-yellow-600 hover:text-yellow-700\">Privacy Policy</a>\n          </span>\n        </div>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n        >\n          {isSubmitting ? (\n            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n          ) : (\n            <>\n              <span>Create Account</span>\n              <ArrowRight className=\"w-5 h-5\" />\n            </>\n          )}\n        </motion.button>\n      </form>\n\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-gray-600\">\n          Already have an account?{' '}\n          <button\n            onClick={onSwitchToLogin}\n            className=\"text-yellow-600 hover:text-yellow-700 font-medium\"\n          >\n            Sign in\n          </button>\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default RegisterForm;","size_bytes":9253},"client/src/components/Auth/SessionMonitor.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Clock, RefreshCw, LogOut, AlertTriangle } from 'lucide-react';\nimport { useEnhancedAuth } from '../../hooks/useEnhancedAuth';\nimport { SessionManager } from '../../lib/auth';\n\n/**\n * Session Monitor Component\n * Displays session status and handles automatic refresh\n */\nconst SessionMonitor: React.FC = () => {\n  const { user, sessionExpiry, refreshSession, signOut } = useEnhancedAuth();\n  const [timeUntilExpiry, setTimeUntilExpiry] = useState<number | null>(null);\n  const [showWarning, setShowWarning] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  useEffect(() => {\n    if (!sessionExpiry || !user) return;\n\n    const updateTimer = () => {\n      const now = new Date();\n      const timeLeft = sessionExpiry.getTime() - now.getTime();\n      \n      if (timeLeft <= 0) {\n        setTimeUntilExpiry(0);\n        setShowWarning(true);\n        return;\n      }\n\n      setTimeUntilExpiry(timeLeft);\n      \n      // Show warning if less than 5 minutes remaining\n      const fiveMinutes = 5 * 60 * 1000;\n      setShowWarning(timeLeft <= fiveMinutes);\n    };\n\n    updateTimer();\n    const interval = setInterval(updateTimer, 1000);\n\n    return () => clearInterval(interval);\n  }, [sessionExpiry, user]);\n\n  const handleRefreshSession = async () => {\n    setIsRefreshing(true);\n    try {\n      await refreshSession();\n      setShowWarning(false);\n    } catch (error) {\n      console.error('Failed to refresh session:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  const formatTimeRemaining = (milliseconds: number): string => {\n    const minutes = Math.floor(milliseconds / (1000 * 60));\n    const seconds = Math.floor((milliseconds % (1000 * 60)) / 1000);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  // Don't show if user is not authenticated\n  if (!user || !sessionExpiry) return null;\n\n  // Only show in development or when warning is needed\n  if (process.env.NODE_ENV !== 'development' && !showWarning) return null;\n\n  return (\n    <AnimatePresence>\n      {(showWarning || process.env.NODE_ENV === 'development') && (\n        <motion.div\n          initial={{ opacity: 0, y: -50 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -50 }}\n          className={`fixed top-4 right-4 z-50 max-w-sm ${\n            showWarning ? 'bg-amber-50 border-amber-200' : 'bg-blue-50 border-blue-200'\n          } border rounded-xl p-4 shadow-lg`}\n        >\n          <div className=\"flex items-start space-x-3\">\n            <div className={`flex-shrink-0 ${\n              showWarning ? 'text-amber-600' : 'text-blue-600'\n            }`}>\n              {showWarning ? (\n                <AlertTriangle className=\"w-5 h-5\" />\n              ) : (\n                <Clock className=\"w-5 h-5\" />\n              )}\n            </div>\n            \n            <div className=\"flex-1\">\n              <h4 className={`font-medium ${\n                showWarning ? 'text-amber-900' : 'text-blue-900'\n              } mb-1`}>\n                {showWarning ? 'Session Expiring Soon' : 'Session Status'}\n              </h4>\n              \n              <p className={`text-sm ${\n                showWarning ? 'text-amber-800' : 'text-blue-800'\n              } mb-3`}>\n                {timeUntilExpiry !== null && timeUntilExpiry > 0 ? (\n                  <>Time remaining: {formatTimeRemaining(timeUntilExpiry)}</>\n                ) : (\n                  'Session has expired'\n                )}\n              </p>\n\n              <div className=\"flex space-x-2\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={handleRefreshSession}\n                  disabled={isRefreshing}\n                  className={`flex items-center space-x-1 px-3 py-1 rounded-lg text-sm font-medium transition-colors ${\n                    showWarning \n                      ? 'bg-amber-600 hover:bg-amber-700 text-white' \n                      : 'bg-blue-600 hover:bg-blue-700 text-white'\n                  } disabled:opacity-50`}\n                >\n                  <RefreshCw className={`w-3 h-3 ${isRefreshing ? 'animate-spin' : ''}`} />\n                  <span>{isRefreshing ? 'Refreshing...' : 'Refresh'}</span>\n                </motion.button>\n\n                {showWarning && (\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={signOut}\n                    className=\"flex items-center space-x-1 px-3 py-1 bg-gray-600 hover:bg-gray-700 text-white rounded-lg text-sm font-medium transition-colors\"\n                  >\n                    <LogOut className=\"w-3 h-3\" />\n                    <span>Sign Out</span>\n                  </motion.button>\n                )}\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default SessionMonitor;","size_bytes":5094},"client/src/components/Auth/SupabaseAuthModal.tsx":{"content":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X, Mail, Lock, User, Eye, EyeOff, ArrowRight, CheckCircle } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useAuth } from '../../hooks/useSupabase';\nimport { useDispatch } from 'react-redux';\nimport { setUser } from '../../store/slices/authSlice';\nimport { isSupabaseConfigured } from '../../lib/supabase';\nimport { MockAuthService } from '../../utils/mockAuth';\n\ntype AuthMode = 'login' | 'register' | 'forgot-password';\n\ninterface SupabaseAuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialMode?: AuthMode;\n}\n\nconst loginSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\nconst registerSchema = z.object({\n  fullName: z.string().min(2, 'Full name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nconst forgotPasswordSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\ntype RegisterData = z.infer<typeof registerSchema>;\ntype ForgotPasswordData = z.infer<typeof forgotPasswordSchema>;\n\nconst SupabaseAuthModal: React.FC<SupabaseAuthModalProps> = ({ \n  isOpen, \n  onClose, \n  initialMode = 'login' \n}) => {\n  const [mode, setMode] = useState<AuthMode>(initialMode);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const { signIn, signUp, loading } = useAuth();\n  const dispatch = useDispatch();\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n  });\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n  });\n\n  const forgotPasswordForm = useForm<ForgotPasswordData>({\n    resolver: zodResolver(forgotPasswordSchema),\n  });\n\n  const handleClose = () => {\n    onClose();\n    setMode('login');\n    setError(null);\n    setIsSubmitted(false);\n    loginForm.reset();\n    registerForm.reset();\n    forgotPasswordForm.reset();\n  };\n\n  const onLoginSubmit = async (data: LoginData) => {\n    try {\n      setError(null);\n      \n      if (isSupabaseConfigured()) {\n        await signIn(data.email, data.password);\n      } else {\n        // Use mock authentication service\n        const user = await MockAuthService.login(data.email, data.password);\n        const userForRedux = {\n          id: user.id,\n          email: user.email,\n          name: user.fullName,\n          avatar: user.avatar,\n        };\n        dispatch(setUser(userForRedux));\n      }\n      \n      handleClose();\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Login failed');\n    }\n  };\n\n  const onRegisterSubmit = async (data: RegisterData) => {\n    try {\n      setError(null);\n      \n      if (isSupabaseConfigured()) {\n        await signUp(data.email, data.password, data.fullName);\n        setIsSubmitted(true);\n      } else {\n        // Use mock authentication service\n        const user = await MockAuthService.register(data.email, data.password, data.fullName);\n        const userForRedux = {\n          id: user.id,\n          email: user.email,\n          name: user.fullName,\n          avatar: user.avatar,\n        };\n        dispatch(setUser(userForRedux));\n        handleClose();\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Registration failed');\n    }\n  };\n\n  const onForgotPasswordSubmit = async (data: ForgotPasswordData) => {\n    try {\n      setError(null);\n      // TODO: Implement forgot password\n      setIsSubmitted(true);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to send reset email');\n    }\n  };\n\n  const renderLoginForm = () => (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"bg-white rounded-2xl p-8 w-full max-w-md\"\n    >\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Welcome Back</h2>\n        <p className=\"text-gray-600\">Sign in to your account</p>\n      </div>\n\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm\">\n          {error}\n        </div>\n      )}\n\n      <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email</label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...loginForm.register('email')}\n              type=\"email\"\n              className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your email\"\n            />\n          </div>\n          {loginForm.formState.errors.email && (\n            <p className=\"mt-1 text-sm text-red-600\">{loginForm.formState.errors.email.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Password</label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...loginForm.register('password')}\n              type={showPassword ? 'text' : 'password'}\n              className=\"w-full pl-12 pr-12 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your password\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n            >\n              {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            </button>\n          </div>\n          {loginForm.formState.errors.password && (\n            <p className=\"mt-1 text-sm text-red-600\">{loginForm.formState.errors.password.message}</p>\n          )}\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <label className=\"flex items-center\">\n            <input type=\"checkbox\" className=\"rounded border-gray-300 text-yellow-600 focus:ring-yellow-500\" />\n            <span className=\"ml-2 text-sm text-gray-600\">Remember me</span>\n          </label>\n          <button\n            type=\"button\"\n            onClick={() => setMode('forgot-password')}\n            className=\"text-sm text-yellow-600 hover:text-yellow-700 font-medium\"\n          >\n            Forgot password?\n          </button>\n        </div>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          type=\"submit\"\n          disabled={loading}\n          className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n        >\n          {loading ? (\n            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n          ) : (\n            <>\n              <span>Sign In</span>\n              <ArrowRight className=\"w-5 h-5\" />\n            </>\n          )}\n        </motion.button>\n      </form>\n\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-gray-600\">\n          Don't have an account?{' '}\n          <button\n            onClick={() => setMode('register')}\n            className=\"text-yellow-600 hover:text-yellow-700 font-medium\"\n          >\n            Sign up\n          </button>\n        </p>\n      </div>\n    </motion.div>\n  );\n\n  const renderRegisterForm = () => (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"bg-white rounded-2xl p-8 w-full max-w-md\"\n    >\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Create Account</h2>\n        <p className=\"text-gray-600\">Join us and start shopping</p>\n      </div>\n\n      {error && (\n        <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm\">\n          {error}\n        </div>\n      )}\n\n      <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Full Name</label>\n          <div className=\"relative\">\n            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...registerForm.register('fullName')}\n              type=\"text\"\n              className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your full name\"\n            />\n          </div>\n          {registerForm.formState.errors.fullName && (\n            <p className=\"mt-1 text-sm text-red-600\">{registerForm.formState.errors.fullName.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email</label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...registerForm.register('email')}\n              type=\"email\"\n              className=\"w-full pl-12 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Enter your email\"\n            />\n          </div>\n          {registerForm.formState.errors.email && (\n            <p className=\"mt-1 text-sm text-red-600\">{registerForm.formState.errors.email.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Password</label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...registerForm.register('password')}\n              type={showPassword ? 'text' : 'password'}\n              className=\"w-full pl-12 pr-12 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Create a password\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n            >\n              {showPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            </button>\n          </div>\n          {registerForm.formState.errors.password && (\n            <p className=\"mt-1 text-sm text-red-600\">{registerForm.formState.errors.password.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Confirm Password</label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...registerForm.register('confirmPassword')}\n              type={showConfirmPassword ? 'text' : 'password'}\n              className=\"w-full pl-12 pr-12 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n              placeholder=\"Confirm your password\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n            >\n              {showConfirmPassword ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n            </button>\n          </div>\n          {registerForm.formState.errors.confirmPassword && (\n            <p className=\"mt-1 text-sm text-red-600\">{registerForm.formState.errors.confirmPassword.message}</p>\n          )}\n        </div>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          type=\"submit\"\n          disabled={loading}\n          className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n        >\n          {loading ? (\n            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n          ) : (\n            <>\n              <span>Create Account</span>\n              <ArrowRight className=\"w-5 h-5\" />\n            </>\n          )}\n        </motion.button>\n      </form>\n\n      <div className=\"mt-8 text-center\">\n        <p className=\"text-gray-600\">\n          Already have an account?{' '}\n          <button\n            onClick={() => setMode('login')}\n            className=\"text-yellow-600 hover:text-yellow-700 font-medium\"\n          >\n            Sign in\n          </button>\n        </p>\n      </div>\n    </motion.div>\n  );\n\n  const renderSuccessMessage = () => (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"bg-white rounded-2xl p-8 w-full max-w-md text-center\"\n    >\n      <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n        <CheckCircle className=\"w-8 h-8 text-green-600\" />\n      </div>\n      <h2 className=\"text-2xl font-bold text-gray-900 mb-4\">Check Your Email</h2>\n      <p className=\"text-gray-600 mb-8\">\n        We've sent you a confirmation email. Please check your inbox and click the link to verify your account.\n      </p>\n      <motion.button\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n        onClick={() => setMode('login')}\n        className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors\"\n      >\n        Back to Sign In\n      </motion.button>\n    </motion.div>\n  );\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.3 }}\n            className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\"\n            onClick={handleClose}\n          >\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9, y: 20 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0.9, y: 20 }}\n              transition={{ duration: 0.3 }}\n              onClick={(e) => e.stopPropagation()}\n              className=\"relative w-full max-w-md\"\n            >\n              <motion.button\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n                onClick={handleClose}\n                className=\"absolute -top-4 -right-4 bg-white rounded-full p-2 shadow-lg z-10\"\n              >\n                <X className=\"w-5 h-5 text-gray-600\" />\n              </motion.button>\n\n              <AnimatePresence mode=\"wait\">\n                {isSubmitted ? (\n                  renderSuccessMessage()\n                ) : mode === 'login' ? (\n                  renderLoginForm()\n                ) : mode === 'register' ? (\n                  renderRegisterForm()\n                ) : (\n                  renderLoginForm() // TODO: Add forgot password form\n                )}\n              </AnimatePresence>\n            </motion.div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default SupabaseAuthModal;","size_bytes":16790},"client/src/components/Auth/index.ts":{"content":"// Authentication Components Export\nexport { default as EnhancedLoginForm } from './EnhancedLoginForm';\nexport { default as EnhancedRegisterForm } from './EnhancedRegisterForm';\nexport { default as ProtectedRoute } from './ProtectedRoute';\nexport { default as SessionMonitor } from './SessionMonitor';\nexport { AuthProvider, useAuthContext, withAuth } from './AuthProvider';\nexport { default as AuthDemo } from './AuthDemo';\n\n// Re-export existing components for backward compatibility\nexport { default as AuthModal } from './AuthModal';\nexport { default as SupabaseAuthModal } from './SupabaseAuthModal';\nexport { default as LoginForm } from './LoginForm';\nexport { default as RegisterForm } from './RegisterForm';\nexport { default as ForgotPasswordForm } from './ForgotPasswordForm';","size_bytes":785},"client/src/components/Cart/CartSidebar.tsx":{"content":"import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { X, Plus, Minus, ShoppingBag, Trash2, ArrowRight } from 'lucide-react';\nimport { RootState } from '../../store';\nimport { removeFromCart, updateQuantity, clearCart, toggleCart } from '../../store/slices/cartSlice';\n\nconst CartSidebar: React.FC = () => {\n  const dispatch = useDispatch();\n  const { items, total, isOpen } = useSelector((state: RootState) => state.cart);\n\n  const handleUpdateQuantity = (id: string, quantity: number) => {\n    if (quantity <= 0) {\n      dispatch(removeFromCart(id));\n    } else {\n      dispatch(updateQuantity({ id, quantity }));\n    }\n  };\n\n  const handleRemoveItem = (id: string) => {\n    dispatch(removeFromCart(id));\n  };\n\n  const handleClearCart = () => {\n    dispatch(clearCart());\n  };\n\n  const handleCheckout = () => {\n    dispatch(toggleCart());\n    // Navigate to checkout - this will be handled by parent component\n    window.dispatchEvent(new CustomEvent('navigate-to-checkout'));\n  };\n\n  const cartItemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n  const tax = total * 0.18; // 18% tax\n  const shipping = total > 500 ? 0 : 50; // Free shipping over ₹500\n  const grandTotal = total + tax + shipping;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 z-40\"\n            onClick={() => dispatch(toggleCart())}\n          />\n          \n          {/* Sidebar */}\n          <motion.div\n            initial={{ x: '100%' }}\n            animate={{ x: 0 }}\n            exit={{ x: '100%' }}\n            transition={{ type: 'spring', damping: 25, stiffness: 200 }}\n            className=\"fixed right-0 top-0 h-full w-full max-w-md bg-white shadow-2xl z-50 flex flex-col\"\n          >\n            {/* Header */}\n            <div className=\"flex items-center justify-between p-6 border-b border-gray-200 bg-gray-50\">\n              <div className=\"flex items-center space-x-3\">\n                <ShoppingBag className=\"w-6 h-6 text-gray-700\" />\n                <h2 className=\"text-xl font-bold text-gray-900\">Shopping Cart</h2>\n                <span className=\"bg-yellow-600 text-white text-sm px-2 py-1 rounded-full font-medium\">\n                  {cartItemCount}\n                </span>\n              </div>\n              <button\n                onClick={() => dispatch(toggleCart())}\n                className=\"p-2 hover:bg-gray-200 rounded-full transition-colors\"\n              >\n                <X className=\"w-6 h-6 text-gray-600\" />\n              </button>\n            </div>\n\n            {/* Cart Items */}\n            <div className=\"flex-1 overflow-y-auto p-6\">\n              {items.length === 0 ? (\n                <div className=\"flex flex-col items-center justify-center h-full text-center\">\n                  <ShoppingBag className=\"w-20 h-20 text-gray-300 mb-4\" />\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Your cart is empty</h3>\n                  <p className=\"text-gray-600 mb-6\">Add some amazing products to get started</p>\n                  <button\n                    onClick={() => dispatch(toggleCart())}\n                    className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-3 rounded-xl font-semibold transition-colors\"\n                  >\n                    Continue Shopping\n                  </button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {items.map((item) => (\n                    <motion.div\n                      key={item.id}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -20 }}\n                      className=\"flex items-center space-x-4 p-4 bg-gray-50 rounded-xl\"\n                    >\n                      <img\n                        src={item.product.images[0]}\n                        alt={item.product.name}\n                        className=\"w-16 h-16 object-cover rounded-lg\"\n                      />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-gray-900 mb-1\">{item.product.name}</h4>\n                        <p className=\"text-yellow-600 font-bold\">₹{item.product.price.toLocaleString('en-IN')}</p>\n                        \n                        {/* Quantity Controls */}\n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <button\n                            onClick={() => handleUpdateQuantity(item.id, item.quantity - 1)}\n                            className=\"w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100 transition-colors\"\n                          >\n                            <Minus className=\"w-4 h-4 text-gray-600\" />\n                          </button>\n                          <span className=\"w-8 text-center font-semibold text-gray-900\">\n                            {item.quantity}\n                          </span>\n                          <button\n                            onClick={() => handleUpdateQuantity(item.id, item.quantity + 1)}\n                            className=\"w-8 h-8 rounded-full border border-gray-300 flex items-center justify-center hover:bg-gray-100 transition-colors\"\n                          >\n                            <Plus className=\"w-4 h-4 text-gray-600\" />\n                          </button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-gray-900\">\n                          ₹{(item.product.price * item.quantity).toLocaleString('en-IN')}\n                        </p>\n                        <button\n                          onClick={() => handleRemoveItem(item.id)}\n                          className=\"mt-2 p-1 text-red-500 hover:text-red-700 transition-colors\"\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </motion.div>\n                  ))}\n                  \n                  {/* Clear Cart Button */}\n                  {items.length > 0 && (\n                    <button\n                      onClick={handleClearCart}\n                      className=\"w-full py-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors text-sm font-medium\"\n                    >\n                      Clear All Items\n                    </button>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Cart Summary & Checkout */}\n            {items.length > 0 && (\n              <div className=\"border-t border-gray-200 p-6 bg-gray-50\">\n                <div className=\"space-y-3 mb-6\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Subtotal ({cartItemCount} items)</span>\n                    <span className=\"font-medium text-gray-900\">₹{total.toLocaleString('en-IN')}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Tax (18%)</span>\n                    <span className=\"font-medium text-gray-900\">₹{tax.toLocaleString('en-IN')}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-gray-600\">Shipping</span>\n                    <span className=\"font-medium text-gray-900\">\n                      {shipping === 0 ? 'Free' : `₹${shipping.toLocaleString('en-IN')}`}\n                    </span>\n                  </div>\n                  <div className=\"border-t pt-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-lg font-bold text-gray-900\">Total</span>\n                      <span className=\"text-xl font-bold text-yellow-600\">₹{grandTotal.toLocaleString('en-IN')}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {total < 500 && (\n                  <div className=\"mb-4 p-3 bg-blue-50 rounded-lg\">\n                    <p className=\"text-sm text-blue-700\">\n                      Add ₹{(500 - total).toLocaleString('en-IN')} more for free shipping!\n                    </p>\n                  </div>\n                )}\n                \n                <motion.button\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                  onClick={handleCheckout}\n                  className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-4 rounded-xl font-bold text-lg transition-colors flex items-center justify-center space-x-2 shadow-lg\"\n                >\n                  <span>Proceed to Checkout</span>\n                  <ArrowRight className=\"w-5 h-5\" />\n                </motion.button>\n              </div>\n            )}\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default CartSidebar;","size_bytes":9350},"client/src/components/Checkout/CheckoutForm.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../store';\nimport { clearCart } from '../../store/slices/cartSlice';\nimport { addOrder, OrderItem } from '../../store/slices/orderSlice';\nimport { User, Mail, Phone, MapPin, CreditCard, Truck, CheckCircle, ArrowLeft } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport StreamlinedPaymentMethod, { StreamlinedPaymentMethodType } from '../Payment/StreamlinedPaymentMethod';\nimport StreamlinedPaymentSection from '../Payment/StreamlinedPaymentSection';\nimport { generateTransactionId } from '../../utils/paymentUtils';\n\nconst checkoutSchema = z.object({\n  fullName: z.string().min(2, 'Full name must be at least 2 characters'),\n  email: z.string().email('Please enter a valid email address'),\n  phone: z.string().min(10, 'Phone number must be at least 10 digits').regex(/^\\d+$/, 'Phone number must contain only digits'),\n  address: z.string().min(10, 'Please enter a complete address'),\n  paymentMethod: z.enum(['upi', 'razorpay-upi', 'cod'], {\n    required_error: 'Please select a payment method',\n  }),\n});\n\ntype CheckoutData = z.infer<typeof checkoutSchema>;\n\ninterface CheckoutFormProps {\n  onBack: () => void;\n  product?: any; // For direct buy now from ₹1 deals\n}\n\nconst CheckoutForm: React.FC<CheckoutFormProps> = ({ onBack, product }) => {\n  const dispatch = useDispatch();\n  const { items, total } = useSelector((state: RootState) => state.cart);\n  const [currentStep, setCurrentStep] = useState(1); // 1: Details, 2: Payment, 3: Confirmation\n  const [orderData, setOrderData] = useState<any>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Helper function to get product price (handles both regular and deal products)\n  const getProductPrice = (prod: any) => {\n    return Number(prod.price) || Number(prod.dealPrice) || 0;\n  };\n\n  // Calculate order details\n  const orderItems: OrderItem[] = product ? \n    [{\n      id: product.id,\n      product: {\n        id: product.id,\n        name: product.name,\n        price: getProductPrice(product),\n        images: product.images || ['/placeholder.jpg'],\n      },\n      quantity: 1,\n      price: getProductPrice(product),\n    }] : items.map(item => ({\n      id: item.id,\n      product: {\n        id: item.product.id,\n        name: item.product.name,\n        price: getProductPrice(item.product),\n        images: item.product.images || ['/placeholder.jpg'],\n      },\n      quantity: item.quantity || 1,\n      price: getProductPrice(item.product),\n    }));\n\n  const orderTotal = product ? getProductPrice(product) : total;\n  const tax = orderTotal * 0.18;\n  const shipping = orderTotal > 500 ? 0 : 50;\n  const grandTotal = orderTotal + tax + shipping;\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isValid },\n    watch,\n  } = useForm<CheckoutData>({\n    resolver: zodResolver(checkoutSchema),\n    mode: 'onChange',\n  });\n\n  const selectedPaymentMethod = watch('paymentMethod');\n\n  const onSubmit = async (data: CheckoutData) => {\n    setOrderData(data);\n    if (data.paymentMethod === 'cod') {\n      // For COD payments, skip payment step and go directly to confirmation\n      handleOrderConfirmation(data, {\n        success: true,\n        transactionId: generateTransactionId(),\n        paymentMethod: 'Cash on Delivery',\n        amount: grandTotal,\n      });\n    } else {\n      setCurrentStep(2); // Go to payment step\n    }\n  };\n\n  const handlePaymentSuccess = (paymentResult: any) => {\n    console.log('Payment successful:', paymentResult);\n    if (orderData) {\n      handleOrderConfirmation(orderData, paymentResult);\n    }\n  };\n\n  const handlePaymentError = (error: string) => {\n    console.error('Payment failed:', error);\n    alert('Payment failed. Please try again.');\n    // Keep user on payment step to retry\n  };\n  const handleOrderConfirmation = (customerData: CheckoutData, paymentResult: any) => {\n    console.log('Creating order with data:', { customerData, paymentResult });\n    setIsProcessing(true);\n    \n    // Create order\n    const newOrder = {\n      id: `ORD-${Date.now()}`,\n      items: orderItems,\n      total: grandTotal,\n      status: 'confirmed' as const,\n      shippingAddress: {\n        fullName: customerData.fullName,\n        email: customerData.email,\n        phone: customerData.phone,\n        address: customerData.address,\n        city: 'Not specified',\n        state: 'Not specified', \n        zipCode: 'Not specified',\n        country: 'India',\n      },\n      paymentMethod: customerData.paymentMethod,\n      paymentResult: paymentResult,\n      transactionId: paymentResult.transactionId || generateTransactionId(),\n      createdAt: new Date().toISOString(),\n      estimatedDelivery: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days from now\n    };\n\n    console.log('Adding order to store:', newOrder);\n    dispatch(addOrder(newOrder));\n    \n    // Clear cart if it was a cart checkout\n    if (!product) {\n      console.log('Clearing cart after successful order');\n      dispatch(clearCart());\n    }\n    \n    setTimeout(() => {\n      setCurrentStep(3); // Show confirmation\n      setIsProcessing(false);\n    }, 2000);\n  };\n\n  const renderOrderSummary = () => (\n    <div className=\"bg-gray-50 rounded-xl p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Order Summary</h3>\n      \n      <div className=\"space-y-3 mb-6\">\n        {orderItems.map((item) => (\n          <div key={item.id} className=\"flex items-center space-x-3\">\n            <img\n              src={item.product.images[0]}\n              alt={item.product.name}\n              className=\"w-12 h-12 object-cover rounded-lg\"\n            />\n            <div className=\"flex-1\">\n              <h4 className=\"font-medium text-gray-900 text-sm\">{item.product.name}</h4>\n              <p className=\"text-xs text-gray-600\">Qty: {item.quantity}</p>\n            </div>\n            <p className=\"font-medium text-sm text-gray-900\">\n              ₹{(item.price * item.quantity).toLocaleString('en-IN')}\n            </p>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"border-t border-gray-200 pt-4 space-y-2\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600\">Subtotal</span>\n          <span className=\"text-gray-900\">₹{orderTotal.toLocaleString('en-IN')}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600\">Tax (18%)</span>\n          <span className=\"text-gray-900\">₹{tax.toLocaleString('en-IN')}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600\">Shipping</span>\n          <span className=\"text-gray-900\">\n            {shipping === 0 ? 'Free' : `₹${shipping.toLocaleString('en-IN')}`}\n          </span>\n        </div>\n        <div className=\"border-t pt-2\">\n          <div className=\"flex justify-between text-lg font-bold\">\n            <span className=\"text-gray-900\">Total</span>\n            <span className=\"text-yellow-600\">₹{grandTotal.toLocaleString('en-IN')}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderCustomerDetailsForm = () => (\n    <motion.div\n      initial={{ opacity: 0, x: 20 }}\n      animate={{ opacity: 1, x: 0 }}\n      exit={{ opacity: 0, x: -20 }}\n      className=\"space-y-6\"\n    >\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">Checkout Details</h2>\n        <button\n          onClick={onBack}\n          className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back</span>\n        </button>\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Customer Information */}\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Customer Information</h3>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Full Name *\n            </label>\n            <div className=\"relative\">\n              <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                {...register('fullName')}\n                type=\"text\"\n                className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                  errors.fullName \n                    ? 'border-red-300 focus:ring-red-500' \n                    : 'border-gray-300 focus:ring-yellow-500'\n                }`}\n                placeholder=\"Enter your full name\"\n              />\n            </div>\n            {errors.fullName && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.fullName.message}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Email Address *\n            </label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                {...register('email')}\n                type=\"email\"\n                className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                  errors.email \n                    ? 'border-red-300 focus:ring-red-500' \n                    : 'border-gray-300 focus:ring-yellow-500'\n                }`}\n                placeholder=\"Enter your email address\"\n              />\n            </div>\n            {errors.email && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.email.message}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Mobile Number *\n            </label>\n            <div className=\"relative\">\n              <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n              <input\n                {...register('phone')}\n                type=\"tel\"\n                className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                  errors.phone \n                    ? 'border-red-300 focus:ring-red-500' \n                    : 'border-gray-300 focus:ring-yellow-500'\n                }`}\n                placeholder=\"Enter your mobile number\"\n              />\n            </div>\n            {errors.phone && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.phone.message}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Complete Address *\n            </label>\n            <div className=\"relative\">\n              <MapPin className=\"absolute left-3 top-3 w-5 h-5 text-gray-400\" />\n              <textarea\n                {...register('address')}\n                rows={3}\n                className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors resize-none ${\n                  errors.address \n                    ? 'border-red-300 focus:ring-red-500' \n                    : 'border-gray-300 focus:ring-yellow-500'\n                }`}\n                placeholder=\"Enter your complete address including city, state, and PIN code\"\n              />\n            </div>\n            {errors.address && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.address.message}</p>\n            )}\n          </div>\n        </div>\n\n        {/* Payment Method Selection */}\n        <div className=\"space-y-4\">\n          <StreamlinedPaymentMethod\n            selectedMethod={selectedPaymentMethod as StreamlinedPaymentMethodType}\n            onMethodChange={(method) => {\n              register('paymentMethod').onChange({ target: { value: method } });\n            }}\n          />\n          {errors.paymentMethod && (\n            <p className=\"text-sm text-red-600\">{errors.paymentMethod.message}</p>\n          )}\n        </div>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          type=\"submit\"\n          disabled={!isValid}\n          className={`w-full py-4 rounded-xl font-semibold text-lg transition-colors ${\n            isValid\n              ? 'bg-yellow-600 hover:bg-yellow-700 text-white'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          {selectedPaymentMethod === 'cod' ? 'Confirm Order' : 'Continue to Payment'}\n        </motion.button>\n      </form>\n    </motion.div>\n  );\n\n  const renderPaymentStep = () => (\n    <motion.div\n      initial={{ opacity: 0, x: 20 }}\n      animate={{ opacity: 1, x: 0 }}\n      exit={{ opacity: 0, x: -20 }}\n      className=\"space-y-6\"\n    >\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">Payment</h2>\n        <button\n          onClick={() => setCurrentStep(1)}\n          className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back</span>\n        </button>\n      </div>\n\n      <StreamlinedPaymentSection\n        amount={grandTotal}\n        paymentMethod={selectedPaymentMethod as StreamlinedPaymentMethodType}\n        customerInfo={{\n          name: orderData?.fullName || '',\n          email: orderData?.email || '',\n          contact: orderData?.phone || '',\n        }}\n        orderId={`ORD-${Date.now()}`}\n        shippingAddress={orderData}\n        onPaymentSuccess={handlePaymentSuccess}\n        onPaymentError={handlePaymentError}\n      />\n    </motion.div>\n  );\n\n  const renderConfirmation = () => (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      className=\"text-center py-12\"\n    >\n      <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n        <CheckCircle className=\"w-10 h-10 text-green-600\" />\n      </div>\n      <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Order Confirmed!</h2>\n      <p className=\"text-xl text-gray-600 mb-6\">\n        Thank you for your purchase. Your order has been successfully placed.\n      </p>\n      \n      <div className=\"bg-gray-50 rounded-xl p-6 max-w-md mx-auto mb-6\">\n        <h3 className=\"font-semibold text-gray-900 mb-4\">Order Details</h3>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Order ID:</span>\n            <span className=\"font-mono\">{orderData?.transactionId || 'ORD-' + Date.now()}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Payment Method:</span>\n            <span>\n              {orderData?.paymentMethod === 'cod' ? 'Cash on Delivery' : \n               orderData?.paymentMethod === 'test' ? 'Test Payment' : \n               orderData?.paymentMethod?.toUpperCase()}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Total Amount:</span>\n            <span className=\"font-semibold\">₹{grandTotal.toLocaleString('en-IN')}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Estimated Delivery:</span>\n            <span>5-7 business days</span>\n          </div>\n        </div>\n      </div>\n      \n      <p className=\"text-gray-500 mb-8\">\n        You'll receive a confirmation email shortly with tracking information.\n      </p>\n      \n      <div className=\"space-y-3\">\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={() => window.dispatchEvent(new CustomEvent('navigate-to-orders'))}\n          className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white px-8 py-3 rounded-xl font-semibold transition-colors\"\n        >\n          View My Orders\n        </motion.button>\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={onBack}\n          className=\"w-full bg-gray-200 hover:bg-gray-300 text-gray-800 px-8 py-3 rounded-xl font-semibold transition-colors\"\n        >\n          Continue Shopping\n        </motion.button>\n      </div>\n    </motion.div>\n  );\n\n  if (isProcessing) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-yellow-200 border-t-yellow-600 rounded-full animate-spin mx-auto mb-4\"></div>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Processing Your Order</h3>\n          <p className=\"text-gray-600\">Please wait while we confirm your order...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\n              {currentStep === 1 && renderCustomerDetailsForm()}\n              {currentStep === 2 && renderPaymentStep()}\n              {currentStep === 3 && renderConfirmation()}\n            </div>\n          </div>\n\n          {currentStep < 3 && (\n            <div className=\"lg:col-span-1\">\n              {renderOrderSummary()}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckoutForm;","size_bytes":17979},"client/src/components/Checkout/CheckoutPage.tsx":{"content":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../store';\nimport { clearCart, toggleCart } from '../../store/slices/cartSlice';\nimport { addOrder } from '../../store/slices/orderSlice';\nimport { ArrowLeft, CheckCircle, Package, Smartphone } from 'lucide-react';\nimport StreamlinedPaymentMethod, { StreamlinedPaymentMethodType } from '../Payment/StreamlinedPaymentMethod';\nimport StreamlinedPaymentSection from '../Payment/StreamlinedPaymentSection';\nimport { generateTransactionId, generatePaymentSummary } from '../../utils/paymentUtils';\nimport PaymentConfirmation from './PaymentConfirmation';\nimport type { Product } from '@shared/schema';\n\ninterface CheckoutPageProps {\n  product?: Product;\n  onBack: () => void;\n  onComplete: () => void;\n}\n\ninterface ShippingAddress {\n  fullName: string;\n  email: string;\n  phone: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n}\n\nconst CheckoutPage: React.FC<CheckoutPageProps> = ({ product, onBack, onComplete }) => {\n  const dispatch = useDispatch();\n  const { items, total } = useSelector((state: RootState) => state.cart);\n  const [currentStep, setCurrentStep] = useState(1); // 1: Shipping, 2: Payment, 3: Confirmation, 4: Success\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<StreamlinedPaymentMethodType>('upi');\n  const [isPaymentComplete, setIsPaymentComplete] = useState(false);\n  const [paymentResult, setPaymentResult] = useState<any>(null);\n  const [orderData, setOrderData] = useState<any>(null);\n  const [transactionId] = useState(generateTransactionId());\n  \n  // Calculate totals\n  const orderAmount = product ? product.price : total;\n  const paymentSummary = generatePaymentSummary(orderAmount);\n\n  const [shippingAddress, setShippingAddress] = useState<ShippingAddress>({\n    fullName: '',\n    email: '',\n    phone: '',\n    address: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    country: 'United States'\n  });\n\n  const handlePaymentSuccess = (result: any) => {\n    setPaymentResult(result);\n    \n    // Prepare order data for confirmation\n    const orderItems = product ? \n      [{\n        id: product.id,\n        product: {\n          id: product.id,\n          name: product.name,\n          price: product.price,\n          images: product.images,\n        },\n        quantity: 1,\n        price: product.price,\n      }] : \n      items.map(item => ({\n        id: item.id,\n        product: {\n          id: item.product.id,\n          name: item.product.name,\n          price: item.product.price,\n          images: item.product.images,\n        },\n        quantity: item.quantity,\n        price: item.product.price * item.quantity,\n      }));\n\n    setOrderData({\n      items: orderItems,\n      total: paymentSummary.total,\n      shippingAddress,\n      paymentMethod: selectedPaymentMethod,\n      paymentResult: result,\n    });\n    \n    setCurrentStep(3); // Move to confirmation step\n  };\n\n  const handleOrderConfirmation = () => {\n    // Create order and add to orders list\n    const newOrder = {\n      id: `ORD-${Date.now()}`,\n      items: orderData.items,\n      total: orderData.total,\n      status: 'confirmed' as const,\n      shippingAddress: orderData.shippingAddress,\n      paymentMethod: orderData.paymentMethod,\n      paymentResult: orderData.paymentResult,\n      transactionId: orderData.paymentResult.transactionId,\n      createdAt: new Date().toISOString(),\n      estimatedDelivery: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days from now\n    };\n\n    dispatch(addOrder(newOrder));\n    \n    // Clear cart if it was a cart checkout\n    if (!product) {\n      dispatch(clearCart());\n    }\n    \n    setIsPaymentComplete(true);\n    setTimeout(() => {\n      onComplete();\n    }, 3000);\n  };\n\n  const handlePaymentError = (error: string) => {\n    alert(`Payment failed: ${error}`);\n  };\n\n  const handleShippingChange = (field: keyof ShippingAddress, value: string) => {\n    setShippingAddress(prev => ({ ...prev, [field]: value }));\n  };\n\n  const renderStepIndicator = () => (\n    <div className=\"flex items-center justify-center mb-8\">\n      {[1, 2, 3, 4].map((step) => (\n        <React.Fragment key={step}>\n          <div className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${\n            currentStep >= step ? 'bg-yellow-600 text-white' : 'bg-gray-200 text-gray-600'\n          }`}>\n            {step === 1 && <Package className=\"w-5 h-5\" />}\n            {step === 2 && <Smartphone className=\"w-5 h-5\" />}\n            {step === 3 && <CheckCircle className=\"w-5 h-5\" />}\n            {step === 4 && <CheckCircle className=\"w-5 h-5\" />}\n          </div>\n          {step < 4 && (\n            <div className={`w-16 h-1 mx-2 transition-colors ${\n              currentStep > step ? 'bg-yellow-600' : 'bg-gray-200'\n            }`} />\n          )}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n\n  const renderShippingForm = () => (\n    <motion.div\n      initial={{ opacity: 0, x: 20 }}\n      animate={{ opacity: 1, x: 0 }}\n      exit={{ opacity: 0, x: -20 }}\n      className=\"space-y-6\"\n    >\n      <h2 className=\"text-2xl font-bold text-gray-900\">Shipping Information</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Full Name *\n          </label>\n          <input\n            type=\"text\"\n            value={shippingAddress.fullName}\n            onChange={(e) => handleShippingChange('fullName', e.target.value)}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Email Address *\n          </label>\n          <input\n            type=\"email\"\n            value={shippingAddress.email}\n            onChange={(e) => handleShippingChange('email', e.target.value)}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Phone Number *\n          </label>\n          <input\n            type=\"tel\"\n            value={shippingAddress.phone}\n            onChange={(e) => handleShippingChange('phone', e.target.value)}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Country *\n          </label>\n          <select\n            value={shippingAddress.country}\n            onChange={(e) => handleShippingChange('country', e.target.value)}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n          >\n            <option value=\"United States\">United States</option>\n            <option value=\"Canada\">Canada</option>\n            <option value=\"United Kingdom\">United Kingdom</option>\n            <option value=\"Australia\">Australia</option>\n          </select>\n        </div>\n\n        <div className=\"md:col-span-2\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Street Address *\n          </label>\n          <input\n            type=\"text\"\n            value={shippingAddress.address}\n            onChange={(e) => handleShippingChange('address', e.target.value)}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            City *\n          </label>\n          <input\n            type=\"text\"\n            value={shippingAddress.city}\n            onChange={(e) => handleShippingChange('city', e.target.value)}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            State/Province *\n          </label>\n          <input\n            type=\"text\"\n            value={shippingAddress.state}\n            onChange={(e) => handleShippingChange('state', e.target.value)}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n            required\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            ZIP/Postal Code *\n          </label>\n          <input\n            type=\"text\"\n            value={shippingAddress.zipCode}\n            onChange={(e) => handleShippingChange('zipCode', e.target.value)}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n            required\n          />\n        </div>\n      </div>\n    </motion.div>\n  );\n\n  const renderPaymentForm = () => (\n    <motion.div\n      initial={{ opacity: 0, x: 20 }}\n      animate={{ opacity: 1, x: 0 }}\n      exit={{ opacity: 0, x: -20 }}\n      className=\"space-y-6\"\n    >\n      <StreamlinedPaymentMethod\n        selectedMethod={selectedPaymentMethod}\n        onMethodChange={setSelectedPaymentMethod}\n      />\n\n      <div className=\"mt-8\">\n        <StreamlinedPaymentSection\n          amount={paymentSummary.total}\n          paymentMethod={selectedPaymentMethod}\n          customerInfo={{\n            name: shippingAddress.fullName,\n            email: shippingAddress.email,\n            contact: shippingAddress.phone,\n          }}\n          orderId={transactionId}\n          shippingAddress={shippingAddress}\n          onPaymentSuccess={handlePaymentSuccess}\n          onPaymentError={handlePaymentError}\n        />\n      </div>\n    </motion.div>\n  );\n\n  const renderConfirmationStep = () => (\n    <PaymentConfirmation\n      orderData={orderData}\n      onConfirm={handleOrderConfirmation}\n      onEdit={() => setCurrentStep(1)}\n    />\n  );\n\n  const renderOrderSummary = () => (\n    <div className=\"bg-gray-50 rounded-xl p-6 sticky top-4\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Order Summary</h3>\n      \n      <div className=\"space-y-3 mb-6\">\n        {product ? (\n          <div className=\"flex items-center space-x-3\">\n            <img\n              src={product.images[0]}\n              alt={product.name}\n              className=\"w-16 h-16 object-cover rounded-lg\"\n            />\n            <div className=\"flex-1\">\n              <h4 className=\"font-medium text-gray-900\">{product.name}</h4>\n              <p className=\"text-sm text-gray-600\">Qty: 1</p>\n            </div>\n            <p className=\"font-medium\">${product.price.toFixed(2)}</p>\n          </div>\n        ) : (\n          items.map((item) => (\n            <div key={item.id} className=\"flex items-center space-x-3\">\n              <img\n                src={item.product.images[0]}\n                alt={item.product.name}\n                className=\"w-12 h-12 object-cover rounded-lg\"\n              />\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-gray-900 text-sm\">{item.product.name}</h4>\n                <p className=\"text-xs text-gray-600\">Qty: {item.quantity}</p>\n              </div>\n              <p className=\"font-medium text-sm\">\n                ${(item.product.price * item.quantity).toFixed(2)}\n              </p>\n            </div>\n          ))\n        )}\n      </div>\n\n      <div className=\"border-t border-gray-200 pt-4 space-y-2\">\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600\">Subtotal</span>\n          <span className=\"text-gray-900\">${paymentSummary.subtotal.toFixed(2)}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600\">Tax</span>\n          <span className=\"text-gray-900\">${paymentSummary.tax.toFixed(2)}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600\">Shipping</span>\n          <span className=\"text-gray-900\">\n            {paymentSummary.shipping === 0 ? 'Free' : `$${paymentSummary.shipping.toFixed(2)}`}\n          </span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span className=\"text-gray-600\">Processing Fee</span>\n          <span className=\"text-gray-900\">${paymentSummary.processingFee.toFixed(2)}</span>\n        </div>\n        <div className=\"border-t pt-2\">\n          <div className=\"flex justify-between text-lg font-semibold\">\n            <span className=\"text-gray-900\">Total</span>\n            <span className=\"text-gray-900\">${paymentSummary.total.toFixed(2)}</span>\n          </div>\n        </div>\n      </div>\n\n      {orderAmount < 100 && (\n        <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n          <p className=\"text-sm text-blue-700\">\n            Add ${(100 - orderAmount).toFixed(2)} more for free shipping!\n          </p>\n        </div>\n      )}\n    </div>\n  );\n\n  const renderSuccessPage = () => (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      className=\"text-center py-12\"\n    >\n      <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n        <CheckCircle className=\"w-10 h-10 text-green-600\" />\n      </div>\n      <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Payment Successful!</h2>\n      <p className=\"text-xl text-gray-600 mb-6\">\n        Thank you for your purchase. Your order has been confirmed.\n      </p>\n      \n      {paymentResult && (\n        <div className=\"bg-gray-50 rounded-xl p-6 max-w-md mx-auto mb-6\">\n          <h3 className=\"font-semibold text-gray-900 mb-4\">Transaction Details</h3>\n          <div className=\"space-y-2 text-sm\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Transaction ID:</span>\n              <span className=\"font-mono\">{paymentResult.transactionId}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Payment Method:</span>\n              <span>{paymentResult.paymentMethod}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Amount:</span>\n              <span className=\"font-semibold\">₹{paymentResult.amount?.toLocaleString('en-IN')}</span>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <p className=\"text-gray-500 mb-8\">\n        You'll receive a confirmation email shortly with your order details.\n      </p>\n      \n      <motion.button\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={onComplete}\n        className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-8 py-3 rounded-xl font-semibold transition-colors\"\n      >\n        Continue Shopping\n      </motion.button>\n    </motion.div>\n  );\n\n  if (isPaymentComplete) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 py-8\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {renderSuccessPage()}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center mb-8\">\n          <motion.button\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n            onClick={onBack}\n            className=\"flex items-center text-gray-600 hover:text-gray-900 transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5 mr-2\" />\n            Back\n          </motion.button>\n        </div>\n\n        {renderStepIndicator()}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          <div className=\"lg:col-span-2\">\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\n              <AnimatePresence mode=\"wait\">\n                {currentStep === 1 && renderShippingForm()}\n                {currentStep === 2 && renderPaymentForm()}\n                {currentStep === 3 && renderConfirmationStep()}\n              </AnimatePresence>\n\n              {currentStep < 2 && (\n                <div className=\"flex justify-between mt-8\">\n                  <button\n                    onClick={() => setCurrentStep(Math.max(1, currentStep - 1))}\n                    disabled={currentStep === 1}\n                    className=\"px-6 py-3 border border-gray-300 rounded-xl text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                  >\n                    Back\n                  </button>\n                  \n                  <motion.button\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={() => setCurrentStep(currentStep + 1)}\n                    className=\"px-6 py-3 bg-yellow-600 text-white rounded-xl hover:bg-yellow-700 transition-colors font-semibold\"\n                  >\n                    Continue to Payment\n                  </motion.button>\n                </div>\n              )}\n              \n              {currentStep === 2 && (\n                <div className=\"flex justify-between mt-8\">\n                  <button\n                    onClick={() => setCurrentStep(1)}\n                    className=\"px-6 py-3 border border-gray-300 rounded-xl text-gray-700 hover:bg-gray-50 transition-colors\"\n                  >\n                    Back to Shipping\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {currentStep < 3 && (\n            <div className=\"lg:col-span-1\">\n              {renderOrderSummary()}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CheckoutPage;","size_bytes":18473},"client/src/components/Checkout/PaymentConfirmation.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { CheckCircle, Package, CreditCard, MapPin, Clock, ArrowRight, Edit } from 'lucide-react';\n\ninterface PaymentConfirmationProps {\n  orderData: {\n    items: any[];\n    total: number;\n    shippingAddress: any;\n    paymentMethod: string;\n    paymentResult: any;\n  };\n  onConfirm: () => void;\n  onEdit: () => void;\n}\n\nconst PaymentConfirmation: React.FC<PaymentConfirmationProps> = ({\n  orderData,\n  onConfirm,\n  onEdit,\n}) => {\n  const [isConfirming, setIsConfirming] = useState(false);\n\n  const handleConfirm = async () => {\n    setIsConfirming(true);\n    // Simulate order processing\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    onConfirm();\n  };\n\n  const formatPaymentMethod = (method: string) => {\n    switch (method) {\n      case 'card':\n        return `Card ending in ${orderData.paymentResult?.last4 || '****'}`;\n      case 'paypal':\n        return 'PayPal';\n      case 'bank':\n        return 'Bank Transfer';\n      case 'cod':\n        return 'Cash on Delivery';\n      default:\n        return method;\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"max-w-2xl mx-auto space-y-6\"\n    >\n      <div className=\"text-center\">\n        <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <CheckCircle className=\"w-10 h-10 text-green-600\" />\n        </div>\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Confirm Your Order</h2>\n        <p className=\"text-gray-600\">\n          Please review your order details before final confirmation\n        </p>\n      </div>\n\n      {/* Order Summary */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Order Summary</h3>\n          <button\n            onClick={onEdit}\n            className=\"flex items-center space-x-1 text-yellow-600 hover:text-yellow-700 transition-colors\"\n          >\n            <Edit className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Edit</span>\n          </button>\n        </div>\n\n        {/* Items */}\n        <div className=\"space-y-3 mb-6\">\n          {orderData.items.map((item, index) => (\n            <div key={index} className=\"flex items-center space-x-4 p-3 bg-gray-50 rounded-lg\">\n              <img\n                src={item.product?.images?.[0] || item.images?.[0]}\n                alt={item.product?.name || item.name}\n                className=\"w-16 h-16 object-cover rounded-lg\"\n              />\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-gray-900\">{item.product?.name || item.name}</h4>\n                <p className=\"text-sm text-gray-600\">Quantity: {item.quantity || 1}</p>\n              </div>\n              <p className=\"font-semibold text-gray-900\">\n                ₹{((item.product?.price || item.price) * (item.quantity || 1)).toLocaleString('en-IN')}\n              </p>\n            </div>\n          ))}\n        </div>\n\n        {/* Total */}\n        <div className=\"border-t pt-4\">\n          <div className=\"flex justify-between text-xl font-bold text-gray-900\">\n            <span>Total Amount</span>\n            <span>₹{orderData.total.toLocaleString('en-IN')}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Shipping Address */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <MapPin className=\"w-5 h-5 text-gray-600\" />\n          <h3 className=\"text-lg font-semibold text-gray-900\">Shipping Address</h3>\n        </div>\n        <div className=\"text-gray-700\">\n          <p className=\"font-medium\">{orderData.shippingAddress.fullName}</p>\n          <p>{orderData.shippingAddress.address}</p>\n          <p>{orderData.shippingAddress.city}, {orderData.shippingAddress.state} {orderData.shippingAddress.zipCode}</p>\n          <p>{orderData.shippingAddress.phone}</p>\n        </div>\n      </div>\n\n      {/* Payment Method */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <CreditCard className=\"w-5 h-5 text-gray-600\" />\n          <h3 className=\"text-lg font-semibold text-gray-900\">Payment Method</h3>\n        </div>\n        <p className=\"text-gray-700\">{formatPaymentMethod(orderData.paymentMethod)}</p>\n        {orderData.paymentResult?.transactionId && (\n          <p className=\"text-sm text-gray-500 mt-1\">\n            Transaction ID: {orderData.paymentResult.transactionId}\n          </p>\n        )}\n      </div>\n\n      {/* Delivery Information */}\n      <div className=\"bg-blue-50 rounded-xl p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <Clock className=\"w-5 h-5 text-blue-600\" />\n          <div>\n            <h4 className=\"font-medium text-blue-900\">Estimated Delivery</h4>\n            <p className=\"text-sm text-blue-800\">\n              Your order will be delivered within 3-5 business days\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Confirmation Button */}\n      <motion.button\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n        onClick={handleConfirm}\n        disabled={isConfirming}\n        className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-xl font-semibold text-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n      >\n        {isConfirming ? (\n          <>\n            <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n            <span>Placing Order...</span>\n          </>\n        ) : (\n          <>\n            <Package className=\"w-5 h-5\" />\n            <span>Confirm & Place Order</span>\n            <ArrowRight className=\"w-5 h-5\" />\n          </>\n        )}\n      </motion.button>\n\n      <div className=\"text-center\">\n        <p className=\"text-sm text-gray-500\">\n          By confirming, you agree to our terms and conditions\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default PaymentConfirmation;","size_bytes":6331},"client/src/components/Checkout/StreamlinedCheckout.tsx":{"content":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { ArrowLeft, ArrowRight, User, Mail, Phone, MapPin, CheckCircle, AlertCircle } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useDispatch } from 'react-redux';\nimport { addOrder } from '../../store/slices/orderSlice';\nimport { clearCart } from '../../store/slices/cartSlice';\nimport StreamlinedPaymentMethod, { StreamlinedPaymentMethodType } from '../Payment/StreamlinedPaymentMethod';\nimport StreamlinedPaymentSection from '../Payment/StreamlinedPaymentSection';\n\nconst shippingSchema = z.object({\n  fullName: z.string().min(2, 'Full name is required'),\n  email: z.string().email('Valid email address is required'),\n  phone: z.string().min(10, 'Valid phone number is required').regex(/^\\d+$/, 'Phone number must contain only digits'),\n  address: z.string().min(10, 'Complete address is required'),\n  city: z.string().min(2, 'City is required'),\n  state: z.string().min(2, 'State is required'),\n  zipCode: z.string().min(5, 'ZIP code is required'),\n});\n\ntype ShippingData = z.infer<typeof shippingSchema>;\n\ninterface StreamlinedCheckoutProps {\n  product?: any;\n  cartItems?: any[];\n  onBack: () => void;\n  onComplete: () => void;\n}\n\n\nconst StreamlinedCheckout: React.FC<StreamlinedCheckoutProps> = ({ \n  product, \n  cartItems = [], \n  onBack, \n  onComplete \n}) => {\n  const [currentStep, setCurrentStep] = useState(1); // 1: Shipping, 2: Payment Selection, 3: Payment Processing, 4: Confirmation\n  const [shippingData, setShippingData] = useState<ShippingData | null>(null);\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<StreamlinedPaymentMethodType>('upi');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentError, setPaymentError] = useState<string | null>(null);\n  const [orderConfirmed, setOrderConfirmed] = useState(false);\n  const [orderId] = useState(`ORD-${Date.now()}`); // Generate orderId once and keep it stable\n  const dispatch = useDispatch();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isValid },\n  } = useForm<ShippingData>({\n    resolver: zodResolver(shippingSchema),\n    mode: 'onChange',\n  });\n\n  // Calculate order details - ONLY base product price\n  const orderItems = product ? \n    [{\n      id: product.id,\n      product: product,\n      quantity: 1,\n    }] : cartItems;\n\n  // Fix for both regular products and deal products\n  const getProductPrice = (prod: any) => {\n    return Number(prod.price) || Number(prod.dealPrice) || 0;\n  };\n  \n  const baseAmount = product ? getProductPrice(product) : \n    cartItems.reduce((sum, item) => sum + (getProductPrice(item.product) * (item.quantity || 0)), 0);\n\n  // Final amount is ONLY the base price - no taxes, shipping, or fees\n  const finalAmount = baseAmount || 0;\n\n  console.log('Checkout calculation debug:', { \n    product: product?.name, \n    productPrice: product?.price,\n    productPriceType: typeof product?.price,\n    cartItems: cartItems?.length, \n    baseAmount, \n    finalAmount,\n    fullProduct: product \n  });\n\n  const onShippingSubmit = (data: ShippingData) => {\n    setShippingData(data);\n    setCurrentStep(2); // Move to payment method selection\n  };\n\n  const handlePaymentMethodSelection = (method: StreamlinedPaymentMethodType) => {\n    console.log('Payment method selection triggered:', method);\n    setSelectedPaymentMethod(method);\n    setPaymentError(null);\n    \n    // For COD, skip payment processing and go directly to confirmation\n    if (method === 'cod') {\n      console.log('COD selected, processing COD payment...');\n      handleCODPayment();\n    } else {\n      console.log('Moving to payment processing step for method:', method);\n      setCurrentStep(3); // Move to payment processing\n    }\n  };\n\n  const handleCODPayment = () => {\n    const codResult = {\n      success: true,\n      transactionId: `COD_${Date.now()}_${Math.random().toString(36).substring(2, 8).toUpperCase()}`,\n      paymentMethod: 'Cash on Delivery',\n      amount: finalAmount,\n      timestamp: Date.now(),\n    };\n    handlePaymentSuccess(codResult);\n  };\n\n  const handlePaymentSuccess = (paymentResult: any) => {\n    console.log('Payment successful, creating order...', { paymentResult, finalAmount, orderItems });\n    setIsProcessing(true);\n    \n    // Create order with comprehensive details\n    const newOrder = {\n      id: paymentResult.orderId || `ORD-${Date.now()}`,\n      items: orderItems,\n      total: finalAmount,\n      status: 'confirmed' as const,\n      shippingAddress: { ...shippingData!, country: 'India' },\n      paymentMethod: paymentResult.paymentMethod || (\n        selectedPaymentMethod === 'upi' ? 'UPI' :\n        selectedPaymentMethod === 'razorpay-upi' ? 'UPI via Razorpay' :\n        selectedPaymentMethod === 'cod' ? 'Cash on Delivery' : 'Unknown'\n      ),\n      paymentResult: paymentResult,\n      transactionId: paymentResult.transactionId,\n      razorpayPaymentId: paymentResult.razorpayPaymentId,\n      razorpayOrderId: paymentResult.razorpayOrderId,\n      razorpaySignature: paymentResult.razorpaySignature,\n      createdAt: new Date().toISOString(),\n      estimatedDelivery: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(),\n    };\n\n    console.log('Dispatching order to Redux store:', newOrder);\n    dispatch(addOrder(newOrder));\n    \n    // Clear cart if it was a cart checkout\n    if (!product) {\n      console.log('Clearing cart after order creation');\n      dispatch(clearCart());\n    }\n    \n    setTimeout(() => {\n      setOrderConfirmed(true);\n      setCurrentStep(4);\n      setIsProcessing(false);\n      console.log('Order confirmation complete');\n    }, 2000);\n  };\n\n  const handlePaymentError = (error: string) => {\n    setPaymentError(error);\n    setIsProcessing(false);\n    setCurrentStep(2); // Go back to payment method selection\n  };\n\n  const renderShippingForm = () => (\n    <motion.div\n      initial={{ opacity: 0, x: 20 }}\n      animate={{ opacity: 1, x: 0 }}\n      className=\"space-y-6\"\n    >\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900\">Shipping Information</h2>\n        <button\n          onClick={onBack}\n          className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back</span>\n        </button>\n      </div>\n\n      <div className=\"bg-blue-50 rounded-xl p-4\">\n        <p className=\"text-blue-800 text-sm\">\n          <strong>All fields are mandatory.</strong> Please fill in complete information to proceed.\n        </p>\n      </div>\n\n      <form onSubmit={handleSubmit(onShippingSubmit)} className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Full Name *\n          </label>\n          <div className=\"relative\">\n            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('fullName')}\n              type=\"text\"\n              className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.fullName \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Enter your full name\"\n            />\n          </div>\n          {errors.fullName && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.fullName.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Email Address *\n          </label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('email')}\n              type=\"email\"\n              className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.email \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Enter your email address\"\n            />\n          </div>\n          {errors.email && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.email.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Phone Number *\n          </label>\n          <div className=\"relative\">\n            <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n            <input\n              {...register('phone')}\n              type=\"tel\"\n              className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.phone \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Enter your phone number\"\n            />\n          </div>\n          {errors.phone && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.phone.message}</p>\n          )}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Complete Address *\n          </label>\n          <div className=\"relative\">\n            <MapPin className=\"absolute left-3 top-3 w-5 h-5 text-gray-400\" />\n            <textarea\n              {...register('address')}\n              rows={3}\n              className={`w-full pl-12 pr-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors resize-none ${\n                errors.address \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"Enter your complete address\"\n            />\n          </div>\n          {errors.address && (\n            <p className=\"mt-1 text-sm text-red-600\">{errors.address.message}</p>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              City *\n            </label>\n            <input\n              {...register('city')}\n              type=\"text\"\n              className={`w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.city \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"City\"\n            />\n            {errors.city && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.city.message}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              State *\n            </label>\n            <input\n              {...register('state')}\n              type=\"text\"\n              className={`w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.state \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"State\"\n            />\n            {errors.state && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.state.message}</p>\n            )}\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              ZIP Code *\n            </label>\n            <input\n              {...register('zipCode')}\n              type=\"text\"\n              className={`w-full px-4 py-3 border rounded-xl focus:outline-none focus:ring-2 transition-colors ${\n                errors.zipCode \n                  ? 'border-red-300 focus:ring-red-500' \n                  : 'border-gray-300 focus:ring-yellow-500'\n              }`}\n              placeholder=\"ZIP Code\"\n            />\n            {errors.zipCode && (\n              <p className=\"mt-1 text-sm text-red-600\">{errors.zipCode.message}</p>\n            )}\n          </div>\n        </div>\n\n        <motion.button\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          type=\"submit\"\n          disabled={!isValid}\n          className={`w-full py-4 rounded-xl font-semibold text-lg transition-colors ${\n            isValid\n              ? 'bg-yellow-600 hover:bg-yellow-700 text-white'\n              : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n          }`}\n        >\n          Continue to Payment Options\n        </motion.button>\n      </form>\n    </motion.div>\n  );\n\n  const renderPaymentMethodSelection = () => (\n    <motion.div\n      initial={{ opacity: 0, x: 20 }}\n      animate={{ opacity: 1, x: 0 }}\n      className=\"space-y-6\"\n    >\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">Select Payment Method</h2>\n        <button\n          onClick={() => setCurrentStep(1)}\n          className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back</span>\n        </button>\n      </div>\n\n      <div className=\"bg-gray-50 rounded-xl p-4\">\n        <h3 className=\"font-semibold text-gray-900 mb-2\">Amount to Pay</h3>\n        <p className=\"text-3xl font-bold text-yellow-600\">₹{finalAmount.toLocaleString('en-IN')}</p>\n        <p className=\"text-sm text-gray-600 mt-1\">No additional charges</p>\n      </div>\n\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Select Payment Method</h3>\n        \n        <StreamlinedPaymentMethod\n          selectedMethod={selectedPaymentMethod}\n          onMethodChange={handlePaymentMethodSelection}\n        />\n      </div>\n    </motion.div>\n  );\n\n  const renderPaymentProcessing = () => (\n    <motion.div\n      initial={{ opacity: 0, x: 20 }}\n      animate={{ opacity: 1, x: 0 }}\n      className=\"space-y-6\"\n    >\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold text-gray-900\">\n          {selectedPaymentMethod === 'upi' ? 'UPI Payment' : \n           selectedPaymentMethod === 'razorpay-upi' ? 'UPI via Razorpay' : 'Cash on Delivery'}\n        </h2>\n        <button\n          onClick={() => setCurrentStep(2)}\n          className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back</span>\n        </button>\n      </div>\n\n      {paymentError && (\n        <div className=\"bg-red-50 border border-red-200 rounded-xl p-4\">\n          <div className=\"flex items-center space-x-2\">\n            <AlertCircle className=\"w-5 h-5 text-red-600\" />\n            <p className=\"text-red-800 font-medium\">{paymentError}</p>\n          </div>\n        </div>\n      )}\n\n      <div className=\"bg-gray-50 rounded-xl p-4\">\n        <h3 className=\"font-semibold text-gray-900 mb-2\">Amount to Pay</h3>\n        <p className=\"text-3xl font-bold text-yellow-600\">₹{finalAmount.toLocaleString('en-IN')}</p>\n        <p className=\"text-sm text-gray-600 mt-1\">No additional charges</p>\n      </div>\n\n      <StreamlinedPaymentSection\n        amount={finalAmount}\n        paymentMethod={selectedPaymentMethod}\n        customerInfo={{\n          name: shippingData!.fullName,\n          email: shippingData!.email,\n          contact: shippingData!.phone,\n        }}\n        orderId={orderId}\n        shippingAddress={shippingData}\n        onPaymentSuccess={handlePaymentSuccess}\n        onPaymentError={handlePaymentError}\n      />\n      \n      {/* Debug info - remove in production */}\n      {process.env.NODE_ENV === 'development' && (\n        <div className=\"bg-yellow-50 rounded-xl p-4 mt-4\">\n          <h4 className=\"font-medium text-yellow-900 mb-2\">Debug Info</h4>\n          <div className=\"text-sm text-yellow-800 space-y-1\">\n            <p>• Final Amount: ₹{finalAmount}</p>\n            <p>• Base Amount: ₹{baseAmount}</p>\n            <p>• Payment Method: {selectedPaymentMethod}</p>\n            <p>• Order Items: {orderItems.length} items</p>\n          </div>\n        </div>\n      )}\n    </motion.div>\n  );\n\n  const renderOrderConfirmation = () => (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      className=\"text-center py-12\"\n    >\n      <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n        <CheckCircle className=\"w-10 h-10 text-green-600\" />\n      </div>\n      <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">Order Confirmed!</h2>\n      <p className=\"text-xl text-gray-600 mb-6\">\n        Thank you for your purchase. Your order has been successfully placed.\n      </p>\n      \n      <div className=\"bg-gray-50 rounded-xl p-6 max-w-md mx-auto mb-6\">\n        <h3 className=\"font-semibold text-gray-900 mb-4\">Order Summary</h3>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Order ID:</span>\n            <span className=\"font-mono\">{orderId}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Payment Method:</span>\n            <span>\n              {selectedPaymentMethod === 'upi' ? 'UPI' :\n               selectedPaymentMethod === 'razorpay-upi' ? 'UPI via Razorpay' :\n               selectedPaymentMethod === 'cod' ? 'Cash on Delivery' : 'Unknown'}\n            </span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Total Amount:</span>\n            <span className=\"font-semibold\">₹{finalAmount.toLocaleString('en-IN')}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Estimated Delivery:</span>\n            <span>5-7 business days</span>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={() => window.dispatchEvent(new CustomEvent('navigate-to-orders'))}\n          className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white px-8 py-3 rounded-xl font-semibold transition-colors\"\n        >\n          View My Orders\n        </motion.button>\n        <motion.button\n          whileHover={{ scale: 1.05 }}\n          whileTap={{ scale: 0.95 }}\n          onClick={onComplete}\n          className=\"w-full bg-gray-200 hover:bg-gray-300 text-gray-800 px-8 py-3 rounded-xl font-semibold transition-colors\"\n        >\n          Continue Shopping\n        </motion.button>\n      </div>\n    </motion.div>\n  );\n\n  if (isProcessing) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-yellow-200 border-t-yellow-600 rounded-full animate-spin mx-auto mb-4\"></div>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Processing Your Order</h3>\n          <p className=\"text-gray-600\">Please wait while we confirm your order...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-4 sm:py-8\">\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"bg-white rounded-xl shadow-sm p-4 sm:p-6\">\n          <AnimatePresence mode=\"wait\">\n            {currentStep === 1 && renderShippingForm()}\n            {currentStep === 2 && renderPaymentMethodSelection()}\n            {currentStep === 3 && renderPaymentProcessing()}\n            {currentStep === 4 && renderOrderConfirmation()}\n          </AnimatePresence>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StreamlinedCheckout;","size_bytes":20272},"client/src/components/Deals/OneRupeeDeals.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Clock, Zap, ShoppingCart, Timer, Star, ArrowRight } from 'lucide-react';\nimport StreamlinedCheckout from '../Checkout/StreamlinedCheckout';\n\ninterface DealProduct {\n  id: string;\n  name: string;\n  description: string;\n  originalPrice: number;\n  dealPrice: number;\n  image: string;\n  images: string[];\n  category: string;\n  rating: number;\n  reviewCount: number;\n  inStock: boolean;\n  tags: string[];\n  limitPerCustomer: number;\n  stockRemaining: number;\n}\n\nconst OneRupeeDeals: React.FC = () => {\n  const [deals, setDeals] = useState<DealProduct[]>([]);\n  const [timeRemaining, setTimeRemaining] = useState<{ [key: string]: number }>({});\n  const [selectedDeal, setSelectedDeal] = useState<DealProduct | null>(null);\n\n  // Initialize deals on component mount\n  useEffect(() => {\n    const now = Date.now();\n    const twoHours = 2 * 60 * 60 * 1000; // 2 hours in milliseconds\n\n    const initialDeals: DealProduct[] = [\n      {\n        id: 'deal-1',\n        name: 'Premium Desk Organizer',\n        description: 'Elegant bamboo desk organizer with multiple compartments for your workspace essentials.',\n        originalPrice: 2999,\n        dealPrice: 1,\n        image: 'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg?auto=compress&cs=tinysrgb&w=800',\n        images: [\n          'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg?auto=compress&cs=tinysrgb&w=800',\n          'https://images.pexels.com/photos/1571467/pexels-photo-1571467.jpeg?auto=compress&cs=tinysrgb&w=800'\n        ],\n        category: 'Office',\n        rating: 4.7,\n        reviewCount: 89,\n        inStock: true,\n        tags: ['desk', 'organizer', 'bamboo'],\n        limitPerCustomer: 1,\n        stockRemaining: 47,\n      },\n      {\n        id: 'deal-2',\n        name: 'Minimalist Phone Stand',\n        description: 'Sleek aluminum phone stand perfect for your desk or bedside table.',\n        originalPrice: 1999,\n        dealPrice: 1,\n        image: 'https://images.pexels.com/photos/1125130/pexels-photo-1125130.jpeg?auto=compress&cs=tinysrgb&w=800',\n        images: [\n          'https://images.pexels.com/photos/1125130/pexels-photo-1125130.jpeg?auto=compress&cs=tinysrgb&w=800',\n          'https://images.pexels.com/photos/1125131/pexels-photo-1125131.jpeg?auto=compress&cs=tinysrgb&w=800'\n        ],\n        category: 'Accessories',\n        rating: 4.5,\n        reviewCount: 156,\n        inStock: true,\n        tags: ['phone', 'stand', 'aluminum'],\n        limitPerCustomer: 1,\n        stockRemaining: 23,\n      },\n      {\n        id: 'deal-3',\n        name: 'Ceramic Plant Pot Set',\n        description: 'Beautiful set of 3 ceramic plant pots in different sizes for your indoor garden.',\n        originalPrice: 1499,\n        dealPrice: 1,\n        image: 'https://images.pexels.com/photos/1668860/pexels-photo-1668860.jpeg?auto=compress&cs=tinysrgb&w=800',\n        images: [\n          'https://images.pexels.com/photos/1668860/pexels-photo-1668860.jpeg?auto=compress&cs=tinysrgb&w=800',\n          'https://images.pexels.com/photos/1668861/pexels-photo-1668861.jpeg?auto=compress&cs=tinysrgb&w=800'\n        ],\n        category: 'Decor',\n        rating: 4.3,\n        reviewCount: 67,\n        inStock: true,\n        tags: ['ceramic', 'plant', 'pot'],\n        limitPerCustomer: 1,\n        stockRemaining: 31,\n      },\n      {\n        id: 'deal-4',\n        name: 'Wireless Bluetooth Speaker',\n        description: 'Compact portable speaker with crystal clear sound and 12-hour battery life.',\n        originalPrice: 3499,\n        dealPrice: 1,\n        image: 'https://images.pexels.com/photos/1649771/pexels-photo-1649771.jpeg?auto=compress&cs=tinysrgb&w=800',\n        images: [\n          'https://images.pexels.com/photos/1649771/pexels-photo-1649771.jpeg?auto=compress&cs=tinysrgb&w=800',\n          'https://images.pexels.com/photos/1649772/pexels-photo-1649772.jpeg?auto=compress&cs=tinysrgb&w=800'\n        ],\n        category: 'Electronics',\n        rating: 4.6,\n        reviewCount: 124,\n        inStock: true,\n        tags: ['speaker', 'bluetooth', 'wireless'],\n        limitPerCustomer: 1,\n        stockRemaining: 18,\n      },\n      {\n        id: 'deal-5',\n        name: 'LED Desk Lamp',\n        description: 'Modern adjustable LED desk lamp with touch control and USB charging port.',\n        originalPrice: 2799,\n        dealPrice: 1,\n        image: 'https://images.pexels.com/photos/1779487/pexels-photo-1779487.jpeg?auto=compress&cs=tinysrgb&w=800',\n        images: [\n          'https://images.pexels.com/photos/1779487/pexels-photo-1779487.jpeg?auto=compress&cs=tinysrgb&w=800',\n          'https://images.pexels.com/photos/1779488/pexels-photo-1779488.jpeg?auto=compress&cs=tinysrgb&w=800'\n        ],\n        category: 'Lighting',\n        rating: 4.4,\n        reviewCount: 92,\n        inStock: true,\n        tags: ['lamp', 'led', 'desk'],\n        limitPerCustomer: 1,\n        stockRemaining: 35,\n      },\n      {\n        id: 'deal-6',\n        name: 'Stainless Steel Water Bottle',\n        description: 'Insulated water bottle that keeps drinks cold for 24 hours or hot for 12 hours.',\n        originalPrice: 1799,\n        dealPrice: 1,\n        image: 'https://images.pexels.com/photos/1000084/pexels-photo-1000084.jpeg?auto=compress&cs=tinysrgb&w=800',\n        images: [\n          'https://images.pexels.com/photos/1000084/pexels-photo-1000084.jpeg?auto=compress&cs=tinysrgb&w=800',\n          'https://images.pexels.com/photos/1000085/pexels-photo-1000085.jpeg?auto=compress&cs=tinysrgb&w=800'\n        ],\n        category: 'Lifestyle',\n        rating: 4.8,\n        reviewCount: 203,\n        inStock: true,\n        tags: ['bottle', 'steel', 'insulated'],\n        limitPerCustomer: 1,\n        stockRemaining: 52,\n      },\n      {\n        id: 'deal-7',\n        name: 'Silicone Keyboard Cover',\n        description: 'Transparent keyboard protector for laptops, dustproof and waterproof.',\n        originalPrice: 899,\n        dealPrice: 1,\n        image: 'https://images.pexels.com/photos/38519/macbook-laptop-ipad-apple-38519.jpeg?auto=compress&cs=tinysrgb&w=800',\n        images: [\n          'https://images.pexels.com/photos/38519/macbook-laptop-ipad-apple-38519.jpeg?auto=compress&cs=tinysrgb&w=800',\n          'https://images.pexels.com/photos/38520/macbook-laptop-ipad-apple-38520.jpeg?auto=compress&cs=tinysrgb&w=800'\n        ],\n        category: 'Accessories',\n        rating: 4.2,\n        reviewCount: 76,\n        inStock: true,\n        tags: ['keyboard', 'cover', 'protection'],\n        limitPerCustomer: 2,\n        stockRemaining: 94,\n      },\n      {\n        id: 'deal-8',\n        name: 'Bamboo Cutting Board',\n        description: 'Eco-friendly bamboo cutting board with juice groove and built-in handles.',\n        originalPrice: 1299,\n        dealPrice: 1,\n        image: 'https://images.pexels.com/photos/1435904/pexels-photo-1435904.jpeg?auto=compress&cs=tinysrgb&w=800',\n        images: [\n          'https://images.pexels.com/photos/1435904/pexels-photo-1435904.jpeg?auto=compress&cs=tinysrgb&w=800',\n          'https://images.pexels.com/photos/1435905/pexels-photo-1435905.jpeg?auto=compress&cs=tinysrgb&w=800'\n        ],\n        category: 'Kitchen',\n        rating: 4.5,\n        reviewCount: 145,\n        inStock: true,\n        tags: ['bamboo', 'cutting', 'kitchen'],\n        limitPerCustomer: 1,\n        stockRemaining: 28,\n      },\n    ];\n\n    setDeals(initialDeals);\n\n    // Initialize time remaining for each deal\n    const initialTimeRemaining: { [key: string]: number } = {};\n    initialDeals.forEach(deal => {\n      const remaining = twoHours; // 2 hours for each deal\n      initialTimeRemaining[deal.id] = remaining;\n    });\n    setTimeRemaining(initialTimeRemaining);\n  }, []);\n\n  // Update countdown timer\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimeRemaining(prev => {\n        const updated = { ...prev };\n        let hasActiveDeals = false;\n\n        deals.forEach(deal => {\n          const remaining = prev[deal.id] - 1000; // Decrease by 1 second\n          updated[deal.id] = Math.max(0, remaining);\n          if (remaining > 0) hasActiveDeals = true;\n        });\n\n        return updated;\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [deals]);\n\n  const formatTime = (milliseconds: number) => {\n    const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n    const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((milliseconds % (1000 * 60)) / 1000);\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleBuyNow = (deal: DealProduct) => {\n    setSelectedDeal(deal);\n  };\n\n  const handleCheckoutComplete = () => {\n    setSelectedDeal(null);\n  };\n\n  // Filter active deals\n  const activeDeals = deals.filter(deal => timeRemaining[deal.id] > 0);\n\n  if (selectedDeal) {\n    return (\n      <StreamlinedCheckout\n        product={selectedDeal}\n        onBack={() => setSelectedDeal(null)}\n        onComplete={() => setSelectedDeal(null)}\n      />\n    );\n  }\n\n  if (activeDeals.length === 0) {\n    return (\n      <section className=\"py-16 bg-gradient-to-r from-red-500 to-pink-600\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <div className=\"text-white\">\n            <h2 className=\"text-4xl font-bold mb-4\">₹1 Flash Deals</h2>\n            <p className=\"text-xl mb-8\">All deals have ended. Check back soon for new amazing offers!</p>\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              className=\"bg-white text-red-600 px-8 py-3 rounded-xl font-semibold transition-colors\"\n            >\n              Browse Regular Products\n            </motion.button>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-12 sm:py-16 bg-gradient-to-r from-red-500 to-pink-600\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-8 sm:mb-12 px-2\"\n        >\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Zap className=\"w-6 h-6 sm:w-8 sm:h-8 text-yellow-300\" />\n            <h2 className=\"text-2xl sm:text-4xl md:text-5xl font-bold text-white\">₹1 Flash Deals</h2>\n            <Zap className=\"w-6 h-6 sm:w-8 sm:h-8 text-yellow-300\" />\n          </div>\n          <p className=\"text-lg sm:text-xl text-red-100 px-4\">\n            Limited time offers - grab them before they're gone!\n          </p>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 lg:gap-8\">\n          <AnimatePresence>\n            {activeDeals.map((deal, index) => (\n              <motion.div\n                key={deal.id}\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.9 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n                className=\"bg-white rounded-2xl overflow-hidden shadow-2xl mx-2 sm:mx-0\"\n              >\n                {/* Timer Header */}\n                <div className=\"bg-gradient-to-r from-red-600 to-red-700 text-white p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Timer className=\"w-5 h-5\" />\n                      <span className=\"font-semibold\">Time Remaining</span>\n                    </div>\n                    <div className=\"text-xl font-mono font-bold\">\n                      {formatTime(timeRemaining[deal.id])}\n                    </div>\n                  </div>\n                  <div className=\"bg-white/20 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-yellow-400\"\n                      initial={{ width: '100%' }}\n                      animate={{ \n                        width: `${(timeRemaining[deal.id] / (2 * 60 * 60 * 1000)) * 100}%` \n                      }}\n                      transition={{ duration: 1 }}\n                    />\n                  </div>\n                </div>\n\n                {/* Product Content */}\n                <div className=\"p-4 sm:p-6\">\n                  <div className=\"relative mb-4\">\n                    <img\n                      src={deal.image}\n                      alt={deal.name}\n                      className=\"w-full h-40 sm:h-48 object-cover rounded-xl\"\n                    />\n                    <div className=\"absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-bold\">\n                      99.97% OFF\n                    </div>\n                    <div className=\"absolute top-4 right-4 bg-orange-500 text-white px-2 py-1 rounded text-xs\">\n                      {deal.stockRemaining} left\n                    </div>\n                  </div>\n\n                  <h3 className=\"text-lg sm:text-xl font-bold text-gray-900 mb-2 line-clamp-2\">\n                    {deal.name}\n                  </h3>\n                  <p className=\"text-gray-600 mb-4 text-sm leading-relaxed line-clamp-3\">{deal.description}</p>\n\n                  {/* Rating */}\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <div className=\"flex items-center\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star\n                          key={i}\n                          className={`w-4 h-4 ${\n                            i < Math.floor(deal.rating)\n                              ? 'text-yellow-500 fill-current'\n                              : 'text-gray-300'\n                          }`}\n                        />\n                      ))}\n                    </div>\n                    <span className=\"text-sm text-gray-600\">({deal.reviewCount})</span>\n                  </div>\n\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-3xl font-bold text-green-600\">\n                        ₹{deal.dealPrice}\n                      </span>\n                      <span className=\"text-lg text-gray-500 line-through\">\n                        ₹{deal.originalPrice.toLocaleString('en-IN')}\n                      </span>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-gray-600\">You Save</p>\n                      <p className=\"text-lg font-bold text-red-600\">\n                        ₹{(deal.originalPrice - deal.dealPrice).toLocaleString('en-IN')}\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Limit Notice */}\n                  <div className=\"bg-amber-50 rounded-lg p-3 mb-4\">\n                    <p className=\"text-sm text-amber-800 text-center\">\n                      <strong>Limit {deal.limitPerCustomer} per customer</strong> • While stocks last\n                    </p>\n                  </div>\n\n                  <motion.button\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={() => handleBuyNow(deal)}\n                    className=\"w-full bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white py-3 sm:py-4 rounded-xl font-bold text-base sm:text-lg transition-all duration-200 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl\"\n                  >\n                    <ShoppingCart className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n                    <span className=\"text-sm sm:text-base\">Buy Now for ₹1</span>\n                    <ArrowRight className=\"w-4 h-4 sm:w-5 sm:h-5\" />\n                  </motion.button>\n\n                  <p className=\"text-center text-xs text-gray-500 mt-3\">\n                    Limited quantity • {deal.stockRemaining} items remaining\n                  </p>\n                </div>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </div>\n\n        {/* Deal Statistics */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          viewport={{ once: true }}\n          className=\"mt-8 sm:mt-12 text-center\"\n        >\n          <div className=\"bg-white/10 backdrop-blur-sm rounded-2xl p-4 sm:p-6 max-w-2xl mx-auto\">\n            <h3 className=\"text-xl sm:text-2xl font-bold text-white mb-4\">Deal Statistics</h3>\n            <div className=\"grid grid-cols-3 gap-3 sm:gap-6\">\n              <div>\n                <p className=\"text-2xl sm:text-3xl font-bold text-yellow-300\">{activeDeals.length}</p>\n                <p className=\"text-white/80 text-sm sm:text-base\">Active Deals</p>\n              </div>\n              <div>\n                <p className=\"text-2xl sm:text-3xl font-bold text-yellow-300\">\n                  {activeDeals.reduce((sum, deal) => sum + deal.stockRemaining, 0)}\n                </p>\n                <p className=\"text-white/80 text-sm sm:text-base\">Items Left</p>\n              </div>\n              <div>\n                <p className=\"text-2xl sm:text-3xl font-bold text-yellow-300\">99.97%</p>\n                <p className=\"text-white/80 text-sm sm:text-base\">Max Savings</p>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </section>\n  );\n};\n\nexport default OneRupeeDeals;","size_bytes":17914},"client/src/components/HomePage/FeaturedProducts.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport ProductGrid from '../Products/ProductGrid';\nimport { useQuery } from '@tanstack/react-query';\nimport { productService } from '../../services/apiService';\nimport { Loader } from 'lucide-react';\n\ninterface FeaturedProductsProps {\n  onNavigate: (page: string) => void;\n}\n\nconst FeaturedProducts: React.FC<FeaturedProductsProps> = ({ onNavigate }) => {\n  const { data: featuredProductsData, isLoading: loading } = useQuery({\n    queryKey: ['/api/products', { featured: true, limit: 6 }],\n    queryFn: () => productService.getProducts({ featured: true, limit: 6 }),\n  });\n\n  const featuredProducts = featuredProductsData?.products || [];\n\n  return (\n      <section className=\"py-20 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12 sm:mb-16 px-4\"\n          >\n            <h2 className=\"text-3xl sm:text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              Featured Products\n            </h2>\n            <p className=\"text-lg sm:text-xl text-gray-600 max-w-2xl mx-auto\">\n              Discover our carefully curated selection of premium furniture and decor\n            </p>\n          </motion.div>\n\n          {loading ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"text-center\">\n                <Loader className=\"w-12 h-12 text-yellow-600 animate-spin mx-auto mb-4\" />\n                <p className=\"text-gray-600\">Loading featured products...</p>\n              </div>\n            </div>\n          ) : featuredProducts.length > 0 ? (\n            <ProductGrid products={featuredProducts} onNavigate={onNavigate} featured={true} />\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-600\">No featured products available</p>\n            </div>\n          )}\n          </div>\n\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            viewport={{ once: true }}\n            className=\"text-center mt-12\"\n          >\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => onNavigate('products')}\n              className=\"bg-gray-900 hover:bg-gray-800 text-white px-8 py-4 rounded-xl font-semibold text-lg transition-colors\"\n            >\n              View All Products\n            </motion.button>\n          </motion.div>\n      </section>\n  );\n};\n\nexport default FeaturedProducts;","size_bytes":2841},"client/src/components/HomePage/Hero.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { ArrowRight, Play } from 'lucide-react';\nimport StoryViewer from '../Story/StoryViewer';\n\ninterface HeroProps {\n  onNavigate: (page: string) => void;\n}\n\nconst Hero: React.FC<HeroProps> = ({ onNavigate }) => {\n  const [showStoryViewer, setShowStoryViewer] = useState(false);\n\n  const stories = [\n    {\n      id: '1',\n      title: 'Modern Living Room Transformation',\n      media: 'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg?auto=compress&cs=tinysrgb&w=800',\n      type: 'image' as const,\n      duration: 5,\n    },\n    {\n      id: '2',\n      title: 'Scandinavian Bedroom Design',\n      media: 'https://images.pexels.com/photos/1350789/pexels-photo-1350789.jpeg?auto=compress&cs=tinysrgb&w=800',\n      type: 'image' as const,\n      duration: 5,\n    },\n    {\n      id: '3',\n      title: 'Luxury Kitchen Makeover',\n      media: 'https://images.pexels.com/photos/2029698/pexels-photo-2029698.jpeg?auto=compress&cs=tinysrgb&w=800',\n      type: 'image' as const,\n      duration: 5,\n    },\n  ];\n\n  return (\n    <>\n      <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n        {/* Background Image with Parallax Effect */}\n        <motion.div\n          initial={{ scale: 1.2 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 1.5, ease: \"easeOut\" }}\n          className=\"absolute inset-0 z-0\"\n        >\n          <div\n            className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n            style={{\n              backgroundImage: 'url(https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg?auto=compress&cs=tinysrgb&w=1920)',\n            }}\n          />\n          <div className=\"absolute inset-0 bg-black/0\" />\n        </motion.div>\n\n        {/* Content */}\n        <div className=\"relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            className=\"max-w-4xl mx-auto\"\n          >\n            <motion.h1\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.4 }}\n              className=\"text-4xl sm:text-5xl md:text-6xl lg:text-7xl font-bold text-white mb-6\"\n            >\n              Transform Your\n              <span className=\"block text-yellow-400\">Living Space</span>\n            </motion.h1>\n\n            <motion.p\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.6 }}\n              className=\"text-lg sm:text-xl md:text-2xl text-gray-200 mb-8 max-w-2xl mx-auto px-4\"\n            >\n              Discover premium furniture and decor that brings your dream home to life. \n              Curated collections for modern living.\n            </motion.p>\n\n            <motion.div\n              initial={{ opacity: 0, y: 30 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: 0.8 }}\n              className=\"flex flex-col sm:flex-row gap-4 justify-center items-center px-4\"\n            >\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={() => onNavigate('products')}\n                className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-xl font-semibold text-base sm:text-lg flex items-center space-x-2 transition-colors shadow-lg w-full sm:w-auto justify-center\"\n              >\n                <span>Shop Collection</span>\n                <ArrowRight className=\"w-5 h-5\" />\n              </motion.button>\n\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={() => setShowStoryViewer(true)}\n                className=\"bg-white/20 backdrop-blur-sm hover:bg-white/30 text-white px-6 sm:px-8 py-3 sm:py-4 rounded-xl font-semibold text-base sm:text-lg flex items-center space-x-2 transition-colors border border-white/30 w-full sm:w-auto justify-center\"\n              >\n                <Play className=\"w-5 h-5\" />\n                <span>Watch Story</span>\n              </motion.button>\n            </motion.div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Story Viewer */}\n      <StoryViewer\n        isOpen={showStoryViewer}\n        onClose={() => setShowStoryViewer(false)}\n        stories={stories}\n      />\n    </>\n  );\n};\n\nexport default Hero;","size_bytes":4697},"client/src/components/HomePage/Newsletter.tsx":{"content":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Mail, CheckCircle } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst newsletterSchema = z.object({\n  email: z.string().email('Please enter a valid email address'),\n});\n\ntype NewsletterData = z.infer<typeof newsletterSchema>;\n\nconst Newsletter: React.FC = () => {\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  \n  const {\n    register,\n    handleSubmit,\n    formState: { errors, isSubmitting },\n    reset,\n  } = useForm<NewsletterData>({\n    resolver: zodResolver(newsletterSchema),\n  });\n\n  const onSubmit = async (data: NewsletterData) => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    console.log('Newsletter subscription:', data);\n    setIsSubmitted(true);\n    reset();\n    \n    // Reset success state after 3 seconds\n    setTimeout(() => setIsSubmitted(false), 3000);\n  };\n\n  return (\n    <section className=\"py-20 bg-gradient-to-r from-yellow-600 to-yellow-700\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-3xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"px-4\"\n          >\n            <h2 className=\"text-3xl sm:text-4xl md:text-5xl font-bold text-white mb-4\">\n              Stay in Style\n            </h2>\n            <p className=\"text-lg sm:text-xl text-yellow-100 mb-8\">\n              Subscribe to our newsletter for exclusive deals, design tips, and the latest trends\n            </p>\n          </motion.div>\n\n          <motion.form\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8, delay: 0.2 }}\n            viewport={{ once: true }}\n            onSubmit={handleSubmit(onSubmit)}\n            className=\"flex flex-col sm:flex-row gap-4 max-w-lg mx-auto px-4\"\n          >\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  {...register('email')}\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  className=\"w-full pl-12 pr-4 py-4 rounded-xl border-0 focus:outline-none focus:ring-2 focus:ring-white text-gray-900\"\n                />\n              </div>\n              {errors.email && (\n                <p className=\"mt-2 text-sm text-yellow-100\">{errors.email.message}</p>\n              )}\n            </div>\n\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              disabled={isSubmitting}\n              className=\"bg-gray-900 hover:bg-gray-800 text-white px-8 py-4 rounded-xl font-semibold transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2\"\n            >\n              {isSubmitting ? (\n                <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n              ) : (\n                <>\n                  <span>Subscribe</span>\n                  <Mail className=\"w-5 h-5\" />\n                </>\n              )}\n            </motion.button>\n          </motion.form>\n\n          {/* Success Message */}\n          <AnimatePresence>\n            {isSubmitted && (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.8, y: 20 }}\n                animate={{ opacity: 1, scale: 1, y: 0 }}\n                exit={{ opacity: 0, scale: 0.8, y: 20 }}\n                transition={{ duration: 0.3 }}\n                className=\"mt-6 bg-white/20 backdrop-blur-sm rounded-lg p-4 flex items-center justify-center space-x-2\"\n              >\n                <CheckCircle className=\"w-5 h-5 text-green-300\" />\n                <span className=\"text-white font-medium\">Thanks for subscribing!</span>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          <motion.p\n            initial={{ opacity: 0 }}\n            whileInView={{ opacity: 1 }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n            viewport={{ once: true }}\n            className=\"mt-4 text-sm text-yellow-100\"\n          >\n            Join 10,000+ subscribers. No spam, unsubscribe anytime.\n          </motion.p>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Newsletter;","size_bytes":4703},"client/src/components/HomePage/SpecialDeals.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Clock, Zap, ShoppingCart, Timer } from 'lucide-react';\nimport { useDispatch } from 'react-redux';\nimport { addToCart } from '../../store/slices/cartSlice';\n\ninterface Deal {\n  id: string;\n  product: {\n    id: string;\n    name: string;\n    description: string;\n    originalPrice: number;\n    dealPrice: number;\n    image: string;\n    images: string[];\n    category: string;\n    rating: number;\n    reviewCount: number;\n    inStock: boolean;\n    tags: string[];\n  };\n  startTime: number;\n  duration: number; // in milliseconds\n}\n\nconst SpecialDeals: React.FC = () => {\n  const [deals, setDeals] = useState<Deal[]>([]);\n  const [timeRemaining, setTimeRemaining] = useState<{ [key: string]: number }>({});\n  const dispatch = useDispatch();\n\n  // Initialize deals on component mount\n  useEffect(() => {\n    const now = Date.now();\n    const twoHours = 2 * 60 * 60 * 1000; // 2 hours in milliseconds\n\n    const initialDeals: Deal[] = [\n      {\n        id: 'deal-1',\n        product: {\n          id: 'deal-product-1',\n          name: 'Premium Desk Organizer',\n          description: 'Elegant bamboo desk organizer with multiple compartments',\n          originalPrice: 299,\n          dealPrice: 1,\n          image: 'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg?auto=compress&cs=tinysrgb&w=800',\n          images: [\n            'https://images.pexels.com/photos/1571460/pexels-photo-1571460.jpeg?auto=compress&cs=tinysrgb&w=800',\n            'https://images.pexels.com/photos/1571467/pexels-photo-1571467.jpeg?auto=compress&cs=tinysrgb&w=800'\n          ],\n          category: 'Office',\n          rating: 4.7,\n          reviewCount: 89,\n          inStock: true,\n          tags: ['desk', 'organizer', 'bamboo'],\n        },\n        startTime: now,\n        duration: twoHours,\n      },\n      {\n        id: 'deal-2',\n        product: {\n          id: 'deal-product-2',\n          name: 'Minimalist Phone Stand',\n          description: 'Sleek aluminum phone stand for desk or bedside',\n          originalPrice: 199,\n          dealPrice: 1,\n          image: 'https://images.pexels.com/photos/1125130/pexels-photo-1125130.jpeg?auto=compress&cs=tinysrgb&w=800',\n          images: [\n            'https://images.pexels.com/photos/1125130/pexels-photo-1125130.jpeg?auto=compress&cs=tinysrgb&w=800',\n            'https://images.pexels.com/photos/1125131/pexels-photo-1125131.jpeg?auto=compress&cs=tinysrgb&w=800'\n          ],\n          category: 'Accessories',\n          rating: 4.5,\n          reviewCount: 156,\n          inStock: true,\n          tags: ['phone', 'stand', 'aluminum'],\n        },\n        startTime: now,\n        duration: twoHours,\n      },\n    ];\n\n    setDeals(initialDeals);\n\n    // Initialize time remaining for each deal\n    const initialTimeRemaining: { [key: string]: number } = {};\n    initialDeals.forEach(deal => {\n      const remaining = deal.startTime + deal.duration - now;\n      initialTimeRemaining[deal.id] = Math.max(0, remaining);\n    });\n    setTimeRemaining(initialTimeRemaining);\n  }, []);\n\n  // Update countdown timer\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimeRemaining(prev => {\n        const updated = { ...prev };\n        let hasActiveDeals = false;\n\n        deals.forEach(deal => {\n          const remaining = deal.startTime + deal.duration - Date.now();\n          updated[deal.id] = Math.max(0, remaining);\n          if (remaining > 0) hasActiveDeals = true;\n        });\n\n        // Remove expired deals\n        if (!hasActiveDeals) {\n          setDeals(prevDeals => prevDeals.filter(deal => \n            timeRemaining[deal.id] > 0\n          ));\n        }\n\n        return updated;\n      });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [deals, timeRemaining]);\n\n  const formatTime = (milliseconds: number) => {\n    const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n    const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((milliseconds % (1000 * 60)) / 1000);\n    \n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  const handleAddToCart = (deal: Deal) => {\n    const cartProduct = {\n      id: deal.product.id,\n      name: deal.product.name,\n      description: deal.product.description,\n      price: deal.product.dealPrice,\n      originalPrice: deal.product.originalPrice,\n      category: deal.product.category,\n      images: deal.product.images,\n      rating: deal.product.rating,\n      reviewCount: deal.product.reviewCount,\n      inStock: deal.product.inStock,\n      tags: deal.product.tags,\n    };\n    dispatch(addToCart(cartProduct));\n  };\n\n  // Filter active deals\n  const activeDeals = deals.filter(deal => timeRemaining[deal.id] > 0);\n\n  if (activeDeals.length === 0) {\n    return null;\n  }\n\n  return (\n    <section className=\"py-16 bg-gradient-to-r from-red-500 to-pink-600\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-12\"\n        >\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <Zap className=\"w-8 h-8 text-yellow-300\" />\n            <h2 className=\"text-4xl md:text-5xl font-bold text-white\">₹1 Flash Deals</h2>\n            <Zap className=\"w-8 h-8 text-yellow-300\" />\n          </div>\n          <p className=\"text-xl text-red-100\">\n            Limited time offers - grab them before they're gone!\n          </p>\n        </motion.div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          <AnimatePresence>\n            {activeDeals.map((deal, index) => (\n              <motion.div\n                key={deal.id}\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 0.9 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n                className=\"bg-white rounded-2xl overflow-hidden shadow-2xl\"\n              >\n                {/* Timer Header */}\n                <div className=\"bg-gradient-to-r from-red-600 to-red-700 text-white p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Timer className=\"w-5 h-5\" />\n                      <span className=\"font-semibold\">Time Remaining</span>\n                    </div>\n                    <div className=\"text-xl font-mono font-bold\">\n                      {formatTime(timeRemaining[deal.id])}\n                    </div>\n                  </div>\n                  <div className=\"mt-2 bg-white/20 rounded-full h-2 overflow-hidden\">\n                    <motion.div\n                      className=\"h-full bg-yellow-400\"\n                      initial={{ width: '100%' }}\n                      animate={{ \n                        width: `${(timeRemaining[deal.id] / deal.duration) * 100}%` \n                      }}\n                      transition={{ duration: 1 }}\n                    />\n                  </div>\n                </div>\n\n                {/* Product Content */}\n                <div className=\"p-6\">\n                  <div className=\"relative mb-4\">\n                    <img\n                      src={deal.product.image}\n                      alt={deal.product.name}\n                      className=\"w-full h-48 object-cover rounded-xl\"\n                    />\n                    <div className=\"absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-bold\">\n                      99.7% OFF\n                    </div>\n                  </div>\n\n                  <h3 className=\"text-xl font-bold text-gray-900 mb-2\">\n                    {deal.product.name}\n                  </h3>\n                  <p className=\"text-gray-600 mb-4\">{deal.product.description}</p>\n\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-3xl font-bold text-green-600\">\n                        ₹{deal.product.dealPrice}\n                      </span>\n                      <span className=\"text-lg text-gray-500 line-through\">\n                        ₹{deal.product.originalPrice.toLocaleString('en-IN')}\n                      </span>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-gray-600\">You Save</p>\n                      <p className=\"text-lg font-bold text-red-600\">\n                        ₹{(deal.product.originalPrice - deal.product.dealPrice).toLocaleString('en-IN')}\n                      </p>\n                    </div>\n                  </div>\n\n                  <motion.button\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={() => handleAddToCart(deal)}\n                    className=\"w-full bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 text-white py-4 rounded-xl font-bold text-lg transition-all duration-200 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl\"\n                  >\n                    <ShoppingCart className=\"w-5 h-5\" />\n                    <span>Grab This Deal!</span>\n                  </motion.button>\n\n                  <p className=\"text-center text-xs text-gray-500 mt-3\">\n                    Limited quantity • While stocks last\n                  </p>\n                </div>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default SpecialDeals;","size_bytes":9973},"client/src/components/HomePage/Testimonials.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Star, ChevronLeft, ChevronRight, Quote } from 'lucide-react';\nimport { testimonials } from '../../data/mockData';\n\nconst Testimonials: React.FC = () => {\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentIndex((prevIndex) => (prevIndex + 1) % testimonials.length);\n    }, 5000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const nextTestimonial = () => {\n    setCurrentIndex((prevIndex) => (prevIndex + 1) % testimonials.length);\n  };\n\n  const prevTestimonial = () => {\n    setCurrentIndex((prevIndex) => (prevIndex - 1 + testimonials.length) % testimonials.length);\n  };\n\n  return (\n    <section className=\"py-20 bg-gray-900\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-12 sm:mb-16 px-4\"\n        >\n          <h2 className=\"text-3xl sm:text-4xl md:text-5xl font-bold text-white mb-4\">\n            What Our Customers Say\n          </h2>\n          <p className=\"text-lg sm:text-xl text-gray-400 max-w-2xl mx-auto\">\n            Real stories from satisfied customers who transformed their homes\n          </p>\n        </motion.div>\n\n        <div className=\"relative max-w-4xl mx-auto px-4\">\n          <AnimatePresence mode=\"wait\">\n            <motion.div\n              key={currentIndex}\n              initial={{ opacity: 0, x: 100 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -100 }}\n              transition={{ duration: 0.5 }}\n              className=\"bg-white rounded-2xl p-6 sm:p-8 md:p-12 shadow-2xl\"\n            >\n              <div className=\"flex items-center justify-center mb-8\">\n                <Quote className=\"w-12 h-12 text-yellow-500\" />\n              </div>\n\n              <blockquote className=\"text-lg sm:text-xl md:text-2xl text-gray-700 text-center mb-8 leading-relaxed\">\n                \"{testimonials[currentIndex].content}\"\n              </blockquote>\n\n              <div className=\"flex items-center justify-center space-x-4 mb-6\">\n                <img\n                  src={testimonials[currentIndex].avatar}\n                  alt={testimonials[currentIndex].name}\n                  className=\"w-16 h-16 rounded-full object-cover\"\n                />\n                <div className=\"text-center\">\n                  <h4 className=\"text-base sm:text-lg font-semibold text-gray-900\">\n                    {testimonials[currentIndex].name}\n                  </h4>\n                  <p className=\"text-sm sm:text-base text-gray-600\">{testimonials[currentIndex].role}</p>\n                </div>\n              </div>\n\n              <div className=\"flex justify-center space-x-1\">\n                {[...Array(testimonials[currentIndex].rating)].map((_, i) => (\n                  <Star key={i} className=\"w-5 h-5 text-yellow-500 fill-current\" />\n                ))}\n              </div>\n            </motion.div>\n          </AnimatePresence>\n\n          {/* Navigation Buttons */}\n          <div className=\"absolute top-1/2 transform -translate-y-1/2 -left-4 md:-left-12\">\n            <motion.button\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n              onClick={prevTestimonial}\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white p-3 rounded-full shadow-lg transition-colors\"\n            >\n              <ChevronLeft className=\"w-6 h-6\" />\n            </motion.button>\n          </div>\n\n          <div className=\"absolute top-1/2 transform -translate-y-1/2 -right-4 md:-right-12\">\n            <motion.button\n              whileHover={{ scale: 1.1 }}\n              whileTap={{ scale: 0.9 }}\n              onClick={nextTestimonial}\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white p-3 rounded-full shadow-lg transition-colors\"\n            >\n              <ChevronRight className=\"w-6 h-6\" />\n            </motion.button>\n          </div>\n\n          {/* Dots Indicator */}\n          <div className=\"flex justify-center space-x-2 mt-8\">\n            {testimonials.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => setCurrentIndex(index)}\n                className={`w-3 h-3 rounded-full transition-colors ${\n                  index === currentIndex ? 'bg-yellow-500' : 'bg-gray-400'\n                }`}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Testimonials;","size_bytes":4760},"client/src/components/Layout/Footer.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Home, Mail, Phone, MapPin, Facebook, Instagram, Twitter } from 'lucide-react';\n\nconst Footer: React.FC = () => {\n  const footerLinks = {\n    'Shop': ['Living Room', 'Bedroom', 'Kitchen', 'Lighting', 'Decor'],\n    'Company': ['About Us', 'Careers', 'Press', 'Sustainability', 'Store Locator'],\n    'Support': ['Contact', 'Shipping Info', 'Returns', 'Size Guide', 'Care Instructions'],\n    'Legal': ['Privacy Policy', 'Terms of Service', 'Cookie Policy', 'Accessibility']\n  };\n\n  return (\n    <footer className=\"bg-gray-900 text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-8\">\n          {/* Brand Section */}\n          <div className=\"lg:col-span-2\">\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n              className=\"mb-6\"\n            >\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-lg flex items-center justify-center\">\n                  <Home className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"text-2xl font-bold\">Interoo</span>\n              </div>\n              <p className=\"text-gray-400 mb-6\">\n                Transform your living space with our premium furniture and decor collection. \n                Quality craftsmanship meets modern design.\n              </p>\n              <div className=\"flex space-x-4\">\n                {[Facebook, Instagram, Twitter].map((Icon, index) => (\n                  <motion.a\n                    key={index}\n                    href=\"#\"\n                    whileHover={{ scale: 1.1, y: -2 }}\n                    className=\"bg-gray-800 p-3 rounded-lg hover:bg-yellow-600 transition-colors\"\n                  >\n                    <Icon className=\"w-5 h-5\" />\n                  </motion.a>\n                ))}\n              </div>\n            </motion.div>\n          </div>\n\n          {/* Links Sections */}\n          {Object.entries(footerLinks).map(([title, links], index) => (\n            <motion.div\n              key={title}\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: index * 0.1 }}\n              viewport={{ once: true }}\n            >\n              <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n              <ul className=\"space-y-2\">\n                {links.map((link) => (\n                  <li key={link}>\n                    <a\n                      href=\"#\"\n                      className=\"text-gray-400 hover:text-white transition-colors\"\n                    >\n                      {link}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </motion.div>\n          ))}\n        </div>\n\n        {/* Contact Info */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.4 }}\n          viewport={{ once: true }}\n          className=\"mt-12 pt-8 border-t border-gray-800\"\n        >\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"flex items-center space-x-3\">\n              <MapPin className=\"w-5 h-5 text-yellow-500\" />\n              <div>\n                <p className=\"font-semibold\">Visit Our Showroom</p>\n                <p className=\"text-gray-400\">123 Design Street, NYC 10001</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Phone className=\"w-5 h-5 text-yellow-500\" />\n              <div>\n                <p className=\"font-semibold\">Call Us</p>\n                <p className=\"text-gray-400\">+1 (555) 123-4567</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Mail className=\"w-5 h-5 text-yellow-500\" />\n              <div>\n                <p className=\"font-semibold\">Email Us</p>\n                <p className=\"text-gray-400\">hello@interoo.com</p>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Bottom Bar */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          transition={{ duration: 0.8, delay: 0.6 }}\n          viewport={{ once: true }}\n          className=\"mt-12 pt-8 border-t border-gray-800 flex flex-col md:flex-row justify-between items-center\"\n        >\n          <p className=\"text-gray-400 text-sm\">\n            © 2025 Interoo Services. All rights reserved.\n          </p>\n          <div className=\"flex space-x-6 mt-4 md:mt-0\">\n            <a href=\"#\" className=\"text-gray-400 hover:text-white text-sm transition-colors\">\n              Privacy Policy\n            </a>\n            <a href=\"#\" className=\"text-gray-400 hover:text-white text-sm transition-colors\">\n              Terms of Service\n            </a>\n            <a href=\"#\" className=\"text-gray-400 hover:text-white text-sm transition-colors\">\n              Cookies\n            </a>\n          </div>\n        </motion.div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","size_bytes":5451},"client/src/components/Layout/Navbar.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Search, ShoppingCart, User, Menu, X, Home, Package, Heart, Settings, ShoppingBag } from 'lucide-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../store';\nimport { toggleCart } from '../../store/slices/cartSlice';\nimport { setSearchQuery } from '../../store/slices/productSlice';\nimport { logout } from '../../store/slices/authSlice';\nimport AuthModal from '../Auth/AuthModal';\n\ninterface NavbarProps {\n  onNavigate: (page: string) => void;\n}\n\nconst Navbar: React.FC<NavbarProps> = ({ onNavigate }) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [searchInput, setSearchInput] = useState('');\n  const [showAuthModal, setShowAuthModal] = useState(false);\n  const [searchSuggestions, setSearchSuggestions] = useState<string[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const { user } = useSelector((state: RootState) => state.auth);\n  \n  const dispatch = useDispatch();\n  const { items } = useSelector((state: RootState) => state.cart);\n  const { products } = useSelector((state: RootState) => state.products);\n  \n  // Authentication is handled by API service\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      dispatch(setSearchQuery(searchInput));\n      \n      // Generate search suggestions\n      if (searchInput.length > 0) {\n        const suggestions = products\n          .filter(product => \n            product.name.toLowerCase().includes(searchInput.toLowerCase()) ||\n            product.category.toLowerCase().includes(searchInput.toLowerCase())\n          )\n          .slice(0, 5)\n          .map(product => product.name);\n        setSearchSuggestions(suggestions);\n        setShowSuggestions(true);\n      } else {\n        setShowSuggestions(false);\n      }\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchInput, dispatch, products]);\n\n  const cartItemCount = items.reduce((sum, item) => sum + item.quantity, 0);\n\n  const navItems = [\n    { name: 'Home', icon: Home, page: 'home' },\n    { name: 'Products', icon: Package, page: 'products' },\n    { name: 'Orders', icon: ShoppingBag, page: 'orders' },\n    { name: 'Wishlist', icon: Heart, page: 'wishlist' },\n    { name: 'Account', icon: Settings, page: 'account' },\n  ];\n\n  const handleNavigation = (page: string) => {\n    if ((page === 'wishlist' || page === 'account' || page === 'orders') && !user) {\n      setShowAuthModal(true);\n      return;\n    }\n    onNavigate(page);\n    setIsMenuOpen(false);\n  };\n\n  const handleLogout = async () => {\n    dispatch(logout());\n    onNavigate('home');\n  };\n\n  const handleLogoClick = () => {\n    onNavigate('home');\n  };\n\n  return (\n    <>\n      <motion.nav\n        initial={{ y: -100 }}\n        animate={{ y: 0 }}\n        className={`fixed top-0 left-0 right-0 z-40 transition-all duration-300 ${\n          isScrolled \n            ? 'bg-white/95 backdrop-blur-md shadow-lg' \n            : 'bg-transparent'\n        }`}\n      >\n        <div className=\"px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-20\">\n            {/* Logo with proper spacing */}\n            <motion.div \n              className=\"flex items-center cursor-pointer mr-16\"\n              whileHover={{ scale: 1.05 }}\n              transition={{ type: \"spring\", stiffness: 400 }}\n              onClick={handleLogoClick}\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-xl flex items-center justify-center shadow-lg\">\n                  <Home className=\"w-7 h-7 text-white\" />\n                </div>\n                <span className=\"text-3xl font-bold text-gray-800\">Interoo</span>\n              </div>\n            </motion.div>\n\n            {/* Desktop Navigation with proper spacing */}\n            <div className=\"hidden lg:flex items-center space-x-8 xl:space-x-12\">\n              {navItems.map((item) => (\n                <motion.button\n                  key={item.name}\n                  onClick={() => handleNavigation(item.page)}\n                  className=\"flex items-center space-x-2 text-gray-700 hover:text-yellow-600 transition-colors px-2 xl:px-4 py-3 rounded-lg\"\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                >\n                  <item.icon className=\"w-5 h-5\" />\n                  <span className=\"font-medium text-sm xl:text-lg\">{item.name}</span>\n                </motion.button>\n              ))}\n            </div>\n\n            {/* Search Bar */}\n            <div className=\"hidden md:flex items-center max-w-sm lg:max-w-md w-full mx-4 lg:mx-8 relative\">\n              <div className=\"relative w-full\">\n                <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search products...\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  onFocus={() => setShowSuggestions(searchInput.length > 0)}\n                  onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}\n                  className=\"w-full pl-12 pr-4 py-3 lg:py-4 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent bg-white/90 backdrop-blur-sm text-sm lg:text-lg\"\n                />\n                \n                {/* Search Suggestions */}\n                <AnimatePresence>\n                  {showSuggestions && searchSuggestions.length > 0 && (\n                    <motion.div\n                      initial={{ opacity: 0, y: -10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, y: -10 }}\n                      className=\"absolute top-full left-0 right-0 bg-white border border-gray-200 rounded-lg shadow-lg mt-1 z-50\"\n                    >\n                      {searchSuggestions.map((suggestion, index) => (\n                        <button\n                          key={index}\n                          onClick={() => {\n                            setSearchInput(suggestion);\n                            setShowSuggestions(false);\n                          }}\n                          className=\"w-full text-left px-4 py-3 hover:bg-gray-50 transition-colors first:rounded-t-lg last:rounded-b-lg\"\n                        >\n                          {suggestion}\n                        </button>\n                      ))}\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n              </div>\n            </div>\n\n            {/* Right Side Actions */}\n            <div className=\"flex items-center space-x-6\">\n              {/* User Profile */}\n              {user ? (\n                <motion.button\n                  onClick={() => handleNavigation('account')}\n                  className=\"flex items-center space-x-3 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors\"\n                  whileHover={{ scale: 1.05 }}\n                >\n                  <div className=\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center overflow-hidden\">\n                    {user?.user_metadata?.avatar_url ? (\n                      <img src={user.user_metadata.avatar_url} alt={user.user_metadata.full_name} className=\"w-full h-full object-cover\" />\n                    ) : (\n                      <User className=\"w-5 h-5 text-gray-600\" />\n                    )}\n                  </div>\n                  <span className=\"hidden sm:block text-lg font-medium text-gray-700\">\n                    {user?.fullName || user?.email || 'User'}\n                  </span>\n                </motion.button>\n              ) : (\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  onClick={() => setShowAuthModal(true)}\n                  className=\"flex items-center space-x-2 text-gray-700 hover:text-yellow-600 transition-colors px-4 py-3 rounded-lg \"\n                >\n                  <User className=\"w-6 h-6\" />\n                  <span className=\"hidden sm:block font-medium text-lg\">Sign In</span>\n                </motion.button>\n              )}\n\n              {/* Cart */}\n              <motion.button\n                onClick={() => dispatch(toggleCart())}\n                className=\"relative p-3 text-gray-700 hover:text-yellow-600 transition-colors rounded-lg\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <ShoppingCart className=\"w-7 h-7\" />\n                {cartItemCount > 0 && (\n                  <motion.span\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    className=\"absolute -top-1 -right-1 bg-yellow-600 text-white text-sm rounded-full w-6 h-6 flex items-center justify-center font-bold\"\n                  >\n                    {cartItemCount}\n                  </motion.span>\n                )}\n              </motion.button>\n\n              {/* Mobile Menu Button */}\n              <motion.button\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\n                className=\"lg:hidden p-3 text-gray-700 hover:text-yellow-600 transition-colors rounded-lg\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                {isMenuOpen ? <X className=\"w-7 h-7\" /> : <Menu className=\"w-7 h-7\" />}\n              </motion.button>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Menu */}\n        <AnimatePresence>\n          {isMenuOpen && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"lg:hidden bg-white/95 backdrop-blur-md border-t border-gray-200\"\n            >\n              <div className=\"px-4 py-6 space-y-4\">\n                {/* Mobile Search */}\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search products...\"\n                    value={searchInput}\n                    onChange={(e) => setSearchInput(e.target.value)}\n                    className=\"w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-transparent\"\n                  />\n                </div>\n\n                {/* Mobile Navigation Items */}\n                <div className=\"space-y-2\">\n                  {navItems.map((item) => (\n                    <motion.button\n                      key={item.name}\n                      onClick={() => handleNavigation(item.page)}\n                      className=\"flex items-center space-x-3 py-4 text-gray-700 hover:text-yellow-600 transition-colors w-full text-left rounded-lg hover:bg-yellow-50 px-4\"\n                      whileHover={{ x: 5 }}\n                    >\n                      <item.icon className=\"w-6 h-6\" />\n                      <span className=\"font-medium text-lg\">{item.name}</span>\n                    </motion.button>\n                  ))}\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.nav>\n\n      {/* Auth Modal */}\n      <AuthModal\n        isOpen={showAuthModal}\n        onClose={() => setShowAuthModal(false)}\n      />\n    </>\n  );\n};\n\nexport default Navbar;","size_bytes":12141},"client/src/components/Orders/MyOrders.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Package, Truck, CheckCircle, Clock, Eye, RotateCcw, MapPin, Phone } from 'lucide-react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store';\n\nconst MyOrders: React.FC = () => {\n  const { orders } = useSelector((state: RootState) => state.orders);\n  const { isAuthenticated } = useSelector((state: RootState) => state.auth);\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pt-20 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Package className=\"w-24 h-24 text-gray-300 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Sign in to view your orders</h2>\n          <p className=\"text-gray-600\">Track your purchases and order history</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n      case 'pending':\n        return <Clock className=\"w-5 h-5 text-yellow-600\" />;\n      case 'processing':\n        return <Package className=\"w-5 h-5 text-blue-600\" />;\n      case 'shipped':\n        return <Truck className=\"w-5 h-5 text-purple-600\" />;\n      case 'delivered':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'cancelled':\n        return <RotateCcw className=\"w-5 h-5 text-red-600\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'shipped':\n        return 'bg-purple-100 text-purple-800';\n      case 'delivered':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const renderOrderDetails = (order: any) => (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\"\n      onClick={() => setSelectedOrder(null)}\n    >\n      <div\n        className=\"bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Order Details</h2>\n            <button\n              onClick={() => setSelectedOrder(null)}\n              className=\"text-gray-500 hover:text-gray-700\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n\n          {/* Order Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Order Information</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Order ID:</span>\n                    <span className=\"font-mono\">{order.id}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Date:</span>\n                    <span>{formatDate(order.createdAt)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Status:</span>\n                    <span className={`px-2 py-1 rounded-full text-xs ${getStatusColor(order.status)}`}>\n                      {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Payment:</span>\n                    <span>{order.paymentMethod}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Shipping Address</h3>\n                <div className=\"text-sm text-gray-700 space-y-1\">\n                  <p className=\"font-medium\">{order.shippingAddress.fullName}</p>\n                  <p>{order.shippingAddress.address}</p>\n                  <p className=\"flex items-center space-x-1\">\n                    <Phone className=\"w-3 h-3\" />\n                    <span>{order.shippingAddress.phone}</span>\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-2\">Order Items</h3>\n              <div className=\"space-y-3\">\n                {order.items.map((item: any, index: number) => (\n                  <div key={index} className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n                    <img\n                      src={item.product.images[0]}\n                      alt={item.product.name}\n                      className=\"w-12 h-12 object-cover rounded-lg\"\n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-900 text-sm\">{item.product.name}</h4>\n                      <p className=\"text-xs text-gray-600\">Qty: {item.quantity}</p>\n                    </div>\n                    <p className=\"font-medium text-sm\">₹{item.price.toLocaleString('en-IN')}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Order Total */}\n          <div className=\"bg-gray-50 rounded-xl p-4 mb-6\">\n            <div className=\"flex justify-between text-lg font-bold\">\n              <span>Total Amount</span>\n              <span className=\"text-yellow-600\">₹{order.total.toLocaleString('en-IN')}</span>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3\">\n            {order.status === 'shipped' && (\n              <button className=\"flex-1 bg-blue-600 text-white py-3 rounded-xl font-semibold hover:bg-blue-700 transition-colors\">\n                Track Order\n              </button>\n            )}\n            {order.status === 'delivered' && (\n              <button className=\"flex-1 bg-yellow-600 text-white py-3 rounded-xl font-semibold hover:bg-yellow-700 transition-colors\">\n                Reorder\n              </button>\n            )}\n            <button\n              onClick={() => setSelectedOrder(null)}\n              className=\"flex-1 bg-gray-200 text-gray-800 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-colors\"\n            >\n              Close\n            </button>\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">My Orders</h1>\n          <p className=\"text-xl text-gray-600\">\n            {orders.length} {orders.length === 1 ? 'order' : 'orders'} found\n          </p>\n        </div>\n\n        {orders.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Package className=\"w-24 h-24 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No orders yet</h3>\n            <p className=\"text-gray-600 mb-6\">Start shopping to see your orders here</p>\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-8 py-3 rounded-xl font-semibold transition-colors\"\n            >\n              Browse Products\n            </motion.button>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {orders.map((order, index) => (\n              <motion.div\n                key={order.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n                className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\"\n              >\n                {/* Order Header */}\n                <div className=\"p-6 border-b border-gray-200\">\n                  <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n                    <div className=\"mb-4 sm:mb-0\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">\n                        Order {order.id}\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">\n                        Placed on {formatDate(order.createdAt)}\n                      </p>\n                      {order.estimatedDelivery && (\n                        <p className=\"text-sm text-gray-600\">\n                          Estimated delivery: {formatDate(order.estimatedDelivery)}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getStatusIcon(order.status)}\n                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(order.status)}`}>\n                          {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                        </span>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-lg font-bold text-gray-900\">\n                          ₹{order.total.toLocaleString('en-IN')}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          {order.items.length} {order.items.length === 1 ? 'item' : 'items'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Order Items Preview */}\n                <div className=\"p-6\">\n                  <div className=\"flex items-center space-x-4 mb-4\">\n                    {order.items.slice(0, 3).map((item: any, itemIndex: number) => (\n                      <img\n                        key={itemIndex}\n                        src={item.product.images[0]}\n                        alt={item.product.name}\n                        className=\"w-16 h-16 object-cover rounded-lg\"\n                      />\n                    ))}\n                    {order.items.length > 3 && (\n                      <div className=\"w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center\">\n                        <span className=\"text-sm text-gray-600\">+{order.items.length - 3}</span>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Order Actions */}\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <motion.button\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      onClick={() => setSelectedOrder(order)}\n                      className=\"flex items-center justify-center space-x-2 px-4 py-2 border border-gray-300 rounded-xl hover:border-gray-400 transition-colors\"\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                      <span>View Details</span>\n                    </motion.button>\n                    \n                    {order.status === 'shipped' && (\n                      <motion.button\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors\"\n                      >\n                        <Truck className=\"w-4 h-4\" />\n                        <span>Track Order</span>\n                      </motion.button>\n                    )}\n                    \n                    {order.status === 'delivered' && (\n                      <motion.button\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-yellow-600 text-white rounded-xl hover:bg-yellow-700 transition-colors\"\n                      >\n                        <RotateCcw className=\"w-4 h-4\" />\n                        <span>Reorder</span>\n                      </motion.button>\n                    )}\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        )}\n\n        {/* Order Details Modal */}\n        {selectedOrder && renderOrderDetails(selectedOrder)}\n      </div>\n    </div>\n  );\n};\n\nexport default MyOrders;","size_bytes":13420},"client/src/components/Payment/RazorpayCODPayment.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Truck, MapPin, Clock, AlertCircle, CheckCircle, Loader, IndianRupee } from 'lucide-react';\nimport { RazorpayService } from '../../services/razorpayService';\n\ninterface RazorpayCODPaymentProps {\n  amount: number;\n  customerInfo: {\n    name: string;\n    email: string;\n    contact: string;\n  };\n  orderId: string;\n  shippingAddress?: any;\n  onPaymentSuccess: (result: any) => void;\n  onPaymentError: (error: string) => void;\n}\n\nconst RazorpayCODPayment: React.FC<RazorpayCODPaymentProps> = ({\n  amount,\n  customerInfo,\n  orderId,\n  shippingAddress,\n  onPaymentSuccess,\n  onPaymentError\n}) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStep, setProcessingStep] = useState('');\n\n  const codFee = amount > 500 ? 0 : 49; // Free COD for orders above ₹500\n  const totalAmount = amount + codFee;\n\n  const handleCODConfirmation = async () => {\n    setIsProcessing(true);\n    setProcessingStep('Confirming Cash on Delivery order...');\n\n    try {\n      const result = await RazorpayService.processCODPayment(amount, customerInfo, orderId);\n      \n      if (result.success) {\n        setProcessingStep('Order confirmed successfully!');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Add COD fee to the result\n        const codResult = {\n          ...result,\n          amount: totalAmount,\n          codFee,\n          deliveryInstructions: 'Pay cash to delivery person upon receipt'\n        };\n        \n        onPaymentSuccess(codResult);\n      } else {\n        onPaymentError(result.errorMessage || 'Failed to confirm COD order');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'COD order confirmation failed';\n      onPaymentError(errorMessage);\n    } finally {\n      setIsProcessing(false);\n      setProcessingStep('');\n    }\n  };\n\n  if (isProcessing) {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"text-center py-12\"\n      >\n        <Loader className=\"w-16 h-16 text-green-600 animate-spin mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Confirming COD Order</h3>\n        <p className=\"text-gray-600 mb-4\">{processingStep}</p>\n        \n        <div className=\"bg-green-50 rounded-lg p-4 max-w-md mx-auto\">\n          <p className=\"text-sm text-green-800\">\n            Setting up your Cash on Delivery order...\n          </p>\n        </div>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"space-y-6\"\n    >\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Truck className=\"w-8 h-8 text-green-600\" />\n        </div>\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Cash on Delivery</h3>\n        <p className=\"text-gray-600\">\n          Pay with cash when your order is delivered to your doorstep.\n        </p>\n      </div>\n\n      {/* Payment Summary */}\n      <div className=\"bg-gray-50 rounded-xl p-4\">\n        <h4 className=\"font-medium text-gray-900 mb-3\">Payment Summary</h4>\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">Order Amount</span>\n            <span className=\"font-medium\">₹{amount.toLocaleString('en-IN')}</span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">COD Fee</span>\n            <span className=\"font-medium\">\n              {codFee === 0 ? 'Free' : `₹${codFee.toLocaleString('en-IN')}`}\n            </span>\n          </div>\n          <div className=\"border-t pt-2\">\n            <div className=\"flex justify-between font-semibold text-lg\">\n              <span>Total to Pay on Delivery</span>\n              <span className=\"text-green-600 flex items-center\">\n                <IndianRupee className=\"w-4 h-4\" />\n                {totalAmount.toLocaleString('en-IN')}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Delivery Information */}\n      {shippingAddress && (\n        <div className=\"bg-blue-50 rounded-xl p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <MapPin className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n            <div>\n              <h5 className=\"font-medium text-blue-900 mb-2\">Delivery Address</h5>\n              <div className=\"text-sm text-blue-800\">\n                <p className=\"font-medium\">{shippingAddress.fullName}</p>\n                <p>{shippingAddress.address}</p>\n                <p>{shippingAddress.city}, {shippingAddress.state} {shippingAddress.zipCode}</p>\n                <p>{shippingAddress.phone}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Delivery Timeline */}\n      <div className=\"bg-amber-50 rounded-xl p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <Clock className=\"w-5 h-5 text-amber-600 mt-0.5\" />\n          <div>\n            <h5 className=\"font-medium text-amber-900 mb-2\">Estimated Delivery</h5>\n            <p className=\"text-sm text-amber-800\">\n              Your order will be delivered within 3-5 business days. \n              You'll receive tracking information once your order is shipped.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* COD Benefits */}\n      <div className=\"bg-green-50 rounded-xl p-4\">\n        <h4 className=\"font-medium text-green-900 mb-3\">Cash on Delivery Benefits</h4>\n        <ul className=\"space-y-2 text-sm text-green-800\">\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>No need for online payment</span>\n          </li>\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>Inspect products before payment</span>\n          </li>\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>Pay only when you receive your order</span>\n          </li>\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>Secure and convenient</span>\n          </li>\n        </ul>\n      </div>\n\n      {/* Important Notes */}\n      <div className=\"bg-red-50 rounded-xl p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <AlertCircle className=\"w-5 h-5 text-red-600 mt-0.5\" />\n          <div>\n            <h5 className=\"font-medium text-red-900 mb-2\">Important Notes</h5>\n            <ul className=\"text-sm text-red-800 space-y-1\">\n              <li>• Please have the exact amount ready for payment</li>\n              <li>• COD fee of ₹{codFee} applies for orders under ₹500</li>\n              <li>• Payment must be made in cash only</li>\n              <li>• Someone must be available to receive the delivery</li>\n              <li>• Orders are confirmed immediately upon selection</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Confirm Button */}\n      <motion.button\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n        onClick={handleCODConfirmation}\n        className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-xl font-semibold text-lg transition-colors flex items-center justify-center space-x-2\"\n      >\n        <Truck className=\"w-5 h-5\" />\n        <span>Confirm Cash on Delivery</span>\n      </motion.button>\n\n      {/* Help Text */}\n      <div className=\"text-center\">\n        <p className=\"text-sm text-gray-500\">\n          Questions about cash on delivery? \n          <a href=\"#\" className=\"text-green-600 hover:text-green-700 ml-1\">\n            View our COD policy\n          </a>\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default RazorpayCODPayment;","size_bytes":8172},"client/src/components/Payment/RazorpayUPIPayment.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Smartphone, Truck, Check } from 'lucide-react';\nimport { createClient } from '@supabase/supabase-js';\n\n// 🚀 CHANGE REQUIRED: Replace with your Supabase project URL\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'YOUR_SUPABASE_PROJECT_URL';\n// 🚀 CHANGE REQUIRED: Replace with your Supabase anon/public key\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'YOUR_SUPABASE_ANON_KEY';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nexport type StreamlinedPaymentMethodType = 'upi' | 'cod' | 'razorpay-upi';\n\ninterface StreamlinedPaymentMethodProps {\n  selectedMethod: StreamlinedPaymentMethodType;\n  onMethodChange: (method: StreamlinedPaymentMethodType) => void;\n  totalAmount: number; // 🚀 ADDED: Make sure parent component passes this prop\n}\n\nconst StreamlinedPaymentMethod: React.FC<StreamlinedPaymentMethodProps> = ({ \n  selectedMethod, \n  onMethodChange,\n  totalAmount\n}) => {\n  // 🚀 CHANGE REQUIRED: Replace with your actual UPI ID\n  const ownerUPIId = 'your-upi-id@upi'; // Example: 'mybusiness@oksbi'\n  // 🚀 CHANGE REQUIRED: Replace with your business name\n  const ownerName = 'Your Business Name'; // Example: 'My Awesome Store'\n\n  const handleMethodClick = async (methodId: StreamlinedPaymentMethodType) => {\n    console.log('Payment method selected:', methodId);\n    onMethodChange(methodId);\n    \n    if (methodId === 'upi') {\n      const upiLink = generateUPILink(totalAmount);\n      window.open(upiLink, '_blank');\n      \n      await logPaymentAttempt(methodId, totalAmount);\n    }\n    // 🚀 NOTE: For Razorpay integration, you'll need additional implementation here\n    // You would typically initialize Razorpay checkout when methodId === 'razorpay-upi'\n  };\n\n  const generateUPILink = (amount: number): string => {\n    // 🚀 OPTIONAL: You can customize the payment note (tn parameter)\n    return `upi://pay?pa=${ownerUPIId}&pn=${encodeURIComponent(ownerName)}&am=${amount}&cu=INR&tn=Payment for order`;\n  };\n\n  const logPaymentAttempt = async (method: string, amount: number) => {\n    try {\n      const {error } = await supabase\n        .from('payment_logs') // 🚀 CHANGE REQUIRED: Ensure this table exists in your Supabase\n        .insert([\n          { \n            payment_method: method, \n            amount: amount,\n            status: 'initiated',\n            created_at: new Date().toISOString()\n            // 🚀 OPTIONAL: Add order_id or user_id if available\n          }\n        ]);\n      \n      if (error) throw error;\n    } catch (err) {\n      console.error('Error logging payment:', err);\n      // 🚀 OPTIONAL: Add error handling UI feedback\n    }\n  };\n\n  const paymentMethods = [\n    {\n      id: 'upi' as StreamlinedPaymentMethodType,\n      name: 'UPI Payment',\n      description: 'Pay using UPI apps or scan QR code',\n      icon: Smartphone,\n      color: 'bg-blue-500',\n      available: true,\n    },\n    {\n      id: 'razorpay-upi' as StreamlinedPaymentMethodType,\n      name: 'UPI via Razorpay',\n      description: 'Secure UPI payment through Razorpay gateway',\n      icon: Smartphone,\n      color: 'bg-purple-500',\n      available: true,\n      // 🚀 NOTE: This requires Razorpay account setup and proper integration\n    },\n    {\n      id: 'cod' as StreamlinedPaymentMethodType,\n      name: 'Cash on Delivery',\n      description: 'Pay when you receive your order',\n      icon: Truck,\n      color: 'bg-green-500',\n      available: true,\n      // 🚀 NOTE: You'll need to handle COD order confirmation separately\n    },\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-xl font-semibold text-gray-900 mb-6\">Select Payment Method</h3>\n      \n      {selectedMethod === 'upi' && (\n        <div className=\"bg-blue-50 p-4 rounded-lg mb-4\">\n          <p className=\"text-blue-800\">\n            You'll be redirected to your UPI app to complete payment to {ownerName} ({ownerUPIId})\n            {/* 🚀 OPTIONAL: Add QR code display here */}\n          </p>\n        </div>\n      )}\n      \n      <div className=\"space-y-3\">\n        {paymentMethods.map((method) => (\n          <motion.div\n            key={method.id}\n            whileHover={{ scale: 1.01 }}\n            whileTap={{ scale: 0.99 }}\n            className={`cursor-pointer rounded-xl border-2 p-4 transition-all ${\n              selectedMethod === method.id\n                ? 'border-yellow-500 bg-yellow-50'\n                : 'border-gray-200 hover:border-gray-300'\n            }`}\n            onClick={() => handleMethodClick(method.id)}\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className={`p-2 rounded-lg ${method.color} text-white`}>\n                <method.icon className=\"w-5 h-5\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-gray-900\">{method.name}</h4>\n                <p className=\"text-sm text-gray-600\">{method.description}</p>\n                {/* 🚀 OPTIONAL: Add processing fees or other payment method details */}\n              </div>\n              <div className={`w-5 h-5 rounded-full border-2 ${\n                selectedMethod === method.id\n                  ? 'border-yellow-500 bg-yellow-500'\n                  : 'border-gray-300'\n              }`}>\n                {selectedMethod === method.id && (\n                  <Check className=\"w-3 h-3 text-white m-0.5\" />\n                )}\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* 🚀 OPTIONAL: Add payment terms and conditions section */}\n      {/* 🚀 OPTIONAL: Add saved UPI IDs feature for returning customers */}\n    </div>\n  );\n};\n\nexport default StreamlinedPaymentMethod;","size_bytes":5764},"client/src/components/Payment/StreamlinedCODPayment.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Truck, MapPin, Clock, AlertCircle, CheckCircle, IndianRupee } from 'lucide-react';\n\ninterface StreamlinedCODPaymentProps {\n  amount: number;\n  customerInfo: {\n    name: string;\n    email: string;\n    contact: string;\n  };\n  shippingAddress?: any;\n  onPaymentSuccess: (result: any) => void;\n}\n\nconst StreamlinedCODPayment: React.FC<StreamlinedCODPaymentProps> = ({\n  amount,\n  customerInfo,\n  shippingAddress,\n  onPaymentSuccess\n}) => {\n  const codFee = amount > 500 ? 0 : 49; // Free COD for orders above ₹500\n  const totalAmount = amount + codFee;\n\n  const handleCODConfirmation = () => {\n    onPaymentSuccess({\n      success: true,\n      transactionId: `COD_${Date.now()}_${Math.random().toString(36).substring(2, 8).toUpperCase()}`,\n      paymentMethod: 'Cash on Delivery',\n      amount: totalAmount,\n      codFee,\n      deliveryInstructions: 'Pay cash to delivery person upon receipt',\n      timestamp: Date.now(),\n    });\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"space-y-6\"\n    >\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Truck className=\"w-8 h-8 text-green-600\" />\n        </div>\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Cash on Delivery</h3>\n        <p className=\"text-gray-600\">\n          Pay at the time of delivery\n        </p>\n      </div>\n\n      {/* Payment Summary */}\n      <div className=\"bg-gray-50 rounded-xl p-4\">\n        <h4 className=\"font-medium text-gray-900 mb-3\">Payment Summary</h4>\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">Order Amount</span>\n            <span className=\"font-medium\">₹{amount.toLocaleString('en-IN')}</span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-600\">COD Fee</span>\n            <span className=\"font-medium\">\n              {codFee === 0 ? 'Free' : `₹${codFee.toLocaleString('en-IN')}`}\n            </span>\n          </div>\n          <div className=\"border-t pt-2\">\n            <div className=\"flex justify-between font-semibold text-lg\">\n              <span>Total to Pay on Delivery</span>\n              <span className=\"text-green-600 flex items-center\">\n                <IndianRupee className=\"w-4 h-4\" />\n                {totalAmount.toLocaleString('en-IN')}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Delivery Information */}\n      {shippingAddress && (\n        <div className=\"bg-blue-50 rounded-xl p-4\">\n          <div className=\"flex items-start space-x-3\">\n            <MapPin className=\"w-5 h-5 text-blue-600 mt-0.5\" />\n            <div>\n              <h5 className=\"font-medium text-blue-900 mb-2\">Delivery Address</h5>\n              <div className=\"text-sm text-blue-800\">\n                <p className=\"font-medium\">{shippingAddress.fullName}</p>\n                <p>{shippingAddress.address}</p>\n                <p>{shippingAddress.city}, {shippingAddress.state} {shippingAddress.zipCode}</p>\n                <p>{shippingAddress.phone}</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Delivery Timeline */}\n      <div className=\"bg-amber-50 rounded-xl p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <Clock className=\"w-5 h-5 text-amber-600 mt-0.5\" />\n          <div>\n            <h5 className=\"font-medium text-amber-900 mb-2\">Estimated Delivery</h5>\n            <p className=\"text-sm text-amber-800\">\n              Your order will be delivered within 3-5 business days. \n              You'll receive tracking information once your order is shipped.\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* COD Benefits */}\n      <div className=\"bg-green-50 rounded-xl p-4\">\n        <h4 className=\"font-medium text-green-900 mb-3\">Cash on Delivery Benefits</h4>\n        <ul className=\"space-y-2 text-sm text-green-800\">\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>No need for online payment</span>\n          </li>\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>Inspect products before payment</span>\n          </li>\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>Pay only when you receive your order</span>\n          </li>\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>Secure and convenient</span>\n          </li>\n        </ul>\n      </div>\n\n      {/* Important Notes */}\n      <div className=\"bg-red-50 rounded-xl p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <AlertCircle className=\"w-5 h-5 text-red-600 mt-0.5\" />\n          <div>\n            <h5 className=\"font-medium text-red-900 mb-2\">Important Notes</h5>\n            <ul className=\"text-sm text-red-800 space-y-1\">\n              <li>• Please have the exact amount ready for payment</li>\n              <li>• COD fee of ₹{codFee} applies for orders under ₹500</li>\n              <li>• Payment must be made in cash only</li>\n              <li>• Someone must be available to receive the delivery</li>\n              <li>• Orders are confirmed immediately upon selection</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Confirm Button */}\n      <motion.button\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n        onClick={handleCODConfirmation}\n        className=\"w-full bg-green-600 hover:bg-green-700 text-white py-4 rounded-xl font-semibold text-lg transition-colors flex items-center justify-center space-x-2\"\n      >\n        <Truck className=\"w-5 h-5\" />\n        <span>Confirm Cash on Delivery</span>\n      </motion.button>\n\n      {/* Help Text */}\n      <div className=\"text-center\">\n        <p className=\"text-sm text-gray-500\">\n          Questions about cash on delivery? \n          <a href=\"#\" className=\"text-green-600 hover:text-green-700 ml-1\">\n            View our COD policy\n          </a>\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default StreamlinedCODPayment;","size_bytes":6567},"client/src/components/Payment/StreamlinedPaymentMethod.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Smartphone, Truck, Check, CreditCard } from 'lucide-react';\n\nexport type StreamlinedPaymentMethodType = 'upi' | 'cod' | 'razorpay-upi';\n\ninterface StreamlinedPaymentMethodProps {\n  selectedMethod: StreamlinedPaymentMethodType;\n  onMethodChange: (method: StreamlinedPaymentMethodType) => void;\n}\n\nconst StreamlinedPaymentMethod: React.FC<StreamlinedPaymentMethodProps> = ({ \n  selectedMethod, \n  onMethodChange \n}) => {\n  const handleMethodClick = (methodId: StreamlinedPaymentMethodType) => {\n    console.log('Payment method selected:', methodId);\n    onMethodChange(methodId);\n  };\n\n  const paymentMethods = [\n    {\n      id: 'upi' as StreamlinedPaymentMethodType,\n      name: 'UPI Payment',\n      description: 'QR Code, UPI ID, and UPI app links',\n      icon: Smartphone,\n      color: 'bg-blue-500',\n      available: true,\n    },\n    {\n      id: 'cod' as StreamlinedPaymentMethodType,\n      name: 'Cash on Delivery',\n      description: 'Pay at the time of delivery',\n      icon: Truck,\n      color: 'bg-green-500',\n      available: true,\n    },\n    {\n      id: 'razorpay-upi' as StreamlinedPaymentMethodType,\n      name: 'Razorpay (UPI Only)',\n      description: 'Secure UPI payment through Razorpay gateway',\n      icon: Smartphone,\n      color: 'bg-purple-500',\n      available: true,\n    },\n  ];\n\n  return (\n    <div className=\"space-y-4\">\n      <h3 className=\"text-xl font-semibold text-gray-900 mb-6\">Select Payment Method</h3>\n      \n      <div className=\"space-y-3\">\n        {paymentMethods.map((method) => (\n          <motion.div\n            key={method.id}\n            whileHover={{ scale: 1.01 }}\n            whileTap={{ scale: 0.99 }}\n            className={`cursor-pointer rounded-xl border-2 p-4 transition-all ${\n              selectedMethod === method.id\n                ? 'border-yellow-500 bg-yellow-50'\n                : 'border-gray-200 hover:border-gray-300'\n            }`}\n            onClick={() => handleMethodClick(method.id)}\n          >\n            <div className=\"flex items-center space-x-3\">\n              <div className={`p-2 rounded-lg ${method.color} text-white`}>\n                <method.icon className=\"w-5 h-5\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-gray-900\">{method.name}</h4>\n                <p className=\"text-sm text-gray-600\">{method.description}</p>\n              </div>\n              <div className={`w-5 h-5 rounded-full border-2 ${\n                selectedMethod === method.id\n                  ? 'border-yellow-500 bg-yellow-500'\n                  : 'border-gray-300'\n              }`}>\n                {selectedMethod === method.id && (\n                  <Check className=\"w-3 h-3 text-white m-0.5\" />\n                )}\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default StreamlinedPaymentMethod;","size_bytes":2968},"client/src/components/Payment/StreamlinedPaymentSection.tsx":{"content":"import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport StreamlinedUPIPayment from './StreamlinedUPIPayment';\nimport StreamlinedRazorpayUPI from './StreamlinedRazorpayUPI';\nimport StreamlinedCODPayment from './StreamlinedCODPayment';\nimport { StreamlinedPaymentMethodType } from './StreamlinedPaymentMethod';\n\ninterface StreamlinedPaymentSectionProps {\n  amount: number;\n  paymentMethod: StreamlinedPaymentMethodType;\n  customerInfo: {\n    name: string;\n    email: string;\n    contact: string;\n  };\n  orderId: string;\n  shippingAddress?: any;\n  onPaymentSuccess: (result: any) => void;\n  onPaymentError: (error: string) => void;\n}\n\n/**\n * Streamlined Payment Section Component\n * Renders the appropriate payment component based on selected method\n */\nconst StreamlinedPaymentSection: React.FC<StreamlinedPaymentSectionProps> = ({\n  amount,\n  paymentMethod,\n  customerInfo,\n  orderId,\n  shippingAddress,\n  onPaymentSuccess,\n  onPaymentError,\n}) => {\n  console.log('StreamlinedPaymentSection rendered with:', { \n    amount, \n    paymentMethod, \n    customerInfo, \n    orderId \n  });\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"space-y-6\"\n    >\n      <AnimatePresence mode=\"wait\">\n        {paymentMethod === 'upi' && (\n          <>\n            {console.log('Rendering UPI payment component')}\n          <StreamlinedUPIPayment\n            key=\"upi\"\n            amount={amount}\n            orderId={orderId}\n            onPaymentSuccess={onPaymentSuccess}\n            onPaymentError={onPaymentError}\n          />\n          </>\n        )}\n        \n        {paymentMethod === 'razorpay-upi' && (\n          <>\n            {console.log('Rendering Razorpay UPI payment component')}\n          <StreamlinedRazorpayUPI\n            key=\"razorpay-upi\"\n            amount={amount}\n            customerInfo={customerInfo}\n            orderId={orderId}\n            onPaymentSuccess={onPaymentSuccess}\n            onPaymentError={onPaymentError}\n          />\n          </>\n        )}\n        \n        {paymentMethod === 'cod' && (\n          <>\n            {console.log('Rendering COD payment component')}\n          <StreamlinedCODPayment\n            key=\"cod\"\n            amount={amount}\n            customerInfo={customerInfo}\n            shippingAddress={shippingAddress}\n            onPaymentSuccess={onPaymentSuccess}\n          />\n          </>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n};\n\nexport default StreamlinedPaymentSection;","size_bytes":2545},"client/src/components/Payment/StreamlinedRazorpayUPI.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Smartphone, Lock, AlertCircle, CheckCircle, Loader, Shield } from 'lucide-react';\nimport { RazorpayService } from '../../services/razorpayService';\n\ninterface StreamlinedRazorpayUPIProps {\n  amount: number;\n  customerInfo: {\n    name: string;\n    email: string;\n    contact: string;\n  };\n  orderId: string;\n  onPaymentSuccess: (result: any) => void;\n  onPaymentError: (error: string) => void;\n}\n\nconst StreamlinedRazorpayUPI: React.FC<StreamlinedRazorpayUPIProps> = ({\n  amount,\n  customerInfo,\n  orderId,\n  onPaymentSuccess,\n  onPaymentError\n}) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [processingStep, setProcessingStep] = useState('');\n\n  const handleRazorpayUPIPayment = async () => {\n    if (!amount || amount <= 0) {\n      onPaymentError('Invalid payment amount');\n      return;\n    }\n\n    setIsProcessing(true);\n    setProcessingStep('Initializing Razorpay UPI payment...');\n    \n    console.log('Starting Razorpay UPI payment process...', { amount, customerInfo, orderId });\n\n    try {\n      const result = await RazorpayService.processUPIPayment(amount, customerInfo, orderId);\n      console.log('Razorpay UPI payment result:', result);\n      \n      if (result.success) {\n        setProcessingStep('Payment successful!');\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        \n        // Create a comprehensive success result\n        const successResult = {\n          ...result,\n          success: true,\n          transactionId: result.transactionId || `RZP_${Date.now()}_${Math.random().toString(36).substring(2, 8).toUpperCase()}`,\n          paymentMethod: 'UPI via Razorpay',\n          amount: amount,\n          orderId: orderId,\n          timestamp: Date.now(),\n          razorpayPaymentId: result.razorpayPaymentId,\n          razorpayOrderId: result.razorpayOrderId,\n          razorpaySignature: result.razorpaySignature\n        };\n        \n        onPaymentSuccess(successResult);\n      } else {\n        onPaymentError(result.errorMessage || 'UPI payment failed');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'UPI payment failed';\n      console.error('Razorpay UPI payment error:', error);\n      onPaymentError(errorMessage);\n    } finally {\n      setIsProcessing(false);\n      setProcessingStep('');\n    }\n  };\n\n  if (isProcessing) {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        className=\"text-center py-12\"\n      >\n        <Loader className=\"w-16 h-16 text-purple-600 animate-spin mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Processing UPI Payment</h3>\n        <p className=\"text-gray-600 mb-4\">{processingStep}</p>\n        \n        <div className=\"bg-purple-50 rounded-lg p-4 max-w-md mx-auto\">\n          <p className=\"text-sm text-purple-800\">\n            Please complete the payment in the Razorpay window that opened.\n          </p>\n        </div>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"space-y-6\"\n    >\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <Shield className=\"w-8 h-8 text-purple-600\" />\n        </div>\n        <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">UPI Payment via Razorpay</h3>\n        <p className=\"text-gray-600\">\n          Secure UPI payment powered by Razorpay. Pay using any UPI app.\n        </p>\n      </div>\n\n      {/* Payment Summary */}\n      <div className=\"bg-purple-50 rounded-xl p-4 text-center\">\n        <h4 className=\"text-lg font-semibold text-purple-900 mb-1\">Amount to Pay</h4>\n        <p className=\"text-3xl font-bold text-purple-600\">₹{(amount || 0).toLocaleString('en-IN')}</p>\n        {(!amount || amount <= 0) && (\n          <p className=\"text-sm text-red-600 mt-2\">⚠️ Invalid amount detected</p>\n        )}\n      </div>\n\n      {/* Customer Information */}\n      <div className=\"bg-gray-50 rounded-xl p-4\">\n        <h4 className=\"font-medium text-gray-900 mb-3\">Payment Details</h4>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Customer:</span>\n            <span className=\"font-medium\">{customerInfo.name}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Email:</span>\n            <span className=\"font-medium\">{customerInfo.email}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Contact:</span>\n            <span className=\"font-medium\">{customerInfo.contact}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Order ID:</span>\n            <span className=\"font-mono text-sm\">{orderId}</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Razorpay UPI Benefits */}\n      <div className=\"bg-green-50 rounded-xl p-4\">\n        <h4 className=\"font-medium text-green-900 mb-3\">Secure UPI Payment</h4>\n        <ul className=\"space-y-2 text-sm text-green-800\">\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>Instant payment confirmation</span>\n          </li>\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>Secure payment through Razorpay</span>\n          </li>\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>No additional charges</span>\n          </li>\n          <li className=\"flex items-center space-x-2\">\n            <CheckCircle className=\"w-4 h-4 text-green-600\" />\n            <span>Works with all UPI apps</span>\n          </li>\n        </ul>\n      </div>\n\n      {/* Test UPI Information */}\n      <div className=\"bg-blue-50 rounded-xl p-4\">\n        <h4 className=\"font-medium text-blue-900 mb-3\">Test UPI IDs (Demo Mode)</h4>\n        <div className=\"text-sm text-blue-800 space-y-1\">\n          <p>• <strong>Success:</strong> success@razorpay</p>\n          <p>• <strong>Failure:</strong> failure@razorpay</p>\n          <p>• Use any UPI ID for testing different scenarios</p>\n        </div>\n      </div>\n\n      {/* Payment Button */}\n      <motion.button\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n        onClick={handleRazorpayUPIPayment}\n        disabled={!amount || amount <= 0 || isProcessing}\n        className={`w-full ${(!amount || amount <= 0 || isProcessing) ? 'bg-gray-400 cursor-not-allowed' : 'bg-purple-600 hover:bg-purple-700'} text-white py-4 rounded-xl font-semibold text-lg transition-colors flex items-center justify-center space-x-2`}\n      >\n        <Smartphone className=\"w-5 h-5\" />\n        <span>{isProcessing ? 'Processing...' : 'Pay with UPI'}</span>\n      </motion.button>\n\n      {/* Security Notice */}\n      <div className=\"text-center\">\n        <div className=\"flex items-center justify-center space-x-2 text-gray-600 mb-2\">\n          <Lock className=\"w-4 h-4\" />\n          <span className=\"text-sm\">Secured by Razorpay</span>\n        </div>\n        <p className=\"text-xs text-gray-500\">\n          Your payment is secure and encrypted\n        </p>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default StreamlinedRazorpayUPI;","size_bytes":7658},"client/src/components/Payment/StreamlinedUPIPayment.tsx":{"content":"/**\n * Enhanced UPI Payment Component with Razorpay Integration\n * \n * This component provides two UPI payment options:\n * 1. Open with UPI Apps (GPay, PhonePe, Paytm) - using Razorpay UPI Intent\n * 2. Scan QR Code - Display dummy Razorpay QR with 180-second countdown\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Smartphone, Clock, Copy, Check, QrCode, ExternalLink, ArrowLeft, Shield } from 'lucide-react';\nimport QRCode from 'qrcode';\nimport { RazorpayService } from '../../services/razorpayService';\nimport { RAZORPAY_CONFIG } from '../../config/razorpay';\n\n// =============================================\n// TYPE DEFINITIONS\n// =============================================\ntype UPIPaymentMode = 'selection' | 'apps' | 'qr';\n\ninterface PaymentSuccessResult {\n  success: boolean;\n  transactionId: string;\n  paymentMethod: string;\n  amount: number;\n  upiId?: string;\n  orderId: string;\n  timestamp: number;\n}\n\ninterface UPIApp {\n  name: string;\n  icon: string;\n  brandColor: string;\n  description: string;\n}\n\ninterface StreamlinedUPIPaymentProps {\n  amount: number;\n  orderId: string;\n  onPaymentSuccess: (result: PaymentSuccessResult) => void;\n  onPaymentError: (error: string) => void;\n}\n\n// =============================================\n// MAIN COMPONENT\n// =============================================\nconst StreamlinedUPIPayment: React.FC<StreamlinedUPIPaymentProps> = ({ \n  amount, \n  orderId,\n  onPaymentSuccess, \n  onPaymentError \n}) => {\n  // =============================================\n  // STATE MANAGEMENT\n  // =============================================\n  const [paymentMode, setPaymentMode] = useState<UPIPaymentMode>('selection');\n  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');\n  const [timer, setTimer] = useState(180); // 180 seconds (3 minutes) for QR\n  const [isExpired, setIsExpired] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [copied, setCopied] = useState(false);\n\n  // =============================================\n  // PAYMENT CONFIGURATION\n  // =============================================\n  // UPI payment details with Razorpay\n  const upiId = RAZORPAY_CONFIG.company.testCredentials.upiId; // test@razorpay\n  const merchantName = RAZORPAY_CONFIG.company.name;\n  const transactionId = `RZP_UPI_${Date.now()}_${orderId}`;\n\n  // Customer info for Razorpay\n  const customerInfo = {\n    name: 'Test Customer',\n    email: 'test@example.com',\n    contact: '9999999999'\n  };\n\n  // Supported UPI apps for Razorpay Intent\n  const upiApps: UPIApp[] = [\n    {\n      name: 'Google Pay',\n      icon: '💰',\n      brandColor: 'bg-blue-600',\n      description: 'Pay securely with Google Pay'\n    },\n    {\n      name: 'PhonePe',\n      icon: '📱', \n      brandColor: 'bg-purple-600',\n      description: 'Pay instantly with PhonePe'\n    },\n    {\n      name: 'Paytm',\n      icon: '💳',\n      brandColor: 'bg-indigo-600',\n      description: 'Pay quickly with Paytm'\n    }\n  ];\n\n  // Generate dummy Razorpay QR for testing\n  const generateRazorpayQR = async () => {\n    const razorpayUpiLink = `upi://pay?pa=${upiId}&pn=${encodeURIComponent(merchantName)}&am=${amount}&cu=INR&tn=Razorpay%20Payment%20for%20Order%20${orderId}&mc=5411`;\n    \n    try {\n      const url = await QRCode.toDataURL(razorpayUpiLink, {\n        width: 256,\n        margin: 2,\n        color: { dark: '#3B82F6', light: '#FFFFFF' }\n      });\n      setQrCodeUrl(url);\n    } catch (err) {\n      console.error('QR generation failed:', err);\n      onPaymentError('Failed to generate Razorpay QR code');\n    }\n  };\n\n  // =============================================\n  // EFFECTS AND LIFECYCLE METHODS\n  // =============================================\n  useEffect(() => {\n    if (paymentMode === 'qr') {\n      generateRazorpayQR();\n      \n      // Start 180-second countdown timer for QR\n      const interval = setInterval(() => {\n        setTimer(prev => {\n          if (prev <= 1) {\n            clearInterval(interval);\n            setIsExpired(true);\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [paymentMode]);\n\n  // =============================================\n  // HELPER FUNCTIONS\n  // =============================================\n  /**\n   * Handle UPI app selection via Razorpay UPI Intent\n   */\n  const handleUPIAppClick = async (app: UPIApp) => {\n    if (isProcessing) return;\n    \n    console.log(`Opening ${app.name} for payment with Razorpay...`);\n    setIsProcessing(true);\n    \n    try {\n      // Create Razorpay order on server\n      const orderResponse = await fetch('/api/payments/razorpay/create-order', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          amount: amount,\n          currency: 'INR',\n          receipt: orderId,\n          notes: {\n            paymentMethod: 'UPI',\n            upiApp: app.name,\n          },\n        }),\n      });\n      \n      if (!orderResponse.ok) {\n        throw new Error('Failed to create Razorpay order');\n      }\n      \n      const orderData = await orderResponse.json();\n      console.log('Razorpay order created:', orderData);\n      \n      // Load Razorpay script dynamically\n      const loadRazorpay = () => {\n        return new Promise((resolve) => {\n          const script = document.createElement('script');\n          script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n          script.onload = () => resolve((window as any).Razorpay);\n          document.body.appendChild(script);\n        });\n      };\n      \n      const razorpay = await loadRazorpay() as any;\n      \n      const options = {\n        key: RAZORPAY_CONFIG.keyId,\n        amount: amount * 100, // Convert to paise\n        currency: 'INR',\n        name: RAZORPAY_CONFIG.company.name,\n        description: `Payment via ${app.name}`,\n        image: RAZORPAY_CONFIG.company.logo,\n        order_id: orderData.order.id,\n        method: {\n          upi: true,\n        },\n        prefill: {\n          name: 'Customer Name',\n          email: 'customer@example.com',\n          contact: '9999999999',\n        },\n        theme: {\n          color: RAZORPAY_CONFIG.company.theme.color,\n        },\n        handler: async (response: any) => {\n          console.log('Razorpay payment successful:', response);\n          \n          try {\n            // Verify payment on server\n            const verifyResponse = await fetch('/api/payments/razorpay/verify', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n              },\n              body: JSON.stringify({\n                razorpayOrderId: response.razorpay_order_id,\n                razorpayPaymentId: response.razorpay_payment_id,\n                razorpaySignature: response.razorpay_signature,\n              }),\n            });\n            \n            if (verifyResponse.ok) {\n              const verifyData = await verifyResponse.json();\n              console.log('Payment verified:', verifyData);\n              \n              const result: PaymentSuccessResult = {\n                success: true,\n                transactionId: response.razorpay_payment_id,\n                paymentMethod: `${app.name} UPI`,\n                amount: amount,\n                upiId: upiId,\n                orderId: orderId,\n                timestamp: Date.now(),\n              };\n              \n              setIsProcessing(false);\n              onPaymentSuccess(result);\n            } else {\n              throw new Error('Payment verification failed');\n            }\n          } catch (verifyError) {\n            console.error('Payment verification error:', verifyError);\n            setIsProcessing(false);\n            onPaymentError('Payment verification failed. Please contact support.');\n          }\n        },\n        modal: {\n          ondismiss: () => {\n            console.log('Payment modal closed by user');\n            setIsProcessing(false);\n            onPaymentError('Payment was cancelled by user');\n          },\n        },\n      };\n      \n      const rzp = new razorpay(options);\n      rzp.open();\n      \n    } catch (error) {\n      console.error('UPI payment error:', error);\n      setIsProcessing(false);\n      onPaymentError(`Payment failed with ${app.name}. Please try again.`);\n    }\n  };\n\n  /**\n   * Copy UPI ID to clipboard\n   */\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n      onPaymentError('Failed to copy UPI ID to clipboard');\n    }\n  };\n\n  /**\n   * Handle QR payment completion\n   */\n  const handleQRPaymentComplete = async () => {\n    setIsProcessing(true);\n    try {\n      // Simulate QR payment verification\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      onPaymentSuccess({\n        success: true,\n        transactionId: `RZP_QR_${Date.now()}_${Math.random().toString(36).substring(2, 8).toUpperCase()}`,\n        paymentMethod: 'UPI via Razorpay QR',\n        amount,\n        upiId,\n        orderId,\n        timestamp: Date.now()\n      });\n    } catch (err) {\n      console.error('QR payment verification failed:', err);\n      onPaymentError('Failed to verify QR payment. Please contact support.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  /**\n   * Format time from seconds to MM:SS\n   */\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  /**\n   * Reset to selection mode\n   */\n  const resetToSelection = () => {\n    setPaymentMode('selection');\n    setIsExpired(false);\n    setTimer(180);\n    setQrCodeUrl('');\n  };\n\n  // =============================================\n  // RENDER COMPONENT\n  // =============================================\n  \n  // Selection Mode - Show two options\n  if (paymentMode === 'selection') {\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"space-y-6\"\n      >\n        {/* Payment Header */}\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Shield className=\"w-8 h-8 text-blue-600\" />\n          </div>\n          <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">UPI Payment via Razorpay</h3>\n          <p className=\"text-gray-600\">\n            Choose your preferred UPI payment method\n          </p>\n        </div>\n\n        {/* Payment Amount Display */}\n        <div className=\"bg-blue-50 rounded-xl p-4 text-center\">\n          <h4 className=\"text-lg font-semibold text-blue-900 mb-1\">Amount to Pay</h4>\n          <p className=\"text-3xl font-bold text-blue-600\">₹{amount.toLocaleString('en-IN')}</p>\n        </div>\n\n        {/* Two Payment Options */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-gray-900 text-center\">Select Payment Method</h4>\n          \n          {/* Option 1: Open with UPI Apps */}\n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={() => setPaymentMode('apps')}\n            className=\"w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white p-6 rounded-xl transition-all shadow-lg hover:shadow-xl\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                  <Smartphone className=\"w-6 h-6\" />\n                </div>\n                <div className=\"text-left\">\n                  <h5 className=\"text-lg font-semibold\">Open with UPI Apps</h5>\n                  <p className=\"text-blue-100 text-sm\">Pay directly through GPay, PhonePe, Paytm</p>\n                </div>\n              </div>\n              <ExternalLink className=\"w-5 h-5 text-blue-200\" />\n            </div>\n          </motion.button>\n\n          {/* Option 2: Scan QR Code */}\n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={() => setPaymentMode('qr')}\n            className=\"w-full bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white p-6 rounded-xl transition-all shadow-lg hover:shadow-xl\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                  <QrCode className=\"w-6 h-6\" />\n                </div>\n                <div className=\"text-left\">\n                  <h5 className=\"text-lg font-semibold\">Scan QR Code</h5>\n                  <p className=\"text-purple-100 text-sm\">Scan with any UPI app (180 sec timer)</p>\n                </div>\n              </div>\n              <Clock className=\"w-5 h-5 text-purple-200\" />\n            </div>\n          </motion.button>\n        </div>\n\n        {/* Razorpay Branding */}\n        <div className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 text-gray-600 mb-2\">\n            <Shield className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Secured by Razorpay</span>\n          </div>\n          <p className=\"text-xs text-gray-500\">\n            Safe and secure payments with bank-level security\n          </p>\n        </div>\n      </motion.div>\n    );\n  }\n\n  // UPI Apps Mode - Show UPI app options with Razorpay UPI Intent\n  if (paymentMode === 'apps') {\n    return (\n      <motion.div\n        initial={{ opacity: 0, x: 20 }}\n        animate={{ opacity: 1, x: 0 }}\n        className=\"space-y-6\"\n      >\n        {/* Header with Back Button */}\n        <div className=\"flex items-center justify-between\">\n          <button\n            onClick={resetToSelection}\n            className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n            <span>Back</span>\n          </button>\n          <h3 className=\"text-xl font-semibold text-gray-900\">Open with UPI Apps</h3>\n          <div></div>\n        </div>\n\n        {/* Payment Amount */}\n        <div className=\"bg-blue-50 rounded-xl p-4 text-center\">\n          <h4 className=\"text-lg font-semibold text-blue-900 mb-1\">Amount to Pay</h4>\n          <p className=\"text-3xl font-bold text-blue-600\">₹{amount.toLocaleString('en-IN')}</p>\n        </div>\n\n        {/* UPI Apps Grid */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-medium text-gray-900 text-center\">Select your UPI app</h4>\n          <div className=\"grid grid-cols-1 gap-4\">\n            {upiApps.map((app) => (\n              <motion.button\n                key={app.name}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => handleUPIAppClick(app)}\n                disabled={isProcessing}\n                className={`${app.brandColor} hover:opacity-90 text-white p-4 rounded-xl transition-all shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-white/20 rounded-full flex items-center justify-center\">\n                      <span className=\"text-2xl\">{app.icon}</span>\n                    </div>\n                    <div className=\"text-left\">\n                      <h5 className=\"text-lg font-semibold\">{app.name}</h5>\n                      <p className=\"text-white/80 text-sm\">{app.description}</p>\n                    </div>\n                  </div>\n                  {isProcessing ? (\n                    <div className=\"w-6 h-6 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                  ) : (\n                    <ExternalLink className=\"w-5 h-5 text-white/80\" />\n                  )}\n                </div>\n              </motion.button>\n            ))}\n          </div>\n        </div>\n\n        {/* Processing State */}\n        {isProcessing && (\n          <div className=\"bg-blue-50 rounded-xl p-4 text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-2\">\n              <div className=\"w-5 h-5 border-2 border-blue-600/30 border-t-blue-600 rounded-full animate-spin\" />\n              <span className=\"font-medium text-blue-900\">Processing Payment...</span>\n            </div>\n            <p className=\"text-sm text-blue-700\">\n              Please complete the payment in the opened UPI app\n            </p>\n          </div>\n        )}\n\n        {/* Instructions */}\n        <div className=\"bg-amber-50 rounded-xl p-4\">\n          <h4 className=\"font-medium text-amber-900 mb-2\">Payment Instructions</h4>\n          <ul className=\"text-sm text-amber-800 space-y-1\">\n            <li>• Select your preferred UPI app above</li>\n            <li>• The app will open with payment details pre-filled</li>\n            <li>• Verify the amount and merchant details</li>\n            <li>• Complete the payment using your UPI PIN</li>\n            <li>• You'll be redirected back automatically after payment</li>\n          </ul>\n        </div>\n      </motion.div>\n    );\n  }\n\n  // QR Code Mode - Show Razorpay QR with 180-second countdown\n  if (paymentMode === 'qr') {\n    return (\n      <motion.div\n        initial={{ opacity: 0, x: 20 }}\n        animate={{ opacity: 1, x: 0 }}\n        className=\"space-y-6\"\n      >\n        {/* Header with Back Button */}\n        <div className=\"flex items-center justify-between\">\n          <button\n            onClick={resetToSelection}\n            className=\"flex items-center space-x-2 text-gray-600 hover:text-gray-900 transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n            <span>Back</span>\n          </button>\n          <h3 className=\"text-xl font-semibold text-gray-900\">Scan QR Code</h3>\n          <div></div>\n        </div>\n\n        {/* Payment Amount */}\n        <div className=\"bg-purple-50 rounded-xl p-4 text-center\">\n          <h4 className=\"text-lg font-semibold text-purple-900 mb-1\">Amount to Pay</h4>\n          <p className=\"text-3xl font-bold text-purple-600\">₹{amount.toLocaleString('en-IN')}</p>\n        </div>\n\n        {/* Timer Display */}\n        {!isExpired && (\n          <div className=\"bg-amber-50 rounded-xl p-4 text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-2\">\n              <Clock className=\"w-5 h-5 text-amber-600\" />\n              <span className=\"font-medium text-amber-900\">\n                QR Code expires in {formatTime(timer)}\n              </span>\n            </div>\n            <div className=\"w-full bg-amber-200 rounded-full h-2\">\n              <div\n                className=\"bg-amber-600 h-2 rounded-full transition-all duration-1000\"\n                style={{ width: `${(timer / 180) * 100}%` }}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Razorpay QR Code Display */}\n        {!isExpired && qrCodeUrl && (\n          <div className=\"bg-white rounded-xl p-6 text-center border-2 border-purple-200\">\n            {/* Razorpay Branding */}\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <Shield className=\"w-5 h-5 text-purple-600\" />\n              <span className=\"text-sm font-medium text-purple-900\">Powered by Razorpay</span>\n            </div>\n            \n            <img\n              src={qrCodeUrl}\n              alt=\"Razorpay UPI QR Code\"\n              className=\"w-64 h-64 mx-auto mb-4 border border-purple-100 rounded-lg\"\n            />\n            <div className=\"space-y-2\">\n              <p className=\"text-lg font-semibold text-gray-900\">Scan & Pay</p>\n              <p className=\"text-sm text-gray-600\">Pay to: {merchantName}</p>\n              <p className=\"text-xs text-gray-500\">UPI ID: {upiId}</p>\n            </div>\n          </div>\n        )}\n\n        {/* UPI ID Copy Section */}\n        <div className=\"bg-gray-50 rounded-xl p-4\">\n          <h4 className=\"font-medium text-gray-900 mb-3\">Or pay manually using UPI ID</h4>\n          <div className=\"flex items-center justify-between p-3 bg-white rounded-lg border\">\n            <div>\n              <p className=\"text-sm text-gray-600\">UPI ID</p>\n              <p className=\"font-mono text-gray-900\">{upiId}</p>\n            </div>\n            <button\n              onClick={() => copyToClipboard(upiId)}\n              className=\"flex items-center space-x-1 text-purple-600 hover:text-purple-700 transition-colors\"\n            >\n              {copied ? <Check className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n              <span className=\"text-sm\">{copied ? 'Copied!' : 'Copy'}</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Payment Completion Button */}\n        {!isExpired && (\n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={handleQRPaymentComplete}\n            disabled={isProcessing}\n            className={`w-full ${isProcessing ? 'bg-gray-400' : 'bg-green-600 hover:bg-green-700'} text-white py-4 rounded-xl font-semibold text-lg transition-colors flex items-center justify-center space-x-2`}\n          >\n            {isProcessing ? (\n              <>\n                <div className=\"w-5 h-5 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\n                <span>Verifying Payment...</span>\n              </>\n            ) : (\n              <>\n                <Check className=\"w-5 h-5\" />\n                <span>I've Completed the Payment</span>\n              </>\n            )}\n          </motion.button>\n        )}\n\n        {/* Expired State */}\n        {isExpired && (\n          <div className=\"bg-red-50 rounded-xl p-4 text-center\">\n            <Clock className=\"w-8 h-8 text-red-600 mx-auto mb-2\" />\n            <p className=\"text-red-800 font-medium\">QR Code Expired</p>\n            <p className=\"text-red-700 text-sm mb-4\">The QR code has expired after 3 minutes</p>\n            <motion.button\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              onClick={resetToSelection}\n              className=\"bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-lg font-medium transition-colors\"\n            >\n              Generate New QR Code\n            </motion.button>\n          </div>\n        )}\n\n        {/* Instructions */}\n        <div className=\"bg-purple-50 rounded-xl p-4\">\n          <h4 className=\"font-medium text-purple-900 mb-2\">QR Payment Instructions</h4>\n          <ul className=\"text-sm text-purple-800 space-y-1\">\n            <li>• Open any UPI app (GPay, PhonePe, Paytm, etc.)</li>\n            <li>• Scan the QR code above</li>\n            <li>• Verify the amount and merchant details</li>\n            <li>• Complete the payment using your UPI PIN</li>\n            <li>• Click \"I've Completed the Payment\" after successful payment</li>\n          </ul>\n        </div>\n      </motion.div>\n    );\n  }\n\n  return null;\n};\n\nexport default StreamlinedUPIPayment;","size_bytes":23651},"client/src/components/Payment/UPIPayment.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { Smartphone, Clock, Copy, Check, QrCode, AlertCircle } from 'lucide-react';\nimport QRCode from 'qrcode';\nimport { transactionService } from '../../services/apiService';\n\ninterface UPIPaymentProps {\n  amount: number;\n  orderId: string;\n  onPaymentSuccess: (result: any) => void;\n  onPaymentError: (error: string) => void;\n}\n\nconst UPIPayment: React.FC<UPIPaymentProps> = ({ \n  amount, \n  orderId,\n  onPaymentSuccess, \n  onPaymentError \n}) => {\n  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');\n  const [copied, setCopied] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [timer, setTimer] = useState(300); // 5 minutes\n\n  // Replace these with your actual UPI details\n  const upiId = 'your-business@upi'; // Your business UPI ID\n  const merchantName = 'Your Business Name'; // Your business name\n  \n  const transactionId = `TXN${Date.now()}_${orderId}`;\n\n  const generateUpiLink = () => {\n    const params = new URLSearchParams();\n    params.append('pa', upiId); // Payee address\n    params.append('pn', merchantName); // Payee name\n    params.append('tid', transactionId); // Transaction ID\n    params.append('tr', transactionId); // Transaction reference\n    params.append('tn', `Payment for Order #${orderId}`);\n    params.append('am', amount.toString());\n    params.append('cu', 'INR');\n    \n    return `upi://pay?${params.toString()}`;\n  };\n\n  const upiLink = generateUpiLink();\n\n  useEffect(() => {\n    // Generate QR code\n    QRCode.toDataURL(upiLink)\n      .then(url => setQrCodeUrl(url))\n      .catch(err => console.error('QR generation failed:', err));\n\n    // Start countdown timer\n    const interval = setInterval(() => {\n      setTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(interval);\n          handlePaymentExpiry();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    const createPaymentRecord = async () => {\n      try {\n        await transactionService.createTransaction({\n          orderId,\n          amount: amount.toString(),\n          upiId,\n          transactionId,\n          status: 'pending'\n        });\n      } catch (error) {\n        console.error('Error creating payment record:', error);\n      }\n    };\n\n    createPaymentRecord();\n\n    return () => clearInterval(interval);\n  }, [upiLink, orderId, amount, transactionId]);\n\n  const handlePaymentExpiry = async () => {\n    try {\n      await transactionService.updateTransaction(orderId, {\n        status: 'expired'\n      });\n    } catch (error) {\n      console.error('Error updating payment status:', error);\n    }\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  };\n\n  const verifyPayment = async () => {\n    setIsProcessing(true);\n    \n    try {\n      // In production, replace this with actual payment verification\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // 85% success rate for demo\n      const success = Math.random() > 0.15;\n      \n      if (success) {\n        const { error } = await supabase\n          .from('payments')\n          .update({ \n            status: 'completed',\n            completed_at: new Date().toISOString()\n          })\n          .eq('transaction_id', transactionId);\n        \n        if (error) throw error;\n        \n        onPaymentSuccess({\n          success: true,\n          transactionId,\n          paymentMethod: 'UPI',\n          amount,\n          upiId,\n          orderId\n        });\n      } else {\n        throw new Error('Payment verification failed');\n      }\n    } catch (error) {\n      console.error('Payment verification error:', error);\n      onPaymentError('Payment verification failed. Please try again.');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  if (isProcessing) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto mb-4\"></div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Verifying UPI Payment</h3>\n        <p className=\"text-gray-600\">Please wait while we verify your payment...</p>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"space-y-6\"\n    >\n      <div className=\"bg-white rounded-lg shadow-md p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Pay with UPI</h3>\n          <div className=\"flex items-center text-sm text-orange-600\">\n            <Clock className=\"w-4 h-4 mr-1\" />\n            <span>Expires in: {formatTime(timer)}</span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2 flex items-center\">\n                <QrCode className=\"w-4 h-4 mr-2\" />\n                Scan QR Code\n              </h4>\n              <div className=\"border border-gray-200 rounded-lg p-4 flex justify-center\">\n                {qrCodeUrl ? (\n                  <img src={qrCodeUrl} alt=\"UPI QR Code\" className=\"w-48 h-48\" />\n                ) : (\n                  <div className=\"w-48 h-48 bg-gray-100 animate-pulse rounded\"></div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2 flex items-center\">\n                <Smartphone className=\"w-4 h-4 mr-2\" />\n                Pay using UPI App\n              </h4>\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <p className=\"text-sm text-gray-600 mb-2\">UPI ID:</p>\n                <div className=\"flex items-center justify-between bg-white rounded-md px-3 py-2 border border-gray-200\">\n                  <span className=\"font-mono text-sm\">{upiId}</span>\n                  <button \n                    onClick={() => copyToClipboard(upiId)}\n                    className=\"text-blue-600 hover:text-blue-800\"\n                  >\n                    {copied ? <Check className=\"w-4 h-4\" /> : <Copy className=\"w-4 h-4\" />}\n                  </button>\n                </div>\n                <p className=\"text-xs text-gray-500 mt-2\">Copy this UPI ID and paste in your payment app</p>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-700 mb-2\">Or open payment link directly</h4>\n              <button\n                onClick={() => window.open(upiLink, '_blank')}\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-md transition-colors\"\n              >\n                Open in UPI App\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-6\">\n          <button\n            onClick={verifyPayment}\n            disabled={timer === 0}\n            className={`w-full py-3 px-4 rounded-md font-medium ${timer === 0 ? 'bg-gray-300 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700 text-white'}`}\n          >\n            {timer === 0 ? 'Payment Expired' : 'I have made the payment'}\n          </button>\n        </div>\n\n        {timer === 0 && (\n          <div className=\"mt-4 flex items-center text-red-600 text-sm\">\n            <AlertCircle className=\"w-4 h-4 mr-2\" />\n            <span>This payment request has expired. Please refresh to generate a new one.</span>\n          </div>\n        )}\n\n        <div className=\"mt-4 text-xs text-gray-500\">\n          <p>Note: Payment will be verified automatically. If facing issues, please contact support with transaction details.</p>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\n// Initialize Supabase client outside the component\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || '';\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || '';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\nexport default UPIPayment;","size_bytes":8530},"client/src/components/Products/ProductCard.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Star, ShoppingCart, Eye, Heart, Zap } from 'lucide-react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store';\nimport { addToCart } from '../../store/slices/cartSlice';\nimport { addToWishlist, removeFromWishlist } from '../../store/slices/wishlistSlice';\nimport type { Product } from '@shared/schema';\n\ninterface ProductCardProps {\n  product: Product;\n  onQuickView: (product: Product) => void;\n  onBuyNow: (product: Product) => void;\n}\n\nconst ProductCard: React.FC<ProductCardProps> = ({ product, onQuickView, onBuyNow }) => {\n  const dispatch = useDispatch();\n  const { items: wishlistItems } = useSelector((state: RootState) => state.wishlist);\n  const isInWishlist = wishlistItems.some(item => item.id === product.id);\n\n  const handleAddToCart = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    dispatch(addToCart(product));\n  };\n\n  const handleWishlistToggle = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (isInWishlist) {\n      dispatch(removeFromWishlist(product.id));\n    } else {\n      dispatch(addToWishlist(product));\n    }\n  };\n\n  const handleBuyNow = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    // Navigate to streamlined checkout\n    window.dispatchEvent(new CustomEvent('navigate-to-streamlined-checkout', { \n      detail: { product } \n    }));\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 50 }}\n      whileInView={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.8 }}\n      viewport={{ once: true }}\n      className=\"bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 group cursor-pointer w-full\"\n      onClick={() => onQuickView(product)}\n    >\n      <div className=\"relative overflow-hidden\">\n        <img\n          src={product.images[0]}\n          alt={product.name}\n          className=\"w-full h-48 sm:h-56 md:h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n        />\n        {product.originalPrice && (\n          <div className=\"absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold\">\n            {Math.round(((product.originalPrice - product.price) / product.originalPrice) * 100)}% OFF\n          </div>\n        )}\n        <div className=\"absolute top-4 right-4 space-y-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n          <motion.button\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            onClick={(e) => {\n              e.stopPropagation();\n              onQuickView(product);\n            }}\n            className=\"bg-white/90 p-2 rounded-full hover:bg-white transition-colors shadow-lg\"\n          >\n            <Eye className=\"w-5 h-5 text-gray-700\" />\n          </motion.button>\n          <motion.button\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n            onClick={handleWishlistToggle}\n            className={`p-2 rounded-full shadow-lg transition-colors ${\n              isInWishlist\n                ? 'bg-red-500 text-white'\n                : 'bg-white/90 hover:bg-white text-gray-700'\n            }`}\n          >\n            <Heart className={`w-5 h-5 ${isInWishlist ? 'fill-current' : ''}`} />\n          </motion.button>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h3 className=\"text-lg sm:text-xl font-semibold text-gray-900 line-clamp-1\">{product.name}</h3>\n          <div className=\"flex items-center space-x-1\">\n            <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n            <span className=\"text-sm text-gray-600\">{product.rating}</span>\n          </div>\n        </div>\n        \n        <p className=\"text-gray-600 mb-4 line-clamp-2\">{product.description}</p>\n        \n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-xl sm:text-2xl font-bold text-gray-900\">₹{product.price.toLocaleString('en-IN')}</span>\n            {product.originalPrice && (\n              <span className=\"text-sm sm:text-lg text-gray-500 line-through\">₹{product.originalPrice.toLocaleString('en-IN')}</span>\n            )}\n          </div>\n          <span className=\"text-xs sm:text-sm text-gray-500\">{product.reviewCount} reviews</span>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2\">\n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={handleAddToCart}\n            className=\"flex-1 bg-gray-900 hover:bg-gray-800 text-white py-2 sm:py-3 rounded-xl font-semibold transition-colors flex items-center justify-center space-x-2 text-sm sm:text-base\"\n          >\n            <ShoppingCart className=\"w-4 h-4\" />\n            <span>Add to Cart</span>\n          </motion.button>\n          <motion.button\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={handleBuyNow}\n            className=\"flex-1 bg-gradient-to-r from-yellow-600 to-yellow-700 hover:from-yellow-700 hover:to-yellow-800 text-white py-2 sm:py-3 rounded-xl font-semibold transition-all duration-200 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl text-sm sm:text-base\"\n          >\n            <Zap className=\"w-4 h-4\" />\n            <span>Buy Now</span>\n          </motion.button>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default ProductCard;","size_bytes":5651},"client/src/components/Products/ProductDetail.tsx":{"content":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X, Star, ShoppingCart, Heart, Truck, Shield, RotateCcw, Plus, Minus } from 'lucide-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../store';\nimport { addToCart } from '../../store/slices/cartSlice';\nimport { addToWishlist, removeFromWishlist } from '../../store/slices/wishlistSlice';\nimport { addToHistory } from '../../store/slices/historySlice';\nimport type { Product } from '@shared/schema';\n\ninterface ProductDetailProps {\n  product: Product;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst ProductDetail: React.FC<ProductDetailProps> = ({ product, isOpen, onClose }) => {\n  const dispatch = useDispatch();\n  const [selectedImage, setSelectedImage] = useState(0);\n  const [quantity, setQuantity] = useState(1);\n  \n  const wishlistItems = useSelector((state: RootState) => state.wishlist.items);\n  const isInWishlist = wishlistItems.some(item => item.id === product.id);\n\n  const handleAddToCart = () => {\n    for (let i = 0; i < quantity; i++) {\n      dispatch(addToCart(product));\n    }\n    // Add to history when user interacts with product\n    dispatch(addToHistory(product));\n  };\n\n  const handleWishlistToggle = () => {\n    if (isInWishlist) {\n      dispatch(removeFromWishlist(product.id));\n    } else {\n      dispatch(addToWishlist(product));\n    }\n  };\n\n  const handleClose = () => {\n    // Add to history when user views product\n    dispatch(addToHistory(product));\n    onClose();\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black/50 z-50\"\n            onClick={handleClose}\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.9 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.9 }}\n            transition={{ type: 'spring', damping: 25, stiffness: 200 }}\n            className=\"fixed inset-4 md:inset-8 lg:inset-16 bg-white rounded-2xl z-50 overflow-hidden\"\n          >\n            {/* Close Button */}\n            <button\n              onClick={handleClose}\n              className=\"absolute top-4 right-4 z-10 bg-white/90 p-2 rounded-full hover:bg-white transition-colors shadow-lg\"\n            >\n              <X className=\"w-6 h-6 text-gray-600\" />\n            </button>\n\n            {/* Content */}\n            <div className=\"h-full overflow-y-auto\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 h-full\">\n                {/* Product Images */}\n                <div className=\"p-6 lg:p-8 space-y-4\">\n                  <div className=\"aspect-square rounded-xl overflow-hidden bg-gray-100\">\n                    <img\n                      src={product.images[selectedImage]}\n                      alt={product.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  \n                  {product.images.length > 1 && (\n                    <div className=\"flex space-x-2 overflow-x-auto pb-2\">\n                      {product.images.map((image, index) => (\n                        <button\n                          key={index}\n                          onClick={() => setSelectedImage(index)}\n                          className={`flex-shrink-0 w-16 h-16 rounded-lg overflow-hidden border-2 transition-all ${\n                            selectedImage === index\n                              ? 'border-yellow-500 ring-2 ring-yellow-200'\n                              : 'border-gray-200 hover:border-gray-300'\n                          }`}\n                        >\n                          <img\n                            src={image}\n                            alt={`${product.name} ${index + 1}`}\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </button>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                {/* Product Info */}\n                <div className=\"p-6 lg:p-8 space-y-6\">\n                  <div>\n                    <h1 className=\"text-2xl lg:text-3xl font-bold text-gray-900 mb-4\">\n                      {product.name}\n                    </h1>\n                    \n                    <div className=\"flex items-center space-x-4 mb-4\">\n                      <div className=\"flex items-center space-x-1\">\n                        {[...Array(5)].map((_, i) => (\n                          <Star\n                            key={i}\n                            className={`w-4 h-4 ${\n                              i < Math.floor(product.rating)\n                                ? 'text-yellow-500 fill-current'\n                                : 'text-gray-300'\n                            }`}\n                          />\n                        ))}\n                        <span className=\"text-gray-600 ml-2\">({product.rating})</span>\n                      </div>\n                      <span className=\"text-gray-400\">•</span>\n                      <span className=\"text-gray-600\">{product.reviewCount} reviews</span>\n                    </div>\n\n                    <div className=\"flex items-center space-x-4 mb-6\">\n                      <span className=\"text-2xl lg:text-3xl font-bold text-gray-900\">\n                        ₹{product.price.toLocaleString('en-IN')}\n                      </span>\n                      {product.originalPrice && (\n                        <span className=\"text-lg lg:text-xl text-gray-500 line-through\">\n                          ₹{product.originalPrice.toLocaleString('en-IN')}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"prose prose-gray max-w-none\">\n                    <p className=\"text-gray-700 leading-relaxed\">\n                      {product.description}\n                    </p>\n                  </div>\n\n                  {/* Features */}\n                  <div className=\"grid grid-cols-1 gap-4\">\n                    <div className=\"flex items-center space-x-3 p-4 bg-gray-50 rounded-lg\">\n                      <Truck className=\"w-6 h-6 text-green-600\" />\n                      <div>\n                        <p className=\"font-semibold text-gray-900\">Free Delivery</p>\n                        <p className=\"text-sm text-gray-600\">On orders above ₹500</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3 p-4 bg-gray-50 rounded-lg\">\n                      <Shield className=\"w-6 h-6 text-blue-600\" />\n                      <div>\n                        <p className=\"font-semibold text-gray-900\">Warranty</p>\n                        <p className=\"text-sm text-gray-600\">1 year guarantee</p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-3 p-4 bg-gray-50 rounded-lg\">\n                      <RotateCcw className=\"w-6 h-6 text-purple-600\" />\n                      <div>\n                        <p className=\"font-semibold text-gray-900\">Easy Returns</p>\n                        <p className=\"text-sm text-gray-600\">30 day return policy</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Quantity and Actions */}\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      <label className=\"text-gray-700 font-medium\">Quantity:</label>\n                      <div className=\"flex items-center space-x-2\">\n                        <button\n                          onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                          className=\"w-10 h-10 rounded-lg border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors\"\n                        >\n                          <Minus className=\"w-4 h-4\" />\n                        </button>\n                        <span className=\"w-12 text-center font-semibold\">{quantity}</span>\n                        <button\n                          onClick={() => setQuantity(quantity + 1)}\n                          className=\"w-10 h-10 rounded-lg border border-gray-300 flex items-center justify-center hover:bg-gray-50 transition-colors\"\n                        >\n                          <Plus className=\"w-4 h-4\" />\n                        </button>\n                      </div>\n                    </div>\n\n                    <div className=\"flex space-x-4\">\n                      <motion.button\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={handleAddToCart}\n                        className=\"flex-1 bg-yellow-600 hover:bg-yellow-700 text-white py-3 px-6 rounded-xl font-semibold transition-colors flex items-center justify-center space-x-2\"\n                      >\n                        <ShoppingCart className=\"w-5 h-5\" />\n                        <span>Add to Cart</span>\n                      </motion.button>\n                      \n                      <motion.button\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={handleWishlistToggle}\n                        className={`p-3 rounded-xl border-2 transition-colors ${\n                          isInWishlist\n                            ? 'border-red-500 bg-red-50 text-red-600'\n                            : 'border-gray-300 hover:border-red-500 hover:bg-red-50 hover:text-red-600'\n                        }`}\n                      >\n                        <Heart className={`w-6 h-6 ${isInWishlist ? 'fill-current' : ''}`} />\n                      </motion.button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default ProductDetail;","size_bytes":10302},"client/src/components/Products/ProductGrid.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useQuery } from '@tanstack/react-query';\nimport { productService } from '../../services/apiService';\nimport ProductCard from './ProductCard';\nimport ProductDetail from './ProductDetail';\nimport CheckoutPage from '../Checkout/CheckoutPage';\nimport type { Product } from '@shared/schema';\n\ninterface ProductGridProps {\n  products?: Product[];\n  onNavigate?: (page: string) => void;\n  category?: string;\n  search?: string;\n  featured?: boolean;\n  limit?: number;\n}\n\nconst ProductGrid: React.FC<ProductGridProps> = ({ \n  products: providedProducts, \n  onNavigate, \n  category, \n  search, \n  featured = false, \n  limit = 8 \n}) => {\n  const { data: productsData, isLoading: loading, error } = useQuery({\n    queryKey: ['/api/products', { category, search, featured, limit }],\n    queryFn: () => productService.getProducts({ category, search, featured, limit }),\n    enabled: !providedProducts, // Only fetch if products are not provided\n  });\n\n  const products = providedProducts || productsData?.products || [];\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [checkoutProduct, setCheckoutProduct] = useState<Product | null>(null);\n\n  const handleQuickView = (product: Product) => {\n    setSelectedProduct(product);\n  };\n\n  const handleBuyNow = (product: Product) => {\n    // Navigate to streamlined checkout\n    window.dispatchEvent(new CustomEvent('navigate-to-streamlined-checkout', { \n      detail: { product } \n    }));\n  };\n\n  const handleCheckoutComplete = () => {\n    setCheckoutProduct(null);\n  };\n\n  if (checkoutProduct) {\n    return (\n      <CheckoutPage\n        product={checkoutProduct}\n        onBack={() => setCheckoutProduct(null)}\n        onComplete={handleCheckoutComplete}\n      />\n    );\n  }\n\n  if (loading) {\n    return (\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, index) => (\n              <div key={index} className=\"animate-pulse\">\n                <div className=\"bg-gray-300 rounded-lg h-64 mb-4\"></div>\n                <div className=\"bg-gray-300 h-4 rounded mb-2\"></div>\n                <div className=\"bg-gray-300 h-4 rounded w-2/3\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (error) {\n    return (\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center py-12\">\n            <p className=\"text-red-600 text-lg\">Error loading products: {error}</p>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"mt-4 bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-2 rounded-lg transition-colors\"\n            >\n              Try Again\n            </button>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <>\n      <section className=\"py-20 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n            className=\"text-center mb-12 sm:mb-16 px-4\"\n          >\n            <h2 className=\"text-3xl sm:text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              Popular Products\n            </h2>\n            <p className=\"text-lg sm:text-xl text-gray-600 max-w-2xl mx-auto\">\n              Discover our most loved furniture and decor pieces\n            </p>\n          </motion.div>\n\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.5 }}\n            className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6\"\n          >\n            {products.map((product, index) => {\n              // Convert Supabase product to component format\n              const formattedProduct = {\n                id: product.id,\n                name: product.name,\n                description: product.description,\n                price: product.price,\n                originalPrice: product.original_price,\n                category: product.category,\n                images: product.images,\n                rating: product.rating,\n                reviewCount: product.review_count,\n                inStock: product.stock > 0,\n                tags: product.tags,\n                featured: product.featured,\n              };\n\n              return (\n                <ProductCard\n                  key={product.id}\n                  product={formattedProduct}\n                  onQuickView={handleQuickView}\n                  onBuyNow={handleBuyNow}\n                />\n              );\n            })}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Product Detail Modal */}\n      {selectedProduct && (\n        <ProductDetail\n          product={selectedProduct}\n          isOpen={!!selectedProduct}\n          onClose={() => setSelectedProduct(null)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ProductGrid;","size_bytes":5314},"client/src/components/Products/ProductsPage.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Filter, Grid, List } from 'lucide-react';\nimport { useQuery } from '@tanstack/react-query';\nimport { productService, categoryService } from '../../services/apiService';\nimport ProductGrid from './ProductGrid';\n\nconst ProductsPage: React.FC = () => {\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [sortBy, setSortBy] = useState<string>('latest');\n  \n  const { data: categoriesData, isLoading: categoriesLoading } = useQuery({\n    queryKey: ['/api/categories'],\n    queryFn: () => categoryService.getCategories(),\n  });\n\n  const categories = categoriesData?.categories || [];\n\n  return (\n      <div className=\"min-h-screen bg-gray-50 pt-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Our Products</h1>\n            <p className=\"text-xl text-gray-600\">Discover our complete collection of premium furniture and decor</p>\n          </div>\n\n          {/* Filters and Controls */}\n          <div className=\"bg-white rounded-xl shadow-sm p-6 mb-8\">\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n              {/* Category Filter */}\n              <div className=\"flex flex-wrap gap-2\">\n                <button\n                  onClick={() => setSelectedCategory('all')}\n                  className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                    selectedCategory === 'all'\n                      ? 'bg-yellow-600 text-white'\n                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                  }`}\n                >\n                  All Products\n                </button>\n                {!categoriesLoading && categories.map((category) => (\n                  <button\n                    key={category.id}\n                    onClick={() => setSelectedCategory(category.name)}\n                    className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                      selectedCategory === category.name\n                        ? 'bg-yellow-600 text-white'\n                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                    }`}\n                  >\n                    {category.name}\n                  </button>\n                ))}\n              </div>\n\n              {/* Sort and View Controls */}\n              <div className=\"flex items-center space-x-4\">\n                <select\n                  value={sortBy}\n                  onChange={(e) => setSortBy(e.target.value)}\n                  className=\"px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-yellow-500\"\n                >\n                  <option value=\"latest\">Latest</option>\n                  <option value=\"price\">Price: Low to High</option>\n                  <option value=\"popularity\">Most Popular</option>\n                </select>\n\n                <div className=\"flex border border-gray-300 rounded-lg overflow-hidden\">\n                  <button\n                    onClick={() => setViewMode('grid')}\n                    className={`p-2 ${viewMode === 'grid' ? 'bg-yellow-600 text-white' : 'bg-white text-gray-600'}`}\n                  >\n                    <Grid className=\"w-5 h-5\" />\n                  </button>\n                  <button\n                    onClick={() => setViewMode('list')}\n                    className={`p-2 ${viewMode === 'list' ? 'bg-yellow-600 text-white' : 'bg-white text-gray-600'}`}\n                  >\n                    <List className=\"w-5 h-5\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Products Grid */}\n          <ProductGrid \n            category={selectedCategory === 'all' ? undefined : selectedCategory}\n            search={searchQuery || undefined}\n          />\n        </div>\n      </div>\n  );\n};\n\nexport default ProductsPage;","size_bytes":4225},"client/src/components/Products/SupabaseProductGrid.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Star, ShoppingCart, Eye, Heart, Zap, Loader } from 'lucide-react';\nimport { useProducts, useAuth } from '../../hooks/useSupabase';\nimport { Product } from '../../lib/supabase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store';\nimport { addToCart } from '../../store/slices/cartSlice';\nimport { addToWishlist, removeFromWishlist } from '../../store/slices/wishlistSlice';\nimport ProductDetail from './ProductDetail';\nimport CheckoutPage from '../Checkout/CheckoutPage';\n\ninterface SupabaseProductGridProps {\n  category?: string;\n  featured?: boolean;\n  search?: string;\n}\n\nconst SupabaseProductGrid: React.FC<SupabaseProductGridProps> = ({ \n  category, \n  featured, \n  search \n}) => {\n  const { products, loading, error } = useProducts({ category, featured, search });\n  const { isAuthenticated } = useAuth();\n  const dispatch = useDispatch();\n  const { items: wishlistItems } = useSelector((state: RootState) => state.wishlist);\n  \n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [checkoutProduct, setCheckoutProduct] = useState<Product | null>(null);\n\n  const handleAddToCart = (product: Product) => {\n    // Convert Supabase product to Redux format\n    const cartProduct = {\n      id: product.id,\n      name: product.name,\n      description: product.description,\n      price: product.price,\n      originalPrice: product.original_price,\n      category: product.category,\n      images: product.images,\n      rating: product.rating,\n      reviewCount: product.review_count,\n      inStock: product.stock > 0,\n      tags: product.tags,\n      featured: product.featured,\n    };\n    dispatch(addToCart(cartProduct));\n  };\n\n  const handleWishlistToggle = (product: Product) => {\n    const wishlistProduct = {\n      id: product.id,\n      name: product.name,\n      description: product.description,\n      price: product.price,\n      originalPrice: product.original_price,\n      category: product.category,\n      images: product.images,\n      rating: product.rating,\n      reviewCount: product.review_count,\n      inStock: product.stock > 0,\n      tags: product.tags,\n      featured: product.featured,\n    };\n\n    const isInWishlist = wishlistItems.some(item => item.id === product.id);\n    if (isInWishlist) {\n      dispatch(removeFromWishlist(product.id));\n    } else {\n      dispatch(addToWishlist(wishlistProduct));\n    }\n  };\n\n  const handleQuickView = (product: Product) => {\n    setSelectedProduct(product);\n  };\n\n  const handleBuyNow = (product: Product) => {\n    setCheckoutProduct(product);\n  };\n\n  const handleCheckoutComplete = () => {\n    setCheckoutProduct(null);\n    alert('Order placed successfully!');\n  };\n\n  if (checkoutProduct) {\n    const checkoutProductFormatted = {\n      id: checkoutProduct.id,\n      name: checkoutProduct.name,\n      description: checkoutProduct.description,\n      price: checkoutProduct.price,\n      originalPrice: checkoutProduct.original_price,\n      category: checkoutProduct.category,\n      images: checkoutProduct.images,\n      rating: checkoutProduct.rating,\n      reviewCount: checkoutProduct.review_count,\n      inStock: checkoutProduct.stock > 0,\n      tags: checkoutProduct.tags,\n      featured: checkoutProduct.featured,\n    };\n\n    return (\n      <CheckoutPage\n        product={checkoutProductFormatted}\n        onBack={() => setCheckoutProduct(null)}\n        onComplete={handleCheckoutComplete}\n      />\n    );\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center py-20\">\n        <div className=\"text-center\">\n          <Loader className=\"w-12 h-12 text-yellow-600 animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading products...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-20\">\n        <div className=\"text-red-600 mb-4\">\n          <p className=\"text-lg font-semibold\">Error loading products</p>\n          <p className=\"text-sm\">{error}</p>\n        </div>\n        <button\n          onClick={() => window.location.reload()}\n          className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-6 py-2 rounded-lg transition-colors\"\n        >\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  if (products.length === 0) {\n    return (\n      <div className=\"text-center py-20\">\n        <p className=\"text-gray-600 text-lg\">No products found</p>\n        {search && (\n          <p className=\"text-gray-500 text-sm mt-2\">\n            Try adjusting your search terms\n          </p>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {products.map((product, index) => {\n          const isInWishlist = wishlistItems.some(item => item.id === product.id);\n          \n          return (\n            <motion.div\n              key={product.id}\n              initial={{ opacity: 0, y: 50 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8, delay: index * 0.1 }}\n              viewport={{ once: true }}\n              className=\"bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 group cursor-pointer\"\n              onClick={() => handleQuickView(product)}\n            >\n              <div className=\"relative overflow-hidden\">\n                <img\n                  src={product.images[0] || '/placeholder-image.jpg'}\n                  alt={product.name}\n                  className=\"w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n                />\n                {product.original_price && (\n                  <div className=\"absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full text-sm font-semibold\">\n                    {Math.round(((product.original_price - product.price) / product.original_price) * 100)}% OFF\n                  </div>\n                )}\n                {product.stock <= 5 && product.stock > 0 && (\n                  <div className=\"absolute top-4 right-4 bg-orange-500 text-white px-2 py-1 rounded text-xs\">\n                    Only {product.stock} left\n                  </div>\n                )}\n                {product.stock === 0 && (\n                  <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                    <span className=\"text-white font-semibold\">Out of Stock</span>\n                  </div>\n                )}\n                <div className=\"absolute top-4 right-4 space-y-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                  <motion.button\n                    whileHover={{ scale: 1.1 }}\n                    whileTap={{ scale: 0.9 }}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleQuickView(product);\n                    }}\n                    className=\"bg-white/90 p-2 rounded-full hover:bg-white transition-colors shadow-lg\"\n                  >\n                    <Eye className=\"w-5 h-5 text-gray-700\" />\n                  </motion.button>\n                  {isAuthenticated && (\n                    <motion.button\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleWishlistToggle(product);\n                      }}\n                      className={`p-2 rounded-full shadow-lg transition-colors ${\n                        isInWishlist\n                          ? 'bg-red-500 text-white'\n                          : 'bg-white/90 hover:bg-white text-gray-700'\n                      }`}\n                    >\n                      <Heart className={`w-5 h-5 ${isInWishlist ? 'fill-current' : ''}`} />\n                    </motion.button>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"text-xl font-semibold text-gray-900 line-clamp-1\">{product.name}</h3>\n                  <div className=\"flex items-center space-x-1\">\n                    <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                    <span className=\"text-sm text-gray-600\">{product.rating}</span>\n                  </div>\n                </div>\n                \n                <p className=\"text-gray-600 mb-4 line-clamp-2\">{product.description}</p>\n                \n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-2xl font-bold text-gray-900\">₹{product.price.toLocaleString('en-IN')}</span>\n                    {product.original_price && (\n                      <span className=\"text-lg text-gray-500 line-through\">₹{product.original_price.toLocaleString('en-IN')}</span>\n                    )}\n                  </div>\n                  <span className=\"text-sm text-gray-500\">({product.review_count} reviews)</span>\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  <motion.button\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleAddToCart(product);\n                    }}\n                    disabled={product.stock === 0}\n                    className=\"flex-1 bg-gray-900 hover:bg-gray-800 text-white py-3 rounded-xl font-semibold transition-colors flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <ShoppingCart className=\"w-4 h-4\" />\n                    <span>Add to Cart</span>\n                  </motion.button>\n                  <motion.button\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Navigate to streamlined checkout\n                      window.dispatchEvent(new CustomEvent('navigate-to-streamlined-checkout', { \n                        detail: { product: product } \n                      }));\n                    }}\n                    disabled={product.stock === 0}\n                    className=\"flex-1 bg-gradient-to-r from-yellow-600 to-yellow-700 hover:from-yellow-700 hover:to-yellow-800 text-white py-3 rounded-xl font-semibold transition-all duration-200 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Zap className=\"w-4 h-4\" />\n                    <span>Buy Now</span>\n                  </motion.button>\n                </div>\n              </div>\n            </motion.div>\n          );\n        })}\n      </div>\n\n      {/* Product Detail Modal */}\n      {selectedProduct && (\n        <ProductDetail\n          product={{\n            id: selectedProduct.id,\n            name: selectedProduct.name,\n            description: selectedProduct.description,\n            price: selectedProduct.price,\n            originalPrice: selectedProduct.original_price,\n            category: selectedProduct.category,\n            images: selectedProduct.images,\n            rating: selectedProduct.rating,\n            reviewCount: selectedProduct.review_count,\n            inStock: selectedProduct.stock > 0,\n            tags: selectedProduct.tags,\n            featured: selectedProduct.featured,\n          }}\n          isOpen={!!selectedProduct}\n          onClose={() => setSelectedProduct(null)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default SupabaseProductGrid;","size_bytes":11936},"client/src/components/Story/StoryViewer.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { X, ChevronLeft, ChevronRight, Play, Pause } from 'lucide-react';\n\ninterface Story {\n  id: string;\n  title: string;\n  media: string;\n  type: 'image' | 'video';\n  duration: number;\n}\n\ninterface StoryViewerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  stories: Story[];\n  initialStoryIndex?: number;\n}\n\nconst StoryViewer: React.FC<StoryViewerProps> = ({ \n  isOpen, \n  onClose, \n  stories, \n  initialStoryIndex = 0 \n}) => {\n  const [currentStoryIndex, setCurrentStoryIndex] = useState(initialStoryIndex);\n  const [progress, setProgress] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(true);\n\n  const currentStory = stories[currentStoryIndex];\n\n  useEffect(() => {\n    if (!isOpen || !isPlaying) return;\n\n    const interval = setInterval(() => {\n      setProgress((prev) => {\n        const newProgress = prev + (100 / (currentStory.duration * 10));\n        if (newProgress >= 100) {\n          nextStory();\n          return 0;\n        }\n        return newProgress;\n      });\n    }, 100);\n\n    return () => clearInterval(interval);\n  }, [isOpen, isPlaying, currentStoryIndex, currentStory.duration]);\n\n  const nextStory = () => {\n    if (currentStoryIndex < stories.length - 1) {\n      setCurrentStoryIndex(currentStoryIndex + 1);\n      setProgress(0);\n    } else {\n      onClose();\n    }\n  };\n\n  const prevStory = () => {\n    if (currentStoryIndex > 0) {\n      setCurrentStoryIndex(currentStoryIndex - 1);\n      setProgress(0);\n    }\n  };\n\n  const togglePlayPause = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"fixed inset-0 bg-black z-50 flex items-center justify-center\"\n      >\n        {/* Progress Bars */}\n        <div className=\"absolute top-4 left-4 right-4 flex space-x-1 z-10\">\n          {stories.map((_, index) => (\n            <div key={index} className=\"flex-1 h-1 bg-white/30 rounded-full overflow-hidden\">\n              <div\n                className=\"h-full bg-white transition-all duration-100\"\n                style={{\n                  width: index < currentStoryIndex ? '100%' : \n                         index === currentStoryIndex ? `${progress}%` : '0%'\n                }}\n              />\n            </div>\n          ))}\n        </div>\n\n        {/* Story Header */}\n        <div className=\"absolute top-8 left-4 right-4 flex items-center justify-between z-10\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center\">\n              <span className=\"text-white font-bold\">I</span>\n            </div>\n            <div>\n              <h3 className=\"text-white font-semibold\">Interoo Stories</h3>\n              <p className=\"text-white/80 text-sm\">{currentStory.title}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <button\n              onClick={togglePlayPause}\n              className=\"text-white/80 hover:text-white transition-colors\"\n            >\n              {isPlaying ? <Pause className=\"w-6 h-6\" /> : <Play className=\"w-6 h-6\" />}\n            </button>\n            <button\n              onClick={onClose}\n              className=\"text-white/80 hover:text-white transition-colors\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n          </div>\n        </div>\n\n        {/* Story Content */}\n        <motion.div\n          key={currentStoryIndex}\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.9 }}\n          className=\"relative w-full h-full max-w-md mx-auto\"\n        >\n          {currentStory.type === 'image' ? (\n            <img\n              src={currentStory.media}\n              alt={currentStory.title}\n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <video\n              src={currentStory.media}\n              className=\"w-full h-full object-cover\"\n              autoPlay\n              muted\n              loop={false}\n              onEnded={nextStory}\n            />\n          )}\n\n          {/* Navigation Areas */}\n          <button\n            onClick={prevStory}\n            className=\"absolute left-0 top-0 w-1/3 h-full z-10 flex items-center justify-start pl-4 opacity-0 hover:opacity-100 transition-opacity\"\n            disabled={currentStoryIndex === 0}\n          >\n            <ChevronLeft className=\"w-8 h-8 text-white\" />\n          </button>\n          <button\n            onClick={nextStory}\n            className=\"absolute right-0 top-0 w-1/3 h-full z-10 flex items-center justify-end pr-4 opacity-0 hover:opacity-100 transition-opacity\"\n          >\n            <ChevronRight className=\"w-8 h-8 text-white\" />\n          </button>\n          <button\n            onClick={togglePlayPause}\n            className=\"absolute inset-0 z-5\"\n          />\n        </motion.div>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default StoryViewer;","size_bytes":5273},"client/src/components/UI/FloatingCTA.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Phone, MessageCircle, X } from 'lucide-react';\n\nconst FloatingCTA: React.FC = () => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrolled = window.scrollY > 500;\n      setIsVisible(scrolled);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.5 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.5 }}\n          transition={{ duration: 0.3 }}\n          className=\"fixed bottom-6 right-6 z-40\"\n        >\n          <div className=\"relative\">\n            {/* Expanded Menu */}\n            <AnimatePresence>\n              {isExpanded && (\n                <motion.div\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: 20 }}\n                  transition={{ duration: 0.2 }}\n                  className=\"absolute bottom-16 right-0 space-y-3\"\n                >\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"bg-green-500 hover:bg-green-600 text-white p-3 rounded-full shadow-lg transition-colors flex items-center space-x-2\"\n                  >\n                    <Phone className=\"w-5 h-5\" />\n                    <span className=\"text-sm font-medium\">Call Now</span>\n                  </motion.button>\n                  \n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    className=\"bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-full shadow-lg transition-colors flex items-center space-x-2\"\n                  >\n                    <MessageCircle className=\"w-5 h-5\" />\n                    <span className=\"text-sm font-medium\">Chat</span>\n                  </motion.button>\n                </motion.div>\n              )}\n            </AnimatePresence>\n\n            {/* Main Button */}\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={() => setIsExpanded(!isExpanded)}\n              className={`p-4 rounded-full shadow-lg transition-colors ${\n                isExpanded \n                  ? 'bg-red-500 hover:bg-red-600' \n                  : 'bg-yellow-600 hover:bg-yellow-700'\n              } text-white`}\n            >\n              {isExpanded ? (\n                <X className=\"w-6 h-6\" />\n              ) : (\n                <MessageCircle className=\"w-6 h-6\" />\n              )}\n            </motion.button>\n\n            {/* Pulse Animation */}\n            {!isExpanded && (\n              <motion.div\n                animate={{ scale: [1, 1.2, 1] }}\n                transition={{ duration: 2, repeat: Infinity }}\n                className=\"absolute inset-0 bg-yellow-600 rounded-full opacity-20\"\n              />\n            )}\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default FloatingCTA;","size_bytes":3417},"client/src/components/UI/PaymentDiagnosticsPanel.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Bug, X, Download, Trash2, Filter, AlertCircle, CheckCircle, Info, AlertTriangle } from 'lucide-react';\nimport { PaymentDiagnostics, PaymentDiagnostic } from '../../utils/paymentDiagnostics';\n\nconst PaymentDiagnosticsPanel: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [logs, setLogs] = useState<PaymentDiagnostic[]>([]);\n  const [filter, setFilter] = useState<string>('all');\n\n  useEffect(() => {\n    if (isOpen) {\n      const interval = setInterval(() => {\n        setLogs(PaymentDiagnostics.getLogs());\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [isOpen]);\n\n  const filteredLogs = filter === 'all' \n    ? logs \n    : logs.filter(log => log.category === filter || log.type === filter);\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'error':\n        return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-4 h-4 text-amber-500\" />;\n      case 'info':\n        return <Info className=\"w-4 h-4 text-blue-500\" />;\n      default:\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n    }\n  };\n\n  const exportLogs = () => {\n    const data = JSON.stringify(logs, null, 2);\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `payment-diagnostics-${Date.now()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  const clearLogs = () => {\n    PaymentDiagnostics.clearLogs();\n    setLogs([]);\n  };\n\n  // Only show in development\n  if (process.env.NODE_ENV !== 'development') {\n    return null;\n  }\n\n  return (\n    <>\n      {/* Toggle Button */}\n      <motion.button\n        whileHover={{ scale: 1.1 }}\n        whileTap={{ scale: 0.9 }}\n        onClick={() => setIsOpen(true)}\n        className=\"fixed bottom-4 left-4 bg-gray-800 text-white p-3 rounded-full shadow-lg z-40\"\n      >\n        <Bug className=\"w-5 h-5\" />\n      </motion.button>\n\n      {/* Diagnostics Panel */}\n      <AnimatePresence>\n        {isOpen && (\n          <>\n            {/* Backdrop */}\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"fixed inset-0 bg-black/50 z-50\"\n              onClick={() => setIsOpen(false)}\n            />\n\n            {/* Panel */}\n            <motion.div\n              initial={{ x: '-100%' }}\n              animate={{ x: 0 }}\n              exit={{ x: '-100%' }}\n              transition={{ type: 'spring', damping: 25, stiffness: 200 }}\n              className=\"fixed left-0 top-0 h-full w-full max-w-md bg-white shadow-2xl z-50 flex flex-col\"\n            >\n              {/* Header */}\n              <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Payment Diagnostics</h2>\n                <button\n                  onClick={() => setIsOpen(false)}\n                  className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                >\n                  <X className=\"w-5 h-5 text-gray-600\" />\n                </button>\n              </div>\n\n              {/* Controls */}\n              <div className=\"p-4 border-b border-gray-200 space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <Filter className=\"w-4 h-4 text-gray-500\" />\n                  <select\n                    value={filter}\n                    onChange={(e) => setFilter(e.target.value)}\n                    className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg text-sm\"\n                  >\n                    <option value=\"all\">All Logs</option>\n                    <option value=\"error\">Errors</option>\n                    <option value=\"warning\">Warnings</option>\n                    <option value=\"info\">Info</option>\n                    <option value=\"validation\">Validation</option>\n                    <option value=\"network\">Network</option>\n                    <option value=\"processing\">Processing</option>\n                    <option value=\"security\">Security</option>\n                    <option value=\"ui\">UI</option>\n                  </select>\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  <button\n                    onClick={exportLogs}\n                    className=\"flex-1 flex items-center justify-center space-x-2 px-3 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors\"\n                  >\n                    <Download className=\"w-4 h-4\" />\n                    <span>Export</span>\n                  </button>\n                  <button\n                    onClick={clearLogs}\n                    className=\"flex-1 flex items-center justify-center space-x-2 px-3 py-2 bg-red-600 text-white rounded-lg text-sm hover:bg-red-700 transition-colors\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                    <span>Clear</span>\n                  </button>\n                </div>\n              </div>\n\n              {/* Logs */}\n              <div className=\"flex-1 overflow-y-auto p-4 space-y-2\">\n                {filteredLogs.length === 0 ? (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    <Bug className=\"w-12 h-12 text-gray-300 mx-auto mb-2\" />\n                    <p>No diagnostic logs</p>\n                  </div>\n                ) : (\n                  filteredLogs.map((log, index) => (\n                    <motion.div\n                      key={index}\n                      initial={{ opacity: 0, y: 10 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      className=\"bg-gray-50 rounded-lg p-3 text-sm\"\n                    >\n                      <div className=\"flex items-start space-x-2 mb-2\">\n                        {getIcon(log.type)}\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <span className=\"font-medium text-gray-900\">{log.category}</span>\n                            <span className=\"text-xs text-gray-500\">\n                              {new Date(log.timestamp).toLocaleTimeString()}\n                            </span>\n                          </div>\n                          <p className=\"text-gray-700\">{log.message}</p>\n                          {log.details && (\n                            <details className=\"mt-2\">\n                              <summary className=\"cursor-pointer text-xs text-blue-600\">\n                                Show Details\n                              </summary>\n                              <pre className=\"mt-1 text-xs bg-gray-100 p-2 rounded overflow-x-auto\">\n                                {JSON.stringify(log.details, null, 2)}\n                              </pre>\n                            </details>\n                          )}\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))\n                )}\n              </div>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </>\n  );\n};\n\nexport default PaymentDiagnosticsPanel;","size_bytes":7442},"client/src/components/UI/WhatsAppChat.tsx":{"content":"import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { MessageCircle, X, Send } from 'lucide-react';\n\nconst WhatsAppChat: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [message, setMessage] = useState('');\n\n  const handleWhatsAppRedirect = () => {\n    const phoneNumber = '+1234567890'; // TODO: Replace with actual WhatsApp business number\n    const defaultMessage = encodeURIComponent('Hi! I need help with your products.');\n    const whatsappUrl = `https://wa.me/${phoneNumber}?text=${defaultMessage}`;\n    window.open(whatsappUrl, '_blank');\n  };\n\n  const handleSendMessage = () => {\n    if (message.trim()) {\n      const phoneNumber = '+1234567890'; // TODO: Replace with actual WhatsApp business number\n      const encodedMessage = encodeURIComponent(message);\n      const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodedMessage}`;\n      window.open(whatsappUrl, '_blank');\n      setMessage('');\n      setIsOpen(false);\n    }\n  };\n\n  return (\n    <>\n      {/* Chat Widget */}\n      <motion.div\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        className=\"fixed bottom-6 right-6 z-50\"\n      >\n        <AnimatePresence>\n          {isOpen && (\n            <motion.div\n              initial={{ opacity: 0, y: 20, scale: 0.9 }}\n              animate={{ opacity: 1, y: 0, scale: 1 }}\n              exit={{ opacity: 0, y: 20, scale: 0.9 }}\n              className=\"absolute bottom-16 right-0 w-80 bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden\"\n            >\n              {/* Header */}\n              <div className=\"bg-green-500 text-white p-4 flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-white/20 rounded-full flex items-center justify-center\">\n                    <MessageCircle className=\"w-6 h-6\" />\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold\">Customer Support</h3>\n                    <p className=\"text-sm opacity-90\">We're here to help!</p>\n                  </div>\n                </div>\n                <button\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-white/80 hover:text-white transition-colors\"\n                >\n                  <X className=\"w-5 h-5\" />\n                </button>\n              </div>\n\n              {/* Chat Content */}\n              <div className=\"p-4 space-y-4\">\n                <div className=\"bg-gray-100 rounded-lg p-3\">\n                  <p className=\"text-sm text-gray-700\">\n                    👋 Hello! How can we help you today?\n                  </p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <button\n                    onClick={() => setMessage('I need help with product information')}\n                    className=\"w-full text-left p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors text-sm\"\n                  >\n                    📦 Product Information\n                  </button>\n                  <button\n                    onClick={() => setMessage('I want to track my order')}\n                    className=\"w-full text-left p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors text-sm\"\n                  >\n                    🚚 Order Tracking\n                  </button>\n                  <button\n                    onClick={() => setMessage('I need help with returns')}\n                    className=\"w-full text-left p-3 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors text-sm\"\n                  >\n                    🔄 Returns & Exchanges\n                  </button>\n                </div>\n\n                {/* Message Input */}\n                <div className=\"flex space-x-2\">\n                  <input\n                    type=\"text\"\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                    placeholder=\"Type your message...\"\n                    className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-sm\"\n                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n                  />\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={handleSendMessage}\n                    className=\"bg-green-500 text-white p-2 rounded-lg hover:bg-green-600 transition-colors\"\n                  >\n                    <Send className=\"w-4 h-4\" />\n                  </motion.button>\n                </div>\n\n                <div className=\"text-center\">\n                  <motion.button\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                    onClick={handleWhatsAppRedirect}\n                    className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg font-medium transition-colors text-sm\"\n                  >\n                    Continue on WhatsApp\n                  </motion.button>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Chat Button */}\n        <motion.button\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"bg-green-500 hover:bg-green-600 text-white p-4 rounded-full shadow-lg transition-colors\"\n        >\n          {isOpen ? (\n            <X className=\"w-6 h-6\" />\n          ) : (\n            <MessageCircle className=\"w-6 h-6\" />\n          )}\n        </motion.button>\n\n        {/* Pulse Animation */}\n        {!isOpen && (\n          <motion.div\n            animate={{ scale: [1, 1.2, 1] }}\n            transition={{ duration: 2, repeat: Infinity }}\n            className=\"absolute inset-0 bg-green-500 rounded-full opacity-20\"\n          />\n        )}\n      </motion.div>\n    </>\n  );\n};\n\nexport default WhatsAppChat;","size_bytes":6114},"client/src/components/User/AccountPage.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { User, Package, Heart, Settings, LogOut, Edit, Camera, ShoppingBag, Save, X } from 'lucide-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../store';\nimport { logout, setUser } from '../../store/slices/authSlice';\nimport { MockAuthService } from '../../utils/mockAuth';\nimport OrdersPage from './OrdersPage';\n\nconst AccountPage: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('profile');\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n  const [profileForm, setProfileForm] = useState({\n    fullName: '',\n    phone: '',\n    dateOfBirth: '',\n    address: ''\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n  const { user, isAuthenticated } = useSelector((state: RootState) => state.auth);\n  const { items: wishlistItems } = useSelector((state: RootState) => state.wishlist);\n  const { orders } = useSelector((state: RootState) => state.orders);\n\n  const handleLogout = () => {\n    dispatch(logout());\n  };\n\n  const handleEditProfile = () => {\n    setProfileForm({\n      fullName: user?.fullName || '',\n      phone: user?.phone || '',\n      dateOfBirth: '',\n      address: typeof user?.address === 'string' ? user.address : ''\n    });\n    setIsEditingProfile(true);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditingProfile(false);\n    setProfileForm({\n      fullName: '',\n      phone: '',\n      dateOfBirth: '',\n      address: ''\n    });\n  };\n\n  const handleSaveProfile = async () => {\n    if (!user) return;\n    \n    setIsLoading(true);\n    try {\n      const updatedUser = await MockAuthService.updateProfile(user.id, {\n        fullName: profileForm.fullName,\n        phone: profileForm.phone,\n        address: profileForm.address\n      });\n      \n      dispatch(setUser(updatedUser));\n      setIsEditingProfile(false);\n    } catch (error) {\n      console.error('Failed to update profile:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setProfileForm(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pt-20 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <User className=\"w-24 h-24 text-gray-300 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Sign in to view your account</h2>\n          <p className=\"text-gray-600\">Access your profile, orders, and preferences</p>\n        </div>\n      </div>\n    );\n  }\n\n  const tabs = [\n    { id: 'profile', name: 'Profile', icon: User },\n    { id: 'orders', name: 'Orders', icon: Package },\n    { id: 'orders-page', name: 'Order History', icon: ShoppingBag },\n    { id: 'wishlist', name: 'Wishlist', icon: Heart },\n    { id: 'settings', name: 'Settings', icon: Settings },\n  ];\n\n  const mockOrders = [\n    {\n      id: 'ORD-001',\n      date: '2025-01-15',\n      status: 'Delivered',\n      total: 1299,\n      items: 2,\n    },\n    {\n      id: 'ORD-002',\n      date: '2025-01-10',\n      status: 'Shipped',\n      total: 599,\n      items: 1,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n          {/* Sidebar */}\n          <div className=\"lg:col-span-1\">\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\n              <div className=\"text-center mb-6\">\n                <div className=\"relative inline-block\">\n                  <img\n                    src={user?.avatar || 'https://images.pexels.com/photos/1043471/pexels-photo-1043471.jpeg?auto=compress&cs=tinysrgb&w=100'}\n                    alt={user?.name}\n                    className=\"w-20 h-20 rounded-full object-cover\"\n                  />\n                  <button className=\"absolute bottom-0 right-0 bg-yellow-600 text-white p-1 rounded-full hover:bg-yellow-700 transition-colors\">\n                    <Camera className=\"w-4 h-4\" />\n                  </button>\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mt-4\">{user?.name}</h3>\n                <p className=\"text-gray-600\">{user?.email}</p>\n              </div>\n\n              <nav className=\"space-y-2\">\n                {tabs.map((tab) => (\n                  <button\n                    key={tab.id}\n                    onClick={() => setActiveTab(tab.id)}\n                    className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${\n                      activeTab === tab.id\n                        ? 'bg-yellow-50 text-yellow-700 border border-yellow-200'\n                        : 'text-gray-700 hover:bg-gray-50'\n                    }`}\n                  >\n                    <tab.icon className=\"w-5 h-5\" />\n                    <span className=\"font-medium\">{tab.name}</span>\n                  </button>\n                ))}\n                <button\n                  onClick={handleLogout}\n                  className=\"w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left text-red-600 hover:bg-red-50 transition-colors\"\n                >\n                  <LogOut className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Sign Out</span>\n                </button>\n              </nav>\n            </div>\n          </div>\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-3\">\n            <div className=\"bg-white rounded-xl shadow-sm p-6\">\n              {activeTab === 'profile' && (\n                <div>\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h2 className=\"text-2xl font-bold text-gray-900\">Profile Information</h2>\n                    {!isEditingProfile ? (\n                      <motion.button\n                        whileHover={{ scale: 1.05 }}\n                        whileTap={{ scale: 0.95 }}\n                        onClick={handleEditProfile}\n                        className=\"flex items-center space-x-2 bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg transition-colors\"\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                        <span>Edit Profile</span>\n                      </motion.button>\n                    ) : (\n                      <div className=\"flex space-x-2\">\n                        <motion.button\n                          whileHover={{ scale: 1.05 }}\n                          whileTap={{ scale: 0.95 }}\n                          onClick={handleCancelEdit}\n                          className=\"flex items-center space-x-2 bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg transition-colors\"\n                        >\n                          <X className=\"w-4 h-4\" />\n                          <span>Cancel</span>\n                        </motion.button>\n                        <motion.button\n                          whileHover={{ scale: 1.05 }}\n                          whileTap={{ scale: 0.95 }}\n                          onClick={handleSaveProfile}\n                          disabled={isLoading}\n                          className=\"flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition-colors disabled:opacity-50\"\n                        >\n                          <Save className=\"w-4 h-4\" />\n                          <span>{isLoading ? 'Saving...' : 'Save'}</span>\n                        </motion.button>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Full Name</label>\n                      <input\n                        type=\"text\"\n                        name=\"fullName\"\n                        value={isEditingProfile ? profileForm.fullName : (user?.fullName || '')}\n                        onChange={handleInputChange}\n                        readOnly={!isEditingProfile}\n                        className={`w-full px-4 py-3 border border-gray-300 rounded-lg ${\n                          isEditingProfile ? 'bg-white focus:ring-2 focus:ring-yellow-500 focus:border-transparent' : 'bg-gray-50'\n                        }`}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email Address</label>\n                      <input\n                        type=\"email\"\n                        value={user?.email || ''}\n                        readOnly\n                        className=\"w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phone Number</label>\n                      <input\n                        type=\"tel\"\n                        name=\"phone\"\n                        value={isEditingProfile ? profileForm.phone : (user?.phone || '')}\n                        onChange={handleInputChange}\n                        readOnly={!isEditingProfile}\n                        placeholder={isEditingProfile ? \"Enter phone number\" : \"No phone number\"}\n                        className={`w-full px-4 py-3 border border-gray-300 rounded-lg ${\n                          isEditingProfile ? 'bg-white focus:ring-2 focus:ring-yellow-500 focus:border-transparent' : 'bg-gray-50'\n                        }`}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">Date of Birth</label>\n                      <input\n                        type=\"date\"\n                        name=\"dateOfBirth\"\n                        value={profileForm.dateOfBirth}\n                        onChange={handleInputChange}\n                        readOnly={!isEditingProfile}\n                        className={`w-full px-4 py-3 border border-gray-300 rounded-lg ${\n                          isEditingProfile ? 'bg-white focus:ring-2 focus:ring-yellow-500 focus:border-transparent' : 'bg-gray-50'\n                        }`}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"mt-6\">\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Address</label>\n                    <textarea\n                      rows={3}\n                      name=\"address\"\n                      value={isEditingProfile ? profileForm.address : (typeof user?.address === 'string' ? user.address : '')}\n                      onChange={handleInputChange}\n                      readOnly={!isEditingProfile}\n                      placeholder={isEditingProfile ? \"Enter your address\" : \"No address added\"}\n                      className={`w-full px-4 py-3 border border-gray-300 rounded-lg ${\n                        isEditingProfile ? 'bg-white focus:ring-2 focus:ring-yellow-500 focus:border-transparent' : 'bg-gray-50'\n                      }`}\n                    />\n                  </div>\n\n                  {/* Save Button - only show when editing */}\n                  {isEditingProfile && (\n                    <div className=\"mt-8 pt-6 border-t border-gray-200\">\n                      <motion.button\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        onClick={handleSaveProfile}\n                        disabled={isLoading}\n                        className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white py-4 rounded-xl font-semibold text-lg transition-colors flex items-center justify-center space-x-2 disabled:opacity-50\"\n                      >\n                        <Save className=\"w-5 h-5\" />\n                        <span>{isLoading ? 'Saving Profile...' : 'Save Profile'}</span>\n                      </motion.button>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {activeTab === 'orders' && (\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Order History</h2>\n                  {orders.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Package className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                      <p className=\"text-gray-600\">No orders yet</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-4\">\n                      {orders.slice(0, 3).map((order) => (\n                        <div key={order.id} className=\"border border-gray-200 rounded-lg p-6\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div>\n                              <h3 className=\"font-semibold text-gray-900\">Order {order.id}</h3>\n                              <p className=\"text-gray-600\">\n                                Placed on {new Date(order.createdAt).toLocaleDateString()}\n                              </p>\n                            </div>\n                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                              order.status === 'delivered' \n                                ? 'bg-green-100 text-green-800'\n                                : order.status === 'shipped'\n                                ? 'bg-purple-100 text-purple-800'\n                                : 'bg-blue-100 text-blue-800'\n                            }`}>\n                              {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"text-gray-600\">{order.items.length} items</p>\n                              <p className=\"font-semibold text-gray-900\">₹{order.total.toLocaleString('en-IN')}</p>\n                            </div>\n                            <div className=\"space-x-2\">\n                              <button className=\"px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\">\n                                View Details\n                              </button>\n                              {order.status === 'shipped' && (\n                                <button className=\"px-4 py-2 bg-yellow-600 hover:bg-yellow-700 text-white rounded-lg transition-colors\">\n                                  Track Order\n                                </button>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                      {orders.length > 3 && (\n                        <button\n                          onClick={() => setActiveTab('orders-page')}\n                          className=\"w-full py-3 text-yellow-600 hover:text-yellow-700 font-medium transition-colors\"\n                        >\n                          View All Orders ({orders.length})\n                        </button>\n                      )}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {activeTab === 'orders-page' && (\n                <div className=\"-m-6\">\n                  <OrdersPage />\n                </div>\n              )}\n\n              {activeTab === 'wishlist' && (\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">My Wishlist</h2>\n                  <p className=\"text-gray-600 mb-4\">\n                    {wishlistItems.length} {wishlistItems.length === 1 ? 'item' : 'items'} saved\n                  </p>\n                  {wishlistItems.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Heart className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                      <p className=\"text-gray-600\">No items in your wishlist yet</p>\n                    </div>\n                  ) : (\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {wishlistItems.slice(0, 6).map((item) => (\n                        <div key={item.id} className=\"border border-gray-200 rounded-lg p-4\">\n                          <img\n                            src={item.images[0]}\n                            alt={item.name}\n                            className=\"w-full h-32 object-cover rounded-lg mb-2\"\n                          />\n                          <h4 className=\"font-medium text-gray-900\">{item.name}</h4>\n                          <p className=\"text-yellow-600 font-bold\">${item.price}</p>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {activeTab === 'settings' && (\n                <div>\n                  <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Account Settings</h2>\n                  <div className=\"space-y-6\">\n                    <div className=\"border border-gray-200 rounded-lg p-6\">\n                      <h3 className=\"font-semibold text-gray-900 mb-4\">Notifications</h3>\n                      <div className=\"space-y-4\">\n                        <label className=\"flex items-center\">\n                          <input type=\"checkbox\" defaultChecked className=\"rounded border-gray-300 text-yellow-600 focus:ring-yellow-500\" />\n                          <span className=\"ml-3 text-gray-700\">Email notifications for orders</span>\n                        </label>\n                        <label className=\"flex items-center\">\n                          <input type=\"checkbox\" defaultChecked className=\"rounded border-gray-300 text-yellow-600 focus:ring-yellow-500\" />\n                          <span className=\"ml-3 text-gray-700\">Promotional emails</span>\n                        </label>\n                        <label className=\"flex items-center\">\n                          <input type=\"checkbox\" className=\"rounded border-gray-300 text-yellow-600 focus:ring-yellow-500\" />\n                          <span className=\"ml-3 text-gray-700\">SMS notifications</span>\n                        </label>\n                      </div>\n                    </div>\n\n                    <div className=\"border border-gray-200 rounded-lg p-6\">\n                      <h3 className=\"font-semibold text-gray-900 mb-4\">Privacy</h3>\n                      <div className=\"space-y-4\">\n                        <label className=\"flex items-center\">\n                          <input type=\"checkbox\" defaultChecked className=\"rounded border-gray-300 text-yellow-600 focus:ring-yellow-500\" />\n                          <span className=\"ml-3 text-gray-700\">Make profile public</span>\n                        </label>\n                        <label className=\"flex items-center\">\n                          <input type=\"checkbox\" className=\"rounded border-gray-300 text-yellow-600 focus:ring-yellow-500\" />\n                          <span className=\"ml-3 text-gray-700\">Share purchase history</span>\n                        </label>\n                      </div>\n                    </div>\n\n                    <div className=\"border border-red-200 rounded-lg p-6\">\n                      <h3 className=\"font-semibold text-red-900 mb-4\">Danger Zone</h3>\n                      <p className=\"text-red-600 mb-4\">Once you delete your account, there is no going back.</p>\n                      <button className=\"bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors\">\n                        Delete Account\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AccountPage;","size_bytes":20278},"client/src/components/User/HistoryPage.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Clock, Eye, ShoppingCart } from 'lucide-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../store';\nimport { addToCart } from '../../store/slices/cartSlice';\nimport { clearHistory } from '../../store/slices/historySlice';\n\nconst HistoryPage: React.FC = () => {\n  const dispatch = useDispatch();\n  const { items } = useSelector((state: RootState) => state.history);\n  const { isAuthenticated } = useSelector((state: RootState) => state.auth);\n\n  const handleAddToCart = (product: any) => {\n    dispatch(addToCart(product));\n  };\n\n  const handleClearHistory = () => {\n    dispatch(clearHistory());\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pt-20 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Clock className=\"w-24 h-24 text-gray-300 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Sign in to view your history</h2>\n          <p className=\"text-gray-600\">Track the products you've viewed</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">Recently Viewed</h1>\n            <p className=\"text-xl text-gray-600\">\n              {items.length} {items.length === 1 ? 'item' : 'items'} in your history\n            </p>\n          </div>\n          {items.length > 0 && (\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              onClick={handleClearHistory}\n              className=\"bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl font-semibold transition-colors\"\n            >\n              Clear History\n            </motion.button>\n          )}\n        </div>\n\n        {items.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Clock className=\"w-24 h-24 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No viewing history</h3>\n            <p className=\"text-gray-600 mb-6\">Start browsing products to see your history here</p>\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-8 py-3 rounded-xl font-semibold transition-colors\"\n            >\n              Browse Products\n            </motion.button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {items.map((product, index) => (\n              <motion.div\n                key={`${product.id}-${index}`}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n                className=\"bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-lg transition-shadow duration-300 group\"\n              >\n                <div className=\"relative overflow-hidden\">\n                  <img\n                    src={product.images[0]}\n                    alt={product.name}\n                    className=\"w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                  <div className=\"absolute top-4 right-4\">\n                    <div className=\"bg-black/50 text-white px-2 py-1 rounded-full text-xs\">\n                      Viewed recently\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">{product.name}</h3>\n                  <p className=\"text-gray-600 mb-4 line-clamp-2\">{product.description}</p>\n                  \n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-2xl font-bold text-gray-900\">₹{product.price.toLocaleString('en-IN')}</span>\n                      {product.originalPrice && (\n                        <span className=\"text-lg text-gray-500 line-through\">₹{product.originalPrice.toLocaleString('en-IN')}</span>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <motion.button\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      onClick={() => handleAddToCart(product)}\n                      className=\"flex-1 bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors flex items-center justify-center space-x-2\"\n                    >\n                      <ShoppingCart className=\"w-4 h-4\" />\n                      <span>Add to Cart</span>\n                    </motion.button>\n                    <motion.button\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      className=\"p-3 border border-gray-300 rounded-xl hover:border-gray-400 transition-colors\"\n                    >\n                      <Eye className=\"w-5 h-5 text-gray-600\" />\n                    </motion.button>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HistoryPage;","size_bytes":5717},"client/src/components/User/OrdersPage.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Package, Truck, CheckCircle, Clock, Eye, RotateCcw } from 'lucide-react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store';\n\nconst OrdersPage: React.FC = () => {\n  const { orders } = useSelector((state: RootState) => state.orders);\n  const { isAuthenticated } = useSelector((state: RootState) => state.auth);\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pt-20 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Package className=\"w-24 h-24 text-gray-300 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Sign in to view your orders</h2>\n          <p className=\"text-gray-600\">Track your purchases and order history</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n      case 'pending':\n        return <Clock className=\"w-5 h-5 text-yellow-600\" />;\n      case 'processing':\n        return <Package className=\"w-5 h-5 text-blue-600\" />;\n      case 'shipped':\n        return <Truck className=\"w-5 h-5 text-purple-600\" />;\n      case 'delivered':\n        return <CheckCircle className=\"w-5 h-5 text-green-600\" />;\n      case 'cancelled':\n        return <RotateCcw className=\"w-5 h-5 text-red-600\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-gray-600\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'processing':\n        return 'bg-blue-100 text-blue-800';\n      case 'shipped':\n        return 'bg-purple-100 text-purple-800';\n      case 'delivered':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">My Orders</h1>\n          <p className=\"text-xl text-gray-600\">\n            {orders.length} {orders.length === 1 ? 'order' : 'orders'} found\n          </p>\n        </div>\n\n        {orders.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Package className=\"w-24 h-24 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">No orders yet</h3>\n            <p className=\"text-gray-600 mb-6\">Start shopping to see your orders here</p>\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-8 py-3 rounded-xl font-semibold transition-colors\"\n            >\n              Browse Products\n            </motion.button>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {orders.map((order, index) => (\n              <motion.div\n                key={order.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n                className=\"bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden\"\n              >\n                {/* Order Header */}\n                <div className=\"p-6 border-b border-gray-200\">\n                  <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n                    <div className=\"mb-4 sm:mb-0\">\n                      <h3 className=\"text-lg font-semibold text-gray-900 mb-1\">\n                        Order {order.id}\n                      </h3>\n                      <p className=\"text-sm text-gray-600\">\n                        Placed on {formatDate(order.createdAt)}\n                      </p>\n                      {order.estimatedDelivery && (\n                        <p className=\"text-sm text-gray-600\">\n                          Estimated delivery: {formatDate(order.estimatedDelivery)}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getStatusIcon(order.status)}\n                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(order.status)}`}>\n                          {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                        </span>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-lg font-bold text-gray-900\">\n                          ₹{order.total.toLocaleString('en-IN')}\n                        </p>\n                        <p className=\"text-sm text-gray-600\">\n                          {order.items.length} {order.items.length === 1 ? 'item' : 'items'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Order Items */}\n                <div className=\"p-6\">\n                  <div className=\"space-y-4 mb-6\">\n                    {order.items.map((item, itemIndex) => (\n                      <div key={itemIndex} className=\"flex items-center space-x-4\">\n                        <img\n                          src={item.product.images[0]}\n                          alt={item.product.name}\n                          className=\"w-16 h-16 object-cover rounded-lg\"\n                        />\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium text-gray-900\">{item.product.name}</h4>\n                          <p className=\"text-sm text-gray-600\">Quantity: {item.quantity}</p>\n                        </div>\n                        <p className=\"font-medium text-gray-900\">\n                          ₹{item.price.toLocaleString('en-IN')}\n                        </p>\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Order Actions */}\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <motion.button\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      className=\"flex items-center justify-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                      <span>View Details</span>\n                    </motion.button>\n                    \n                    {order.status === 'shipped' && (\n                      <motion.button\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n                      >\n                        <Truck className=\"w-4 h-4\" />\n                        <span>Track Order</span>\n                      </motion.button>\n                    )}\n                    \n                    {order.status === 'delivered' && (\n                      <motion.button\n                        whileHover={{ scale: 1.02 }}\n                        whileTap={{ scale: 0.98 }}\n                        className=\"flex items-center justify-center space-x-2 px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors\"\n                      >\n                        <RotateCcw className=\"w-4 h-4\" />\n                        <span>Reorder</span>\n                      </motion.button>\n                    )}\n                  </div>\n\n                  {/* Payment Information */}\n                  <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-600\">Payment Method</p>\n                        <p className=\"font-medium text-gray-900\">{order.paymentMethod}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-600\">Transaction ID</p>\n                        <p className=\"font-mono text-gray-900\">{order.transactionId}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OrdersPage;","size_bytes":9023},"client/src/components/User/WishlistPage.tsx":{"content":"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Heart, ShoppingCart, Trash2, Eye } from 'lucide-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../store';\nimport { removeFromWishlist } from '../../store/slices/wishlistSlice';\nimport { addToCart } from '../../store/slices/cartSlice';\n\nconst WishlistPage: React.FC = () => {\n  const dispatch = useDispatch();\n  const { items } = useSelector((state: RootState) => state.wishlist);\n  const { isAuthenticated } = useSelector((state: RootState) => state.auth);\n\n  const handleRemoveFromWishlist = (productId: string) => {\n    dispatch(removeFromWishlist(productId));\n  };\n\n  const handleAddToCart = (product: any) => {\n    dispatch(addToCart(product));\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 pt-20 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Heart className=\"w-24 h-24 text-gray-300 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Sign in to view your wishlist</h2>\n          <p className=\"text-gray-600\">Save your favorite items for later</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 pt-20\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold text-gray-900 mb-4\">My Wishlist</h1>\n          <p className=\"text-xl text-gray-600\">\n            {items.length} {items.length === 1 ? 'item' : 'items'} saved for later\n          </p>\n        </div>\n\n        {items.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Heart className=\"w-24 h-24 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Your wishlist is empty</h3>\n            <p className=\"text-gray-600 mb-6\">Start adding items you love to your wishlist</p>\n            <motion.button\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n              className=\"bg-yellow-600 hover:bg-yellow-700 text-white px-8 py-3 rounded-xl font-semibold transition-colors\"\n            >\n              Browse Products\n            </motion.button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {items.map((product, index) => (\n              <motion.div\n                key={product.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n                className=\"bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-lg transition-shadow duration-300 group\"\n              >\n                <div className=\"relative overflow-hidden\">\n                  <img\n                    src={product.images[0]}\n                    alt={product.name}\n                    className=\"w-full h-64 object-cover group-hover:scale-105 transition-transform duration-300\"\n                  />\n                  <div className=\"absolute top-4 right-4 space-y-2\">\n                    <motion.button\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                      onClick={() => handleRemoveFromWishlist(product.id)}\n                      className=\"bg-red-500 text-white p-2 rounded-full shadow-lg hover:bg-red-600 transition-colors\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </motion.button>\n                  </div>\n                </div>\n\n                <div className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">{product.name}</h3>\n                  <p className=\"text-gray-600 mb-4 line-clamp-2\">{product.description}</p>\n                  \n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-2xl font-bold text-gray-900\">₹{product.price.toLocaleString('en-IN')}</span>\n                      {product.originalPrice && (\n                        <span className=\"text-lg text-gray-500 line-through\">₹{product.originalPrice.toLocaleString('en-IN')}</span>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <motion.button\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      onClick={() => handleAddToCart(product)}\n                      className=\"flex-1 bg-yellow-600 hover:bg-yellow-700 text-white py-3 rounded-xl font-semibold transition-colors flex items-center justify-center space-x-2\"\n                    >\n                      <ShoppingCart className=\"w-4 h-4\" />\n                      <span>Add to Cart</span>\n                    </motion.button>\n                    <motion.button\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                      className=\"p-3 border border-gray-300 rounded-xl hover:border-gray-400 transition-colors\"\n                    >\n                      <Eye className=\"w-5 h-5 text-gray-600\" />\n                    </motion.button>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WishlistPage;","size_bytes":5585},"client/src/store/slices/authSlice.ts":{"content":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { User } from '@shared/schema';\nimport { MockAuthService } from '../../utils/mockAuth';\n\ninterface AuthState {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n}\n\nconst initialState: AuthState = {\n  user: null,\n  isLoading: false,\n  isAuthenticated: false,\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setUser: (state, action: PayloadAction<User | null>) => {\n      state.user = action.payload;\n      state.isAuthenticated = !!action.payload;\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n      state.isAuthenticated = false;\n      MockAuthService.logout();\n    },\n  },\n});\n\nexport const { setUser, setLoading, logout } = authSlice.actions;\nexport default authSlice.reducer;","size_bytes":931},"client/src/store/slices/cartSlice.ts":{"content":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { Product } from '@shared/schema';\n\n// Custom cart item interface with product data\ninterface CartItemWithProduct {\n  id: string;\n  product: Product;\n  quantity: number;\n}\n\ninterface CartState {\n  items: CartItemWithProduct[];\n  total: number;\n  isOpen: boolean;\n}\n\nconst initialState: CartState = {\n  items: [],\n  total: 0,\n  isOpen: false,\n};\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action: PayloadAction<Product>) => {\n      const existingItem = state.items.find(item => item.product.id === action.payload.id);\n      if (existingItem) {\n        existingItem.quantity += 1;\n      } else {\n        state.items.push({\n          id: action.payload.id,\n          product: action.payload,\n          quantity: 1,\n        });\n      }\n      state.total = state.items.reduce((sum, item) => sum + (Number(item.product.price) * item.quantity), 0);\n    },\n    removeFromCart: (state, action: PayloadAction<string>) => {\n      state.items = state.items.filter(item => item.id !== action.payload);\n      state.total = state.items.reduce((sum, item) => sum + (Number(item.product.price) * item.quantity), 0);\n    },\n    updateQuantity: (state, action: PayloadAction<{ id: string; quantity: number }>) => {\n      const item = state.items.find(item => item.id === action.payload.id);\n      if (item) {\n        item.quantity = action.payload.quantity;\n        state.total = state.items.reduce((sum, item) => sum + (Number(item.product.price) * item.quantity), 0);\n      }\n    },\n    clearCart: (state) => {\n      state.items = [];\n      state.total = 0;\n    },\n    toggleCart: (state) => {\n      state.isOpen = !state.isOpen;\n    },\n  },\n});\n\nexport const { addToCart, removeFromCart, updateQuantity, clearCart, toggleCart } = cartSlice.actions;\nexport default cartSlice.reducer;","size_bytes":1900},"client/src/store/slices/historySlice.ts":{"content":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Product } from '../../types';\n\ninterface HistoryState {\n  items: Product[];\n}\n\nconst initialState: HistoryState = {\n  items: [],\n};\n\nconst historySlice = createSlice({\n  name: 'history',\n  initialState,\n  reducers: {\n    addToHistory: (state, action: PayloadAction<Product>) => {\n      // Remove if already exists to avoid duplicates\n      state.items = state.items.filter(item => item.id !== action.payload.id);\n      // Add to beginning of array (most recent first)\n      state.items.unshift(action.payload);\n      // Keep only last 50 items\n      if (state.items.length > 50) {\n        state.items = state.items.slice(0, 50);\n      }\n    },\n    clearHistory: (state) => {\n      state.items = [];\n    },\n  },\n});\n\nexport const { addToHistory, clearHistory } = historySlice.actions;\nexport default historySlice.reducer;","size_bytes":892},"client/src/store/slices/orderSlice.ts":{"content":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface OrderItem {\n  id: string;\n  product: {\n    id: string;\n    name: string;\n    price: number;\n    images: string[];\n  };\n  quantity: number;\n  price: number;\n}\n\nexport interface Order {\n  id: string;\n  items: OrderItem[];\n  total: number;\n  status: 'pending' | 'confirmed' | 'processing' | 'shipped' | 'delivered' | 'cancelled';\n  shippingAddress: {\n    fullName: string;\n    email: string;\n    phone: string;\n    address: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n  paymentMethod: string;\n  paymentResult?: any;\n  transactionId: string;\n  createdAt: string;\n  estimatedDelivery?: string;\n}\n\ninterface OrderState {\n  orders: Order[];\n  currentOrder: Order | null;\n  isLoading: boolean;\n}\n\nconst initialState: OrderState = {\n  orders: [],\n  currentOrder: null,\n  isLoading: false,\n};\n\nconst orderSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    addOrder: (state, action: PayloadAction<Order>) => {\n      state.orders.unshift(action.payload); // Add to beginning (most recent first)\n    },\n    updateOrderStatus: (state, action: PayloadAction<{ orderId: string; status: Order['status'] }>) => {\n      const order = state.orders.find(order => order.id === action.payload.orderId);\n      if (order) {\n        order.status = action.payload.status;\n      }\n    },\n    setCurrentOrder: (state, action: PayloadAction<Order | null>) => {\n      state.currentOrder = action.payload;\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n    clearOrders: (state) => {\n      state.orders = [];\n    },\n  },\n});\n\nexport const { \n  addOrder, \n  updateOrderStatus, \n  setCurrentOrder, \n  setLoading, \n  clearOrders \n} = orderSlice.actions;\n\nexport default orderSlice.reducer;","size_bytes":1873},"client/src/store/slices/productSlice.ts":{"content":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Product } from '../../types';\n\ninterface ProductState {\n  products: Product[];\n  featuredProducts: Product[];\n  filteredProducts: Product[];\n  categories: string[];\n  currentCategory: string;\n  searchQuery: string;\n  sortBy: 'price' | 'popularity' | 'latest';\n  isLoading: boolean;\n}\n\nconst initialState: ProductState = {\n  products: [],\n  featuredProducts: [],\n  filteredProducts: [],\n  categories: [],\n  currentCategory: 'all',\n  searchQuery: '',\n  sortBy: 'latest',\n  isLoading: false,\n};\n\nconst productSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    setProducts: (state, action: PayloadAction<Product[]>) => {\n      state.products = action.payload;\n      state.filteredProducts = action.payload;\n      state.categories = [...new Set(action.payload.map(p => p.category))];\n    },\n    setFeaturedProducts: (state, action: PayloadAction<Product[]>) => {\n      state.featuredProducts = action.payload;\n    },\n    setSearchQuery: (state, action: PayloadAction<string>) => {\n      state.searchQuery = action.payload;\n      state.filteredProducts = state.products.filter(product =>\n        product.name.toLowerCase().includes(action.payload.toLowerCase()) ||\n        product.description.toLowerCase().includes(action.payload.toLowerCase())\n      );\n    },\n    setCategory: (state, action: PayloadAction<string>) => {\n      state.currentCategory = action.payload;\n      state.filteredProducts = action.payload === 'all' \n        ? state.products \n        : state.products.filter(product => product.category === action.payload);\n    },\n    setSortBy: (state, action: PayloadAction<'price' | 'popularity' | 'latest'>) => {\n      state.sortBy = action.payload;\n      state.filteredProducts = [...state.filteredProducts].sort((a, b) => {\n        switch (action.payload) {\n          case 'price':\n            return a.price - b.price;\n          case 'popularity':\n            return b.rating - a.rating;\n          case 'latest':\n            return Date.now() - Date.now(); // Mock latest sort\n          default:\n            return 0;\n        }\n      });\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n  },\n});\n\nexport const { setProducts, setFeaturedProducts, setSearchQuery, setCategory, setSortBy, setLoading } = productSlice.actions;\nexport default productSlice.reducer;","size_bytes":2432},"client/src/store/slices/wishlistSlice.ts":{"content":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Product } from '../../types';\n\ninterface WishlistState {\n  items: Product[];\n}\n\nconst initialState: WishlistState = {\n  items: [],\n};\n\nconst wishlistSlice = createSlice({\n  name: 'wishlist',\n  initialState,\n  reducers: {\n    addToWishlist: (state, action: PayloadAction<Product>) => {\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      if (!existingItem) {\n        state.items.push(action.payload);\n      }\n    },\n    removeFromWishlist: (state, action: PayloadAction<string>) => {\n      state.items = state.items.filter(item => item.id !== action.payload);\n    },\n    clearWishlist: (state) => {\n      state.items = [];\n    },\n  },\n});\n\nexport const { addToWishlist, removeFromWishlist, clearWishlist } = wishlistSlice.actions;\nexport default wishlistSlice.reducer;","size_bytes":877},"replit.md":{"content":"# E-commerce Application\n\n## Overview\nThis is an e-commerce application migrated from Bolt to Replit. The application has been successfully migrated from Supabase to PostgreSQL with Drizzle ORM for improved security and compatibility with Replit's environment.\n\n## Project Architecture\n- **Frontend**: React with TypeScript, Vite, TailwindCSS, and shadcn/ui components\n- **Backend**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **State Management**: Redux Toolkit and React Query for server state\n- **Authentication**: Server-side authentication with bcrypt\n- **Payment**: Multi-payment gateway integration (Stripe, UPI, Razorpay, COD)\n\n## Recent Changes\n### Migration from Bolt to Replit (August 8, 2025) - COMPLETED\n- [x] Installed required packages and dependencies\n- [x] Created comprehensive Drizzle schema with all necessary tables\n- [x] Implemented complete API layer replacing Supabase functionality\n- [x] Set up PostgreSQL database with sample products and categories  \n- [x] Removed all Supabase dependencies from components\n- [x] Fixed authentication modal and import issues\n- [x] Updated payment components to use new API service\n- [x] Configured secure client/server separation with proper validation\n- [x] Application successfully running with authentic data from database\n\n### Stripe Payment Processing Integration (August 8, 2025) - COMPLETED\n- [x] Integrated Stripe payment processing with dummy keys for development\n- [x] Added Stripe API routes with payment intent creation and webhook handling\n- [x] Created comprehensive StripeCheckout component with test mode support\n- [x] Updated payment method selection to include Credit/Debit Card option\n- [x] Enhanced StreamlinedCheckout to handle Stripe payments alongside UPI and COD\n- [x] Added proper error handling and payment flow management\n- [x] Implemented mock payment processing for development environment\n\n## User Preferences\n- Prefers comprehensive solutions with detailed implementation\n- Values security and best practices\n- Wants client/server separation for better architecture\n\n## Technical Notes\n- Database URL and credentials are available as environment variables\n- Authentication uses bcrypt for password hashing\n- All API routes are prefixed with `/api`\n- Using UUID primary keys for all database tables\n- TypeScript with strict type checking enabled","size_bytes":2365},"client/src/lib/queryClient.ts":{"content":"import { QueryClient } from '@tanstack/react-query';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      gcTime: 10 * 60 * 1000, // 10 minutes\n    },\n  },\n});\n\nconst API_BASE_URL = '/api';\n\nexport async function apiRequest<T = any>(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<T> {\n  const url = `${API_BASE_URL}${endpoint}`;\n  \n  const defaultHeaders: HeadersInit = {\n    'Content-Type': 'application/json',\n  };\n\n  const config: RequestInit = {\n    ...options,\n    headers: {\n      ...defaultHeaders,\n      ...options.headers,\n    },\n  };\n\n  const response = await fetch(url, config);\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n  }\n\n  return await response.json();\n}\n\nexport const fetcher = async <T = any>(url: string): Promise<T> => {\n  const response = await fetch(`${API_BASE_URL}${url}`);\n  \n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n    throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n  }\n  \n  return await response.json();\n};","size_bytes":1293},"client/src/services/apiService.ts":{"content":"import { apiRequest, fetcher } from '../lib/queryClient';\nimport type { \n  User, \n  InsertUser,\n  Product, \n  InsertProduct,\n  Category, \n  InsertCategory,\n  Order, \n  InsertOrder,\n  CartItem, \n  InsertCartItem,\n  WishlistItem, \n  InsertWishlistItem,\n  Review, \n  InsertReview,\n  Transaction,\n  InsertTransaction,\n  TransactionEvent,\n  InsertTransactionEvent\n} from '@shared/schema';\n\n// Authentication services\nexport const authService = {\n  async register(userData: InsertUser) {\n    return apiRequest<{ user: User }>('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  },\n\n  async login(email: string, password: string) {\n    return apiRequest<{ user: User }>('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ email, password }),\n    });\n  },\n\n  async getUser(id: string) {\n    return fetcher<{ user: User }>(`/auth/user/${id}`);\n  },\n};\n\n// Product services\nexport const productService = {\n  async getProducts(filters?: {\n    category?: string;\n    featured?: boolean;\n    search?: string;\n    limit?: number;\n    offset?: number;\n  }) {\n    const params = new URLSearchParams();\n    if (filters?.category) params.append('category', filters.category);\n    if (filters?.featured !== undefined) params.append('featured', filters.featured.toString());\n    if (filters?.search) params.append('search', filters.search);\n    if (filters?.limit) params.append('limit', filters.limit.toString());\n    if (filters?.offset) params.append('offset', filters.offset.toString());\n    \n    const queryString = params.toString();\n    return fetcher<{ products: Product[] }>(`/products${queryString ? `?${queryString}` : ''}`);\n  },\n\n  async getProduct(id: string) {\n    return fetcher<{ product: Product }>(`/products/${id}`);\n  },\n\n  async createProduct(product: InsertProduct) {\n    return apiRequest<{ product: Product }>('/products', {\n      method: 'POST',\n      body: JSON.stringify(product),\n    });\n  },\n};\n\n// Category services\nexport const categoryService = {\n  async getCategories() {\n    return fetcher<{ categories: Category[] }>('/categories');\n  },\n\n  async createCategory(category: InsertCategory) {\n    return apiRequest<{ category: Category }>('/categories', {\n      method: 'POST',\n      body: JSON.stringify(category),\n    });\n  },\n};\n\n// Order services\nexport const orderService = {\n  async getOrders(userId: string) {\n    return fetcher<{ orders: Order[] }>(`/orders/${userId}`);\n  },\n\n  async createOrder(order: InsertOrder) {\n    return apiRequest<{ order: Order }>('/orders', {\n      method: 'POST',\n      body: JSON.stringify(order),\n    });\n  },\n};\n\n// Cart services\nexport const cartService = {\n  async getCartItems(userId: string) {\n    return fetcher<{ items: CartItem[] }>(`/cart/${userId}`);\n  },\n\n  async addToCart(item: InsertCartItem) {\n    return apiRequest<{ item: CartItem }>('/cart', {\n      method: 'POST',\n      body: JSON.stringify(item),\n    });\n  },\n\n  async updateCartItem(id: string, quantity: number) {\n    return apiRequest<{ item: CartItem }>(`/cart/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ quantity }),\n    });\n  },\n\n  async removeFromCart(id: string) {\n    return apiRequest<{ success: boolean }>(`/cart/${id}`, {\n      method: 'DELETE',\n    });\n  },\n};\n\n// Wishlist services\nexport const wishlistService = {\n  async getWishlistItems(userId: string) {\n    return fetcher<{ items: WishlistItem[] }>(`/wishlist/${userId}`);\n  },\n\n  async addToWishlist(item: InsertWishlistItem) {\n    return apiRequest<{ item: WishlistItem }>('/wishlist', {\n      method: 'POST',\n      body: JSON.stringify(item),\n    });\n  },\n\n  async removeFromWishlist(userId: string, productId: string) {\n    return apiRequest<{ success: boolean }>(`/wishlist/${userId}/${productId}`, {\n      method: 'DELETE',\n    });\n  },\n};\n\n// Review services\nexport const reviewService = {\n  async getReviews(productId: string) {\n    return fetcher<{ reviews: Review[] }>(`/reviews/${productId}`);\n  },\n\n  async createReview(review: InsertReview) {\n    return apiRequest<{ review: Review }>('/reviews', {\n      method: 'POST',\n      body: JSON.stringify(review),\n    });\n  },\n};\n\n// Transaction services\nexport const transactionService = {\n  async createTransaction(transaction: InsertTransaction) {\n    return apiRequest<{ transaction: Transaction }>('/transactions', {\n      method: 'POST',\n      body: JSON.stringify(transaction),\n    });\n  },\n\n  async updateTransaction(orderId: string, updates: Partial<InsertTransaction>) {\n    return apiRequest<{ transaction: Transaction }>(`/transactions/${orderId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n  },\n\n  async createTransactionEvent(event: InsertTransactionEvent) {\n    return apiRequest<{ event: TransactionEvent }>('/transaction-events', {\n      method: 'POST',\n      body: JSON.stringify(event),\n    });\n  },\n};\n\n// Payment services\nexport const paymentService = {\n  async createPaymentIntent(amount: number, currency: string = 'usd', metadata: Record<string, string> = {}) {\n    return apiRequest<{ clientSecret: string; paymentIntentId: string }>('/create-payment-intent', {\n      method: 'POST',\n      body: JSON.stringify({ amount, currency, metadata }),\n    });\n  },\n};","size_bytes":5229},"client/src/components/Payment/StripeCheckout.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Loader2, CreditCard, AlertCircle, CheckCircle } from 'lucide-react';\n\n// Initialize Stripe with dummy public key for development\nconst STRIPE_PUBLIC_KEY = import.meta.env.VITE_STRIPE_PUBLIC_KEY || 'pk_test_dummy_key_for_development';\nconst stripePromise = loadStripe(STRIPE_PUBLIC_KEY);\n\ninterface StripeCheckoutFormProps {\n  amount: number;\n  currency?: string;\n  metadata?: Record<string, string>;\n  onSuccess: (paymentResult: any) => void;\n  onError: (error: string) => void;\n}\n\nconst StripeCheckoutForm: React.FC<StripeCheckoutFormProps> = ({\n  amount,\n  currency = 'usd',\n  metadata = {},\n  onSuccess,\n  onError,\n}) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      onError('Stripe not initialized');\n      return;\n    }\n\n    setIsProcessing(true);\n\n    // For development with dummy keys, simulate payment success\n    if (STRIPE_PUBLIC_KEY === 'pk_test_dummy_key_for_development') {\n      setTimeout(() => {\n        const mockResult = {\n          success: true,\n          transactionId: `stripe_test_${Date.now()}_${Math.random().toString(36).substr(2, 8)}`,\n          paymentMethod: 'Credit Card (Test)',\n          amount,\n          currency,\n          timestamp: Date.now(),\n        };\n        setIsProcessing(false);\n        onSuccess(mockResult);\n        console.log('Payment Successful (Test Mode): Your test payment was processed successfully.');\n      }, 2000);\n      return;\n    }\n\n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/payment-success`,\n        },\n        redirect: 'if_required',\n      });\n\n      if (error) {\n        onError(error.message || 'Payment failed');\n        console.error('Payment Failed:', error.message);\n      } else {\n        const result = {\n          success: true,\n          transactionId: `stripe_${Date.now()}_${Math.random().toString(36).substr(2, 8)}`,\n          paymentMethod: 'Credit Card',\n          amount,\n          currency,\n          timestamp: Date.now(),\n        };\n        onSuccess(result);\n        console.log('Payment Successful: Thank you for your purchase!');\n      }\n    } catch (err: any) {\n      onError(err.message || 'Payment failed');\n      console.error('Payment Error:', err.message || 'An unexpected error occurred');\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border\">\n        <div className=\"flex items-center space-x-3\">\n          <CreditCard className=\"h-5 w-5 text-blue-600\" />\n          <div>\n            <h3 className=\"font-medium text-blue-900 dark:text-blue-100\">Secure Payment</h3>\n            <p className=\"text-sm text-blue-600 dark:text-blue-300\">\n              Amount: ${amount.toFixed(2)} {currency.toUpperCase()}\n            </p>\n          </div>\n        </div>\n        {STRIPE_PUBLIC_KEY === 'pk_test_dummy_key_for_development' && (\n          <div className=\"flex items-center space-x-2 text-orange-600 dark:text-orange-400\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <span className=\"text-xs font-medium\">TEST MODE</span>\n          </div>\n        )}\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"stripe-checkout-form\">\n        {STRIPE_PUBLIC_KEY !== 'pk_test_dummy_key_for_development' ? (\n          <div className=\"p-4 border rounded-lg\">\n            <PaymentElement />\n          </div>\n        ) : (\n          <div className=\"p-6 border-2 border-dashed border-gray-300 rounded-lg text-center\">\n            <CreditCard className=\"h-8 w-8 mx-auto mb-3 text-gray-400\" />\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n              Test Mode - No real payment required\n            </p>\n            <p className=\"text-xs text-gray-500\">\n              Click \"Pay Now\" to simulate a successful payment\n            </p>\n          </div>\n        )}\n\n        <button\n          type=\"submit\"\n          disabled={!stripe || isProcessing}\n          className=\"w-full h-12 text-lg font-semibold bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed text-white rounded-xl transition-colors flex items-center justify-center space-x-2\"\n          data-testid=\"button-pay-now\"\n        >\n          {isProcessing ? (\n            <>\n              <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n              Processing Payment...\n            </>\n          ) : (\n            <>\n              <CheckCircle className=\"mr-2 h-5 w-5\" />\n              Pay ₹{amount.toFixed(2)} Now\n            </>\n          )}\n        </button>\n      </form>\n    </div>\n  );\n};\n\ninterface StripeCheckoutProps {\n  amount: number;\n  currency?: string;\n  metadata?: Record<string, string>;\n  onSuccess: (paymentResult: any) => void;\n  onError: (error: string) => void;\n}\n\nconst StripeCheckout: React.FC<StripeCheckoutProps> = (props) => {\n  const [clientSecret, setClientSecret] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    const createPaymentIntent = async () => {\n      try {\n        setIsLoading(true);\n        const response = await apiRequest<{ clientSecret: string; paymentIntentId: string }>('/create-payment-intent', {\n          method: 'POST',\n          body: JSON.stringify({\n            amount: props.amount,\n            currency: props.currency || 'usd',\n            metadata: props.metadata || {},\n          }),\n        });\n        \n        setClientSecret(response.clientSecret);\n      } catch (err: any) {\n        setError(err.message || 'Failed to initialize payment');\n        props.onError(err.message || 'Failed to initialize payment');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    createPaymentIntent();\n  }, [props.amount, props.currency]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\" data-testid=\"loading-payment\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4 text-blue-600\" />\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            Initializing secure payment...\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center p-8\" data-testid=\"payment-error\">\n        <div className=\"text-center text-red-600\">\n          <AlertCircle className=\"h-8 w-8 mx-auto mb-4\" />\n          <p className=\"font-medium\">Payment initialization failed</p>\n          <p className=\"text-sm mt-2\">{error}</p>\n        </div>\n      </div>\n    );\n  }\n\n  // For development with dummy keys or when clientSecret is available\n  const stripeOptions = {\n    clientSecret: clientSecret || 'dummy_client_secret_for_development',\n    appearance: {\n      theme: 'stripe' as const,\n      variables: {\n        colorPrimary: '#2563eb',\n      },\n    },\n  };\n\n  return (\n    <Elements stripe={stripePromise} options={stripeOptions}>\n      <StripeCheckoutForm {...props} />\n    </Elements>\n  );\n};\n\nexport default StripeCheckout;","size_bytes":7623},"client/src/components/Payment/StripePaymentMethod.tsx":{"content":"import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { CreditCard, Lock, CheckCircle, AlertTriangle } from 'lucide-react';\nimport StripeCheckout from './StripeCheckout';\nimport { Button } from '@/components/ui/button';\n\ninterface StripePaymentMethodProps {\n  amount: number;\n  currency?: string;\n  metadata?: Record<string, string>;\n  onSuccess: (paymentResult: any) => void;\n  onError: (error: string) => void;\n  onBack?: () => void;\n}\n\nconst StripePaymentMethod: React.FC<StripePaymentMethodProps> = ({\n  amount,\n  currency = 'usd',\n  metadata = {},\n  onSuccess,\n  onError,\n  onBack,\n}) => {\n  const [showCheckout, setShowCheckout] = useState(false);\n\n  if (showCheckout) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Credit Card Payment\n          </h3>\n          {onBack && (\n            <Button \n              variant=\"ghost\" \n              onClick={() => setShowCheckout(false)}\n              data-testid=\"button-back-to-methods\"\n            >\n              ← Back to Payment Methods\n            </Button>\n          )}\n        </div>\n        \n        <StripeCheckout\n          amount={amount}\n          currency={currency}\n          metadata={metadata}\n          onSuccess={onSuccess}\n          onError={onError}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n          Choose Payment Method\n        </h3>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Select how you'd like to pay for your order\n        </p>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {/* Credit Card Payment */}\n        <motion.div\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n          className=\"p-6 border-2 border-gray-200 dark:border-gray-700 rounded-xl cursor-pointer hover:border-blue-500 hover:shadow-md transition-all duration-200\"\n          onClick={() => setShowCheckout(true)}\n          data-testid=\"payment-method-stripe\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"p-3 bg-blue-100 dark:bg-blue-900/30 rounded-full\">\n                <CreditCard className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div>\n                <h4 className=\"font-semibold text-gray-900 dark:text-white\">\n                  Credit/Debit Card\n                </h4>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Visa, Mastercard, American Express\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Lock className=\"h-4 w-4 text-green-600\" />\n              <span className=\"text-xs text-green-600 font-medium\">SECURE</span>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Security Notice */}\n        <div className=\"flex items-start space-x-3 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n          <CheckCircle className=\"h-5 w-5 text-green-600 flex-shrink-0 mt-0.5\" />\n          <div className=\"text-sm\">\n            <p className=\"font-medium text-green-800 dark:text-green-200\">\n              Secure Payment Processing\n            </p>\n            <p className=\"text-green-600 dark:text-green-300 mt-1\">\n              Your payment information is encrypted and processed securely by Stripe.\n              We never store your card details on our servers.\n            </p>\n          </div>\n        </div>\n\n        {/* Test Mode Notice */}\n        {(import.meta.env.VITE_STRIPE_PUBLIC_KEY === 'pk_test_dummy_key_for_development' || \n          !import.meta.env.VITE_STRIPE_PUBLIC_KEY) && (\n          <div className=\"flex items-start space-x-3 p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg border border-orange-200 dark:border-orange-800\">\n            <AlertTriangle className=\"h-5 w-5 text-orange-600 flex-shrink-0 mt-0.5\" />\n            <div className=\"text-sm\">\n              <p className=\"font-medium text-orange-800 dark:text-orange-200\">\n                Development Mode\n              </p>\n              <p className=\"text-orange-600 dark:text-orange-300 mt-1\">\n                This is a test environment. No real payments will be processed.\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default StripePaymentMethod;","size_bytes":4710}}}